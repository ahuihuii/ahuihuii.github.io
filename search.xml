<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>蓝桥杯学习</title>
      <link href="/posts/a166cea7.html"/>
      <url>/posts/a166cea7.html</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯"><a href="#蓝桥杯" class="headerlink" title="蓝桥杯"></a>蓝桥杯</h1><h2 id="一些题目"><a href="#一些题目" class="headerlink" title="一些题目"></a>一些题目</h2><h3 id="1-找出二进制中1的个数"><a href="#1-找出二进制中1的个数" class="headerlink" title="1.找出二进制中1的个数"></a>1.找出二进制中1的个数</h3><p>解法一：取余找出每一位，计数</p><p>解法二：i表示x二进制从低到高第i位，循环判断每一位 x&amp;(1&lt;&lt;i)&#x3D;&#x3D;(1&lt;&lt;i)</p><p>1&lt;&lt;i的结果只有第i位是1，那么x&amp;(1&lt;&lt;i)也只有判断位保留下来(其他位都变为0)，如果该数等于(1&lt;&lt;i)，那么第i位本来就是1，计数</p><p>解法三：while(x!&#x3D;0) {x&#x3D;(x-1)&x;cnt++;}</p><p>(x-1)&amp;x的作用是删去x二进制的最低一位1，每删去一次计数一次，直到x为0退出循环</p><h3 id="2-判断一个整数是不是2的整数次方"><a href="#2-判断一个整数是不是2的整数次方" class="headerlink" title="2.判断一个整数是不是2的整数次方"></a>2.判断一个整数是不是2的整数次方</h3><p>如果x是2的整数次方，那么x转换成二进制，只有一个1</p><p>即如果 (x-1)&amp;x &#x3D;&#x3D; 0，那么只有一个1，它是2的整数次方</p><h3 id="3-交换整数二进制的奇偶位"><a href="#3-交换整数二进制的奇偶位" class="headerlink" title="3.交换整数二进制的奇偶位"></a>3.交换整数二进制的奇偶位</h3><p>例如 9 &#x3D; 10 01 交换得到 01 10 ，即6</p><p>例如：整数x的二进制为 xyxyxyxy…xy</p><p>一个整数(4字节32位) 和 101010…10(共32位) 按位与，结果1：偶数位保留，奇数位置零</p><p>一个整数(4字节32位) 和 010101…01(共32位) 按位与，结果2：奇数位保留，偶数位置零</p><p>结果1：x0x0x0x0…x0右移一位0x0x0x0x…0x</p><p>结果2：0y0y0y0y…0y左移一位y0y0y0y0…y0</p><p>各自移位再异或，得到结果：yxyxyxyx…yx，成功交换了奇偶位</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> ou = a &amp; <span class="number">0xaaaaaaaa</span>;</span><br><span class="line">    <span class="type">int</span> ji = a &amp; <span class="number">0x55555555</span>;</span><br><span class="line">    <span class="type">int</span> ans = (ou &gt;&gt; <span class="number">1</span>) ^ (ji &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; ans; <span class="comment">//ans==6</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-找出数组中只出现一次的数字"><a href="#4-找出数组中只出现一次的数字" class="headerlink" title="4.找出数组中只出现一次的数字"></a>4.找出数组中只出现一次的数字</h3><p>一个数组中，有一个数只出现了1次，其他数都出现了k次，找出这个唯一的数</p><p>思路：将所有数都用k进制表示，由于重复出现k次的同一个数不进位相加在一起，得到的结果是0，那么这个数组中所有数不进位加在一起，结果只剩下单独的那个数</p><h3 id="5-最大公约数-f-m-n-f-n-m-n"><a href="#5-最大公约数-f-m-n-f-n-m-n" class="headerlink" title="5.最大公约数 f(m,n)&#x3D;f(n,m%n)"></a>5.最大公约数 f(m,n)&#x3D;f(n,m%n)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; n) &#123;</span><br><span class="line">        <span class="type">int</span> tmp = m;</span><br><span class="line">        m = n;</span><br><span class="line">        n = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gcd</span>(n, m % n);</span><br><span class="line">&#125; <span class="comment">//原理是辗转相除法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; m &gt;&gt; n) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">gcd</span>(m, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-字符串练习"><a href="#6-字符串练习" class="headerlink" title="6.字符串练习"></a>6.字符串练习</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">要求输入一个整数n，输出如下n行的字母三角形：</span><br><span class="line"></span><br><span class="line">输入<span class="number">2</span>： A输入<span class="number">3</span>： A</span><br><span class="line">  BBB                       BBB</span><br><span class="line">     CCCCC</span><br><span class="line">               </span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string space = <span class="built_in">string</span>(n - i, <span class="string">&#x27; &#x27;</span>); <span class="comment">//字符串前空格</span></span><br><span class="line">        string str = <span class="built_in">string</span>(<span class="number">2</span> * i - <span class="number">1</span>, <span class="built_in">char</span>(<span class="number">64</span> + i));</span><br><span class="line">        <span class="comment">//string构造函数，string str = string(int n, char 字符) </span></span><br><span class="line">        <span class="comment">//这样得到的str是n个给定字符组成的字符串</span></span><br><span class="line">        cout &lt;&lt; space + str &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串函数（在c++中都不太好用，了解一下）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strcpy</span><span class="params">(<span class="type">char</span> *destin, <span class="type">char</span> *source)</span> <span class="comment">//将source字符串复制到destin</span></span></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strcat</span><span class="params">(<span class="type">char</span> *destin, <span class="type">char</span> *source)</span> <span class="comment">//将source字符串拼接到destin后面</span></span></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strcmp</span><span class="params">(<span class="type">char</span> *str1, <span class="type">char</span> *str2)</span> <span class="comment">//从第一个字符开始逐字符比较，直到有字符不相等，返回str1[i]-str2[i]，如果两个字符串完全相同，则会返回0</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//由于上面的函数在c++中都不太好用，cpp用下面的</span></span></span><br><span class="line"><span class="function"><span class="comment">//string s(str) 生成字符串s复制str</span></span></span><br><span class="line"><span class="function"><span class="comment">//string s(str,strbegin,strlen) 将字符串str中下标从strbegin开始，长度为strlen的字符串作为初始值</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">//str.size()和str.length() 返回string对象的字符个数，执行效果相同</span></span></span><br><span class="line"><span class="function"><span class="comment">//str.compare(str1) 实现字符串比较</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h3 id="7-DFS"><a href="#7-DFS" class="headerlink" title="7.DFS"></a>7.DFS</h3><h4 id="（1）水池问题"><a href="#（1）水池问题" class="headerlink" title="（1）水池问题"></a>（1）水池问题</h4><p>输入：行&#x2F;列数m&#x2F;n，水池状况（1表示水池，0表示陆地）</p><p>输出：水池的个数，连接在一起的水池只算作一个</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line"><span class="type">int</span> space[<span class="number">10</span>][<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(y+<span class="number">1</span>&lt;=n&amp;&amp;space[x][y+<span class="number">1</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">space[x][y+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(x,y+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x+<span class="number">1</span>&lt;=m&amp;&amp;space[x+<span class="number">1</span>][y]==<span class="number">1</span>)&#123;</span><br><span class="line">space[x+<span class="number">1</span>][y]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(x+<span class="number">1</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y<span class="number">-1</span>&gt;=<span class="number">1</span>&amp;&amp;space[x][y<span class="number">-1</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">space[x][y<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(x,y<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x<span class="number">-1</span>&gt;=<span class="number">1</span>&amp;&amp;space[x<span class="number">-1</span>][y]==<span class="number">1</span>)&#123;</span><br><span class="line">space[x<span class="number">-1</span>][y]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(x<span class="number">-1</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;space[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(space[i][j])&#123;</span><br><span class="line">num++;</span><br><span class="line"><span class="built_in">dfs</span>(i,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;num;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个void dfs()函数，功能是如果二维数组某点为1，则判断其上下左右是否为为1，若为1，使之为0，并递归调用dfs对其周围进行搜索判断，从而实现<strong>将连通的水池全部置0</strong>的操作，**每置0一片水池，num++**；其中，若传入一个已知为1的点，对它周围搜索，肯定会搜索会本点并使之为0，则无需单独对该点单独操作</p><h4 id="（2）六角星问题"><a href="#（2）六角星问题" class="headerlink" title="（2）六角星问题"></a>（2）六角星问题</h4><p>在六角形中，填入1~12的数字。使得每条直线上的数字之和都相同</p><p>将图中每一个节点（位置）抽象成一个数字，一共12个节点，用数组来存放其放的数字；用v数组来表示一个数字是否被用过；对每一个位置x进行dfs</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> bian[<span class="number">7</span>];</span><br><span class="line"><span class="type">int</span> dian[<span class="number">13</span>];</span><br><span class="line"><span class="type">int</span> v[<span class="number">13</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>||x==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">dfs</span>(x+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">12</span>)&#123;</span><br><span class="line">bian[<span class="number">1</span>]=dian[<span class="number">1</span>]+dian[<span class="number">3</span>]+dian[<span class="number">6</span>]+dian[<span class="number">8</span>];</span><br><span class="line">bian[<span class="number">2</span>]=dian[<span class="number">1</span>]+dian[<span class="number">4</span>]+dian[<span class="number">7</span>]+dian[<span class="number">11</span>];</span><br><span class="line">bian[<span class="number">3</span>]=dian[<span class="number">8</span>]+dian[<span class="number">9</span>]+dian[<span class="number">10</span>]+dian[<span class="number">11</span>];</span><br><span class="line">bian[<span class="number">4</span>]=dian[<span class="number">2</span>]+dian[<span class="number">3</span>]+dian[<span class="number">4</span>]+dian[<span class="number">5</span>];</span><br><span class="line">bian[<span class="number">5</span>]=dian[<span class="number">2</span>]+dian[<span class="number">6</span>]+dian[<span class="number">9</span>]+dian[<span class="number">12</span>];</span><br><span class="line">bian[<span class="number">6</span>]=dian[<span class="number">5</span>]+dian[<span class="number">7</span>]+dian[<span class="number">10</span>]+dian[<span class="number">12</span>];</span><br><span class="line"><span class="keyword">if</span>(bian[<span class="number">1</span>]==bian[<span class="number">2</span>]&amp;&amp;bian[<span class="number">2</span>]==bian[<span class="number">3</span>]&amp;&amp;bian[<span class="number">3</span>]==bian[<span class="number">4</span>]&amp;&amp;bian[<span class="number">4</span>]==bian[<span class="number">5</span>]&amp;&amp;bian[<span class="number">5</span>]==bian[<span class="number">6</span>])&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">13</span>;i++)&#123;</span><br><span class="line">cout&lt;&lt;dian[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">13</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(v[i]!=<span class="number">1</span>)&#123;</span><br><span class="line">v[i]=<span class="number">1</span>;</span><br><span class="line">dian[x]=i;</span><br><span class="line"><span class="built_in">dfs</span>(x+<span class="number">1</span>);</span><br><span class="line">v[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;<span class="number">13</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line">sum+=k;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">dian[<span class="number">1</span>]=<span class="number">1</span>; <span class="comment">//初始给定的已知点</span></span><br><span class="line">dian[<span class="number">2</span>]=<span class="number">8</span>;</span><br><span class="line">dian[<span class="number">12</span>]=<span class="number">3</span>;</span><br><span class="line">v[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">v[<span class="number">8</span>]=<span class="number">1</span>;</span><br><span class="line">v[<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）-蓝桥杯-2013-国-AC-网络寻路"><a href="#（3）-蓝桥杯-2013-国-AC-网络寻路" class="headerlink" title="（3）[蓝桥杯 2013 国 AC] 网络寻路"></a>（3）[蓝桥杯 2013 国 AC] 网络寻路</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N],ne[N],e[N],idx;</span><br><span class="line"><span class="comment">//head[i] 表示以i为起点的第一条边的存储位置。本因是编号最大的边，只是便于从头扫边。</span></span><br><span class="line"><span class="comment">//next[i] 表示与第i条边同起点的下一条边的存储位置。下一条边，也就是是前一个由起点扩展的边</span></span><br><span class="line"><span class="comment">//e[i] 表示第i条边的终点（即当前边连向的点）</span></span><br><span class="line"><span class="comment">//v[i] 表示第i条边的权值（视情况决定是否使用）</span></span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//add函数，添加一个从a指向b的边</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">e[idx]=b;ne[idx]=h[a];h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//x是当前节点，fa是其父节点，cnt是这条路径上经过的节点数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> fa,<span class="type">int</span> cnt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">4</span>)&#123;</span><br><span class="line"><span class="comment">//经过4个节点，长度满足，ans++，return </span></span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//i=h[x]表示以当前节点x为起点的第一条边，j=e[i]获得这条边的终点，如果是父节点，重新寻找下一条边 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[x];~i;i=ne[i])&#123; <span class="comment">//~i表示 i!=-1 </span></span><br><span class="line"><span class="type">int</span> j=e[i];</span><br><span class="line"><span class="keyword">if</span>(j==fa)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(j,x,cnt+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="built_in">sizeof</span>(h));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">add</span>(x,y);</span><br><span class="line"><span class="built_in">add</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">dfs</span>(i,<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-贪心"><a href="#8-贪心" class="headerlink" title="8.贪心"></a>8.贪心</h3><h4 id="（1）最大子序和"><a href="#（1）最大子序和" class="headerlink" title="（1）最大子序和"></a>（1）最大子序和</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> result=<span class="number">-999999</span>;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        count+=nums[i];</span><br><span class="line">        <span class="keyword">if</span>(count&gt;result)result=count;</span><br><span class="line">        <span class="keyword">if</span>(count&lt;<span class="number">0</span>)count=<span class="number">0</span>;<span class="comment">//连续和变成负数，前面的都不要了，count更新成下一个数</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）买卖股票II"><a href="#（2）买卖股票II" class="headerlink" title="（2）买卖股票II"></a>（2）买卖股票II</h4><p>给定一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候最多只能持有一股股票。返回可以获得的最大利润</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//price[0]第0天不能卖出</span></span><br><span class="line"><span class="comment">//如果在第0天买入，第3天卖出，那么利润为</span></span><br><span class="line"><span class="comment">//p3-p0=(p3-p2)+(p2-p1)+(p1-p0)，等于之间每一天的净利润之和</span></span><br><span class="line"><span class="comment">//那么对每一天相较于前一天求净利润，正利润全部相加就是可以获得的最大总利润(只要第二天价格比前一天高，就可以前一天买入，第二天卖出)</span></span><br><span class="line"><span class="comment">//prices[]=&#123;7,1,5,3,6,4&#125;</span></span><br><span class="line"><span class="comment">//          -6 4 -2 3 -2            </span></span><br><span class="line"><span class="comment">//所以最大利润就是4+3=7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;prices.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            result+=<span class="built_in">max</span>(prices[i]-prices[i<span class="number">-1</span>],<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（3）跳跃游戏"><a href="#（3）跳跃游戏" class="headerlink" title="（3）跳跃游戏"></a>（3）跳跃游戏</h4><p>给你一个非负整数数组 nums ，你最初位于数组的第一个下标 。数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标，如果可以，返回 true ；否则，返回 false 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> cover=<span class="number">0</span>;<span class="comment">//能覆盖到最右侧的边界</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=cover;i++)&#123; <span class="comment">//注意i正在覆盖边界cover内遍历</span></span><br><span class="line">            cover=<span class="built_in">max</span>(cover,i+nums[i]); <span class="comment">//对边界扩展</span></span><br><span class="line">            <span class="keyword">if</span>(cover&gt;=nums.<span class="built_in">size</span>()<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（4）跳跃游戏2"><a href="#（4）跳跃游戏2" class="headerlink" title="（4）跳跃游戏2"></a>（4）跳跃游戏2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> max_far = <span class="number">0</span>;<span class="comment">// 目前能跳到的最远位置</span></span><br><span class="line">        <span class="type">int</span> step = <span class="number">0</span>;   <span class="comment">// 跳跃次数</span></span><br><span class="line">        <span class="type">int</span> end = <span class="number">0</span>;    <span class="comment">// 上次跳跃可达范围右边界（下次的最右起跳点）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            max_far = <span class="built_in">max</span>(max_far, i + nums[i]);</span><br><span class="line">            <span class="comment">// 到达上次跳跃能到达的右边界了</span></span><br><span class="line">            <span class="keyword">if</span> (i == end)</span><br><span class="line">            &#123;</span><br><span class="line">                end = max_far;  <span class="comment">// 目前能跳到的最远位置变成了下次起跳位置的有边界</span></span><br><span class="line">                step++;         <span class="comment">// 进入下一次跳跃</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（5）加油站-力扣134"><a href="#（5）加油站-力扣134" class="headerlink" title="（5）加油站  力扣134"></a>（5）加油站  力扣134</h4><p>在一条环路上有 <code>n</code> 个加油站，其中第 <code>i</code> 个加油站有汽油 <code>gas[i]</code> 升。</p><p>你有一辆油箱容量无限的的汽车，从第 <code>i</code> 个加油站开往第 <code>i+1</code> 个加油站需要消耗汽油 <code>cost[i]</code> 升。你从其中的一个加油站出发，开始时油箱为空。</p><p>给定两个整数数组 <code>gas</code> 和 <code>cost</code> ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 <code>-1</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//total记录全程油耗，判断能否走一圈</span></span><br><span class="line"><span class="comment">//gas[i]-cost[i]记录单个站点 加油量和到下一站的耗油量 的差值，</span></span><br><span class="line"><span class="comment">//cur记录从当前的start开始，车内的油量。一旦油量&lt;0，说明从当前start开始，到不了i+1站</span></span><br><span class="line"><span class="comment">//因此，设置i+1站位新的开始点start，并将cur归零，重新记录</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">startNum</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;gas,vector&lt;<span class="type">int</span>&gt; &amp;cost)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> cur=<span class="number">0</span>,total=<span class="number">0</span>,start=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;gas.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">cur+=(gas[i]-cost[i]);</span><br><span class="line">total+=(gas[i]-cost[i]);</span><br><span class="line"><span class="keyword">if</span>(cur&lt;<span class="number">0</span>)&#123;</span><br><span class="line">start=i+<span class="number">1</span>;</span><br><span class="line">cur=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(total&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（6）根据身高重建队列-力扣406"><a href="#（6）根据身高重建队列-力扣406" class="headerlink" title="（6）根据身高重建队列  力扣406"></a>（6）根据身高重建队列  力扣406</h4><p>假设有打乱顺序的一群人站成一个队列，数组 <code>people</code> 表示队列中一些人的属性（不一定按顺序）。每个 <code>people[i] = [hi, ki]</code> 表示第 <code>i</code> 个人的身高为 <code>hi</code> ，前面 <strong>正好</strong> 有 <code>ki</code> 个身高大于或等于 <code>hi</code> 的人。</p><p>请你重新构造并返回输入数组 <code>people</code> 所表示的队列。返回的队列应该格式化为数组 <code>queue</code> ，其中 <code>queue[j] = [hj, kj]</code> 是队列中第 <code>j</code> 个人的属性（<code>queue[0]</code> 是排在队列前面的人）</p><p>思路：</p><p>两个维度一个一个贪心，先根据身高从高到低进行排序，对于相同身高按k从小到大排序，再遍历队列，将每个元素插入到合适的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] == b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">reconstructQueue</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; people) &#123;</span><br><span class="line">        <span class="built_in">sort</span> (people.<span class="built_in">begin</span>(), people.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; que;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; people.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> position = people[i][<span class="number">1</span>];</span><br><span class="line">            que.<span class="built_in">insert</span>(que.<span class="built_in">begin</span>() + position, people[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> que;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（7）用最少数量的箭引爆气球-力扣452"><a href="#（7）用最少数量的箭引爆气球-力扣452" class="headerlink" title="（7）用最少数量的箭引爆气球  力扣452"></a>（7）用最少数量的箭引爆气球  力扣452</h4><p>有一些球形气球贴在一堵用 XY 平面表示的墙面上。墙面上的气球记录在整数数组 <code>points</code> ，其中<code>points[i] = [xstart, xend]</code> 表示水平直径在 <code>xstart</code> 和 <code>xend</code>之间的气球。你不知道气球的确切 y 坐标。</p><p>一支弓箭可以沿着 x 轴从不同点 <strong>完全垂直</strong> 地射出。在坐标 <code>x</code> 处射出一支箭，若有一个气球的直径的开始和结束坐标为 <code>x``start</code>，<code>x``end</code>， 且满足  <code>xstart ≤ x ≤ x``end</code>，则该气球会被 <strong>引爆</strong> 。可以射出的弓箭的数量 <strong>没有限制</strong> 。 弓箭一旦被射出之后，可以无限地前进。</p><p>给你一个数组 <code>points</code> ，<em>返回引爆所有气球所必须射出的 <strong>最小</strong> 弓箭数</em> 。</p><p>思路：</p><p>将气球按x坐标从小到大排列，遍历气球，如果一个气球i的左边界小于等于上一个气球i-1的右边界，说明这个气球i和上一个气球i-1有重合，可以一箭射爆。同时，还要考虑气球i之后的气球i+k，能否多个一起射爆。</p><p>因此，确认气球i和i-1之间有重合后，将气球i的右边界更新为这两个气球右边界的最小值，min(point[i][1], point[i-1][1])。这样可以判断之后气球的左边界能否够到新的右边界，来判断重合</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMinArrowShots</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (points.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(points.<span class="built_in">begin</span>(), points.<span class="built_in">end</span>(), cmp);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> result = <span class="number">1</span>; <span class="comment">// points 不为空至少需要一支箭</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; points.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (points[i][<span class="number">0</span>] &gt; points[i - <span class="number">1</span>][<span class="number">1</span>]) &#123;  <span class="comment">// 气球i和气球i-1不挨着，注意这里不是&gt;=</span></span><br><span class="line">                result++; <span class="comment">// 需要一支箭</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;  <span class="comment">// 气球i和气球i-1挨着</span></span><br><span class="line">                points[i][<span class="number">1</span>] = <span class="built_in">min</span>(points[i - <span class="number">1</span>][<span class="number">1</span>], points[i][<span class="number">1</span>]); <span class="comment">// 更新重叠气球最小右边界</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（8）无重叠区间-力扣435"><a href="#（8）无重叠区间-力扣435" class="headerlink" title="（8）无重叠区间  力扣435"></a>（8）无重叠区间  力扣435</h4><p>给定一个区间的集合 <code>intervals</code> ，其中 <code>intervals[i] = [starti, endi]</code> 。返回 <em>需要移除区间的最小数量，使剩余区间互不重叠</em> 。</p><p>首先遍历区间，判断i和i-1是否重合，如果重合，更新result和当前区间的右边界，以此判断重合区间和i+1是否有重合（这里的result++，是根据后面的重合情况，删去i和i-1这两个区间中的某一个）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与上一题类似</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp;a,<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp;b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>]&lt;b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(),intervals.<span class="built_in">end</span>(),cmp);</span><br><span class="line">        <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;intervals.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(intervals[i][<span class="number">0</span>]&lt;intervals[i<span class="number">-1</span>][<span class="number">1</span>])&#123;</span><br><span class="line">                result++;</span><br><span class="line">                intervals[i][<span class="number">1</span>]=<span class="built_in">min</span>(intervals[i][<span class="number">1</span>],intervals[i<span class="number">-1</span>][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（9）划分字母区间-力扣763"><a href="#（9）划分字母区间-力扣763" class="headerlink" title="（9）划分字母区间  力扣763"></a>（9）划分字母区间  力扣763</h4><p>给你一个字符串 <code>s</code> 。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。</p><p>注意，划分结果需要满足：将所有划分结果按顺序连接，得到的字符串仍然是 <code>s</code> 。</p><p>返回一个表示每个字符串片段的长度的列表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">partitionLabels</span><span class="params">(string S)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> hash[<span class="number">27</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// i为字符，hash[i]为字符出现的最后位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; S.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 统计每一个字符最后出现的位置</span></span><br><span class="line">            hash[S[i] - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; S.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            right = <span class="built_in">max</span>(right, hash[S[i] - <span class="string">&#x27;a&#x27;</span>]); <span class="comment">// 找到字符出现的最远边界</span></span><br><span class="line">            <span class="keyword">if</span> (i == right) &#123;</span><br><span class="line">                result.<span class="built_in">push_back</span>(right - left + <span class="number">1</span>);</span><br><span class="line">                left = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（10）合并区间-力扣56"><a href="#（10）合并区间-力扣56" class="headerlink" title="（10）合并区间  力扣56"></a>（10）合并区间  力扣56</h4><p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回 <em>一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间</em> 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;a,vector&lt;<span class="type">int</span>&gt;&amp;b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>]&lt;b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">merge</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals) &#123;</span><br><span class="line">        <span class="keyword">if</span>(intervals.<span class="built_in">size</span>()==<span class="number">0</span>) <span class="keyword">return</span> intervals;</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(),intervals.<span class="built_in">end</span>(),cmp);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(intervals[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;intervals.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(intervals[i][<span class="number">0</span>]&lt;=ans.<span class="built_in">back</span>()[<span class="number">1</span>])&#123; <span class="comment">//发现重合区间</span></span><br><span class="line">                ans.<span class="built_in">back</span>()[<span class="number">1</span>]=<span class="built_in">max</span>(ans.<span class="built_in">back</span>()[<span class="number">1</span>],intervals[i][<span class="number">1</span>]);</span><br><span class="line">                <span class="comment">// 合并区间，只更新右边界就好，因为result.back()的左边界一定是最小值，因为我们按照左边界排序的</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(intervals[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（11）单调自增的数字-力扣738"><a href="#（11）单调自增的数字-力扣738" class="headerlink" title="（11）单调自增的数字  力扣738"></a>（11）单调自增的数字  力扣738</h4><p>当且仅当每个相邻位数上的数字 <code>x</code> 和 <code>y</code> 满足 <code>x &lt;= y</code> 时，我们称这个整数是<strong>单调递增</strong>的。</p><p>给定一个整数 <code>n</code> ，返回 <em>小于或等于 <code>n</code> 的最大数字，且数字呈 <strong>单调递增</strong></em> 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">monotoneIncreasingDigits</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">        string strNum = <span class="built_in">to_string</span>(N);</span><br><span class="line">        <span class="comment">// flag用来标记赋值9从哪里开始</span></span><br><span class="line">        <span class="comment">// 设置为这个默认值，为了防止第二个for循环在flag没有被赋值的情况下执行</span></span><br><span class="line">        <span class="type">int</span> flag = strNum.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = strNum.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strNum[i - <span class="number">1</span>] &gt; strNum[i] ) &#123;</span><br><span class="line">                flag = i;</span><br><span class="line">                strNum[i - <span class="number">1</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = flag; i &lt; strNum.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            strNum[i] = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">stoi</span>(strNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（12）-蓝桥杯-2013-省-B-翻硬币"><a href="#（12）-蓝桥杯-2013-省-B-翻硬币" class="headerlink" title="（12）[蓝桥杯 2013 省 B] 翻硬币"></a>（12）[蓝桥杯 2013 省 B] 翻硬币</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">string s1,s2;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s1.<span class="built_in">size</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s1[i]!=s2[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(s1[i+<span class="number">1</span>]==<span class="string">&#x27;*&#x27;</span>)s1[i+<span class="number">1</span>]=<span class="string">&#x27;o&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> s1[i+<span class="number">1</span>]=<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;cnt;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-动态规划"><a href="#9-动态规划" class="headerlink" title="9.动态规划"></a>9.动态规划</h3><p>动规五部曲：确定dp[i]含义；递推公式；dp数组如何初始化；遍历顺序；打印dp数组</p><h4 id="（1）斐波那契数-力扣509"><a href="#（1）斐波那契数-力扣509" class="headerlink" title="（1）斐波那契数  力扣509"></a>（1）斐波那契数  力扣509</h4><p>确定dp[i]含义：dp[i]第i个斐波那契数</p><p>递推公式：dp[i]&#x3D;dp[i-1]+dp[i-2]</p><p>dp数组如何初始化：dp[0]&#x3D;1, dp[1]&#x3D;1</p><p>遍历顺序：从前向后</p><p>打印dp数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (N &lt;= <span class="number">1</span>) <span class="keyword">return</span> N;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(N + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[N];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（2）爬楼梯-力扣70"><a href="#（2）爬楼梯-力扣70" class="headerlink" title="（2）爬楼梯  力扣70"></a>（2）爬楼梯  力扣70</h4><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>思路：</p><p>爬1阶楼梯：1种</p><p>爬2阶楼梯：2种</p><p>爬3阶楼梯：可以在2阶楼梯上爬1阶，也可以在1阶楼梯上爬2阶 所以f(3)&#x3D;f(2)+f(1)&#x3D;3种</p><p>爬4阶楼梯：可以在3阶楼梯上爬1阶，也可以在2阶楼梯上爬2阶 所以f(4)&#x3D;f(3)+f(2)&#x3D;5种</p><p>以此类推……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)<span class="keyword">return</span> n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">stair</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        stair[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        stair[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            stair[i]=stair[i<span class="number">-1</span>]+stair[i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stair[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（3）使用最小花费爬楼梯-力扣746"><a href="#（3）使用最小花费爬楼梯-力扣746" class="headerlink" title="（3）使用最小花费爬楼梯  力扣746"></a>（3）使用最小花费爬楼梯  力扣746</h4><p>给你一个整数数组 <code>cost</code> ，其中 <code>cost[i]</code> 是从楼梯第 <code>i</code> 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p><p>你可以选择从下标为 <code>0</code> 或下标为 <code>1</code> 的台阶开始爬楼梯。</p><p>请你计算并返回达到楼梯顶部的最低花费。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(cost.size() + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="comment">//dp数组的含义是到达下标为i的楼梯需要的最少体力</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 默认第一步都是不花费体力的</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= cost.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>] + cost[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + cost[i - <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[cost.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（4）不同路径-力扣62"><a href="#（4）不同路径-力扣62" class="headerlink" title="（4）不同路径  力扣62"></a>（4）不同路径  力扣62</h4><p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><p>问总共有多少条不同的路径？</p><p>思路：</p><p>dp[i][j]表示到第i行第j列共有多少条路径</p><p>dp[i][j]&#x3D;dp[i-1][j]+dp[i][j-1]，思想和爬楼梯一致（可以从左边或者上边的格子走一步到本格）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（5）不同路径2-力扣63"><a href="#（5）不同路径2-力扣63" class="headerlink" title="（5）不同路径2  力扣63"></a>（5）不同路径2  力扣63</h4><p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。</p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><p>网格中的障碍物和空位置分别用 <code>1</code> 和 <code>0</code> 来表示。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = obstacleGrid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = obstacleGrid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (obstacleGrid[m - <span class="number">1</span>][n - <span class="number">1</span>] == <span class="number">1</span> || obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) <span class="comment">//如果在起点或终点出现了障碍，直接返回0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m &amp;&amp; obstacleGrid[i][<span class="number">0</span>] == <span class="number">0</span>; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n &amp;&amp; obstacleGrid[<span class="number">0</span>][j] == <span class="number">0</span>; j++) dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obstacleGrid[i][j] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（6）整数拆分-力扣343"><a href="#（6）整数拆分-力扣343" class="headerlink" title="（6）整数拆分  力扣343"></a>（6）整数拆分  力扣343</h4><p>给定一个正整数 <code>n</code> ，将其拆分为 <code>k</code> 个 <strong>正整数</strong> 的和（ <code>k &gt;= 2</code> ），并使这些整数的乘积最大化。</p><p>返回 <em>你可以获得的最大乘积</em> 。</p><p>思路：<a href="https://programmercarl.com/0343.%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">代码随想录 (programmercarl.com)</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i/<span class="number">2</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], <span class="built_in">max</span>((i-j)*j, dp[i-j]*j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（7）01背包问题——二维数组"><a href="#（7）01背包问题——二维数组" class="headerlink" title="（7）01背包问题——二维数组"></a>（7）01背包问题——二维数组</h4><p>dp[i][j]表示的是 任取0-i下标的物品放到容量为j的背包的最大价值</p><p>不放物品i：dp[i][j]&#x3D;dp[i-1][j]</p><p>放物品i：dp[i][j]&#x3D;dp[i-1][j-weight[i]]+value[i]</p><p>递推公式：dp[i][j]&#x3D;max(dp[i-1][j], dp[i-1][j-weight[i]]+value[i])</p><p>初始化：第0列，背包容量为0，初始化为全0；第0行，比较物品0的容量和背包容量，初始化为0或value[0]</p><h4 id="（8）01背包问题——一维数组（滚动数组）"><a href="#（8）01背包问题——一维数组（滚动数组）" class="headerlink" title="（8）01背包问题——一维数组（滚动数组）"></a>（8）01背包问题——一维数组（滚动数组）</h4><p>一维数组的01背包问题，因为下一行的数据是从上一行推得的；所以一维数组其实是把二维数组上一行的数据 拷贝到下一行使用，以此类推到最后一行</p><p>dp[j]表示的是 容量为j的背包可以装的最大价值</p><p>递推公式：dp[j]&#x3D;max(dp[j], dp[j-weight[i]]+value[i])</p><p>一维dp数组需要倒序遍历，因为二维的时候，上下两层数据是独立的，且下一层的数据由上一层左上方和上方和数据推得，一维数组将上一层数据拷贝到下一层，那么同一层内的右侧数据需要从左侧原数据推得，如果从左到右修改数据，那么右侧数据会发生错误。所以<strong>一维dp数组需要倒序遍历</strong>，且只能先遍历物品再遍历容量</p><h4 id="（9）分割等和子集（力扣416）-最后一块石头的重量2（力扣1049）"><a href="#（9）分割等和子集（力扣416）-最后一块石头的重量2（力扣1049）" class="headerlink" title="（9）分割等和子集（力扣416）&amp;最后一块石头的重量2（力扣1049）"></a>（9）分割等和子集（力扣416）&amp;最后一块石头的重量2（力扣1049）</h4><p>两题类似</p><p>前一题是要分成两个求和相等的数组；后一题是要让两组石头尽量相等；dp过程是一样的</p><h4 id="（10）目标和-力扣494"><a href="#（10）目标和-力扣494" class="headerlink" title="（10）目标和  力扣494"></a>（10）目标和  力扣494</h4><p>dp[i]数组的含义是 装满容量为j的背包，有dp[j]种方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) sum += nums[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(S) &gt; sum) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 此时没有方案</span></span><br><span class="line">        <span class="keyword">if</span> ((S + sum) % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 此时没有方案</span></span><br><span class="line">        <span class="type">int</span> bagSize = (S + sum) / <span class="number">2</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(bagSize + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = bagSize; j &gt;= nums[i]; j--) &#123;</span><br><span class="line">                dp[j] += dp[j - nums[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[bagSize];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（11）一和零-力扣474"><a href="#（11）一和零-力扣474" class="headerlink" title="（11）一和零  力扣474"></a>（11）一和零  力扣474</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxForm</span><span class="params">(vector&lt;string&gt;&amp; strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (n + <span class="number">1</span>, <span class="number">0</span>)); <span class="comment">// 默认初始化0</span></span><br><span class="line">        <span class="keyword">for</span> (string str : strs) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">            <span class="type">int</span> oneNum = <span class="number">0</span>, zeroNum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : str) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">&#x27;0&#x27;</span>) zeroNum++;</span><br><span class="line">                <span class="keyword">else</span> oneNum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = m; i &gt;= zeroNum; i--) &#123; <span class="comment">// 遍历背包容量且从后向前遍历！</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = n; j &gt;= oneNum; j--) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i - zeroNum][j - oneNum] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（12）完全背包理论"><a href="#（12）完全背包理论" class="headerlink" title="（12）完全背包理论"></a>（12）完全背包理论</h4><p>有N件物品和一个最多能背重量为W的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。<strong>每件物品都有无限个（也就是可以放入背包多次）</strong>，求解将哪些物品装入背包里物品价值总和最大。</p><p><strong>完全背包和01背包问题唯一不同的地方就是，每种物品有无限件</strong>。</p><p>01背包和完全背包代码的唯一不同就是体现在<strong>遍历顺序</strong>上</p><p>核心代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先遍历物品，再遍历背包，一维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; weight.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = weight[i]; j &lt;= bagWeight ; j++) &#123; <span class="comment">// 遍历背包容量</span></span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（13）零钱兑换2-力扣518-组合数"><a href="#（13）零钱兑换2-力扣518-组合数" class="headerlink" title="（13）零钱兑换2  力扣518  组合数"></a>（13）零钱兑换2  力扣518  组合数</h4><p>先遍历物品再遍历背包，得到组合数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">int</span> amount, vector&lt;<span class="type">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; coins.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = coins[i]; j &lt;= amount; j++) &#123; <span class="comment">// 遍历背包</span></span><br><span class="line">                dp[j] += dp[j - coins[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（14）组合总和4-力扣377-排列数"><a href="#（14）组合总和4-力扣377-排列数" class="headerlink" title="（14）组合总和4  力扣377  排列数"></a>（14）组合总和4  力扣377  排列数</h4><p>先遍历背包再遍历物品，得到排列数</p><p>C++测试用例有两个数相加超过int的数据，所以需要在if里加上dp[i] &lt; INT_MAX - dp[i - num]</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">combinationSum4</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(target + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= target; i++) &#123; <span class="comment">// 遍历背包</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">                <span class="keyword">if</span> (i - nums[j] &gt;= <span class="number">0</span> &amp;&amp; dp[i] &lt; INT_MAX - dp[i - nums[j]]) &#123;</span><br><span class="line">                    dp[i] += dp[i - nums[j]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（15）零钱兑换-力扣322"><a href="#（15）零钱兑换-力扣322" class="headerlink" title="（15）零钱兑换  力扣322"></a>（15）零钱兑换  力扣322</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount + <span class="number">1</span>, INT_MAX)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; coins.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = coins[i]; j &lt;= amount; j++) &#123; <span class="comment">// 遍历背包</span></span><br><span class="line">                <span class="keyword">if</span> (dp[j - coins[i]] != INT_MAX) &#123; </span><br><span class="line">                    <span class="comment">//如果dp[j - coins[i]]是初始值则跳过,因为INT_MAX+1会溢出</span></span><br><span class="line">                    dp[j] = <span class="built_in">min</span>(dp[j - coins[i]] + <span class="number">1</span>, dp[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[amount] == INT_MAX) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（16）完全平方数-力扣279"><a href="#（16）完全平方数-力扣279" class="headerlink" title="（16）完全平方数  力扣279"></a>（16）完全平方数  力扣279</h4><p>这一题的每个物品就是小于n的完全平方数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">dp</span>(n+<span class="number">1</span>,INT_MAX);</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> num=(<span class="type">int</span>)<span class="built_in">sqrt</span>(n);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">nums</span>(num,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;i++)&#123;</span><br><span class="line">            nums[i<span class="number">-1</span>]=i*i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=nums[i];j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[j-nums[i]]!=INT_MAX)&#123;</span><br><span class="line">                    dp[j]=<span class="built_in">min</span>(dp[j],dp[j-nums[i]]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, INT_MAX)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i * i &lt;= n; i++) &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i * i; j &lt;= n; j++) &#123; <span class="comment">// 遍历背包</span></span><br><span class="line">                dp[j] = <span class="built_in">min</span>(dp[j - i * i] + <span class="number">1</span>, dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（17）打家劫舍-力扣198"><a href="#（17）打家劫舍-力扣198" class="headerlink" title="（17）打家劫舍  力扣198"></a>（17）打家劫舍  力扣198</h4><p>dp[i]的含义是：打劫前i下标（包括i）能获得的最大收益</p><p>dp[0]，只包含下表为0的一间房屋，所以等于nums[0]</p><p>dp[1]，包含下标为0和1的两间房屋，选择一件收益更高的打劫，所以dp[1]&#x3D;max(nums[0],nums[1])</p><p>之后的dp[i]要考虑前一间是否已经被打劫过，得出递推公式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">2</span>] + nums[i], dp[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（18）打家劫舍2-力扣213"><a href="#（18）打家劫舍2-力扣213" class="headerlink" title="（18）打家劫舍2  力扣213"></a>（18）打家劫舍2  力扣213</h4><p>房屋连成了一个环，首尾房屋不能同时偷</p><p>有三种情况（其实是两种，第一种包含在下面两种中）：</p><p>第一种：首尾房屋都不考虑偷，只考虑中间的房屋，中间的房屋是线性的</p><p>第二种：不考虑最后一间房屋，只考虑前面的房屋，这些房屋也是线性的</p><p>第三种：不考虑第一间房屋，只考虑后面的房屋，这些房屋也是线性的</p><p>第一种情况包含在后两种当中，后两种情况组成了所有的可能情况，且只要分析线性数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()==<span class="number">1</span>)<span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()==<span class="number">2</span>)<span class="keyword">return</span> <span class="built_in">max</span>(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">dp1</span>(nums.<span class="built_in">size</span>(),<span class="number">0</span>);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">dp2</span>(nums.<span class="built_in">size</span>(),<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//第二种情况</span></span><br><span class="line">        dp1[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">        dp1[<span class="number">1</span>]=<span class="built_in">max</span>(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=nums.<span class="built_in">size</span>()<span class="number">-2</span>;i++)&#123;</span><br><span class="line">            dp1[i]=<span class="built_in">max</span>(dp1[i<span class="number">-1</span>],dp1[i<span class="number">-2</span>]+nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第三种情况</span></span><br><span class="line">        dp2[<span class="number">1</span>]=nums[<span class="number">1</span>];</span><br><span class="line">        dp2[<span class="number">2</span>]=<span class="built_in">max</span>(nums[<span class="number">1</span>],nums[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=nums.<span class="built_in">size</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            dp2[i]=<span class="built_in">max</span>(dp2[i<span class="number">-1</span>],dp2[i<span class="number">-2</span>]+nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp1[nums.<span class="built_in">size</span>()<span class="number">-2</span>],dp2[nums.<span class="built_in">size</span>()<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（19）买卖股票的最佳时机1-力扣121"><a href="#（19）买卖股票的最佳时机1-力扣121" class="headerlink" title="（19）买卖股票的最佳时机1  力扣121"></a>（19）买卖股票的最佳时机1  力扣121</h4><p>只能买卖一次</p><p>dp[i][0]表示第i天持有股票状态下的最大金额</p><p>dp[i][1]表示第i天不持有股票状态下的最大金额</p><p><strong>当天持有股票</strong>：可能是前一天就有了，也可能是当天才买入的</p><p>所以 dp[i][0]&#x3D;max(dp[i-1][0], -price[i])</p><p><strong>当天不持有股票</strong>：可能是前一天就不持有股票，也可能是当天卖出了</p><p>所以 dp[i][1]&#x3D;max(dp[i-1][1], dp[i-1][0]+price[i])</p><p>买股不需要加上之前的dp，因为之前没有买过，当前的dp就是买股用的钱（为负数）；</p><p>卖股需要加上之前的dp，因为里面记录着买股的花费</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(len, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] -= prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], -prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], prices[i] + dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（20）买卖股票的最佳时机2-力扣122"><a href="#（20）买卖股票的最佳时机2-力扣122" class="headerlink" title="（20）买卖股票的最佳时机2  力扣122"></a>（20）买卖股票的最佳时机2  力扣122</h4><p>和上一题的区别是：可以多次买入卖出</p><p>买的时候手上可能有之前买卖得到的利润，而不是第一次买股票时的0,，所以dp[i][0]&#x3D;max(dp[i-1][0], dp[i-1][1]+prices[i])</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len=prices.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">dp</span>(len,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>,<span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=-prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>]-prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">0</span>]+prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（21）买卖股票的最佳时机3-力扣123-细分状态"><a href="#（21）买卖股票的最佳时机3-力扣123-细分状态" class="headerlink" title="（21）买卖股票的最佳时机3  力扣123  细分状态"></a>（21）买卖股票的最佳时机3  力扣123  细分状态</h4><p>确定dp数组以及下标的含义：</p><p>一天一共就有五个状态，</p><ol><li>没有操作 </li><li>第一次持有股票</li><li>第一次不持有股票</li><li>第二次持有股票</li><li>第二次不持有股票</li></ol><p>dp[i][j]中 i表示第i天，j为 [0 - 4] 五个状态，dp[i][j]表示第i天状态j所剩最大现金。</p><p>需要注意：dp[i][1]，表示的是第i天，买入股票的状态，并不是说一定要第i天买入股票</p><p>dp[i][1]可能是前一天就已经第一次持有股票，也可能是当天买入。如果是前一天就有，那么前一天也肯定是1状态，所以dp[i-1][1]；如果是当天才买入，那么前一天还不是第一次持有的状态，所以是dp[i-1][0]，未操作</p><p>以此类推得到各个状态的递推公式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len=prices.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">dp</span>(len,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">5</span>,<span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>]=-prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">3</span>]=-prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">4</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">            dp[i][<span class="number">1</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">0</span>]-prices[i]);</span><br><span class="line">            dp[i][<span class="number">2</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">2</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>]+prices[i]);</span><br><span class="line">            dp[i][<span class="number">3</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">3</span>],dp[i<span class="number">-1</span>][<span class="number">2</span>]-prices[i]);</span><br><span class="line">            dp[i][<span class="number">4</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">4</span>],dp[i<span class="number">-1</span>][<span class="number">3</span>]+prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len<span class="number">-1</span>][<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（22）买卖股票最佳时机4-力扣188-细分状态"><a href="#（22）买卖股票最佳时机4-力扣188-细分状态" class="headerlink" title="（22）买卖股票最佳时机4  力扣188  细分状态"></a>（22）买卖股票最佳时机4  力扣188  细分状态</h4><p>可以进行k次买卖，思路和上一题一致，只是有2k+1种状态</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(<span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len=prices.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">dp</span>(len,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>*k+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*k;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>)dp[<span class="number">0</span>][i]=-prices[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> dp[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;<span class="number">2</span>*k;j+=<span class="number">2</span>)&#123;</span><br><span class="line">                dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]-prices[i]);</span><br><span class="line">                dp[i][j+<span class="number">1</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j+<span class="number">1</span>],dp[i<span class="number">-1</span>][j]+prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len<span class="number">-1</span>][<span class="number">2</span>*k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（23）最佳买卖股票时机含冷冻期-力扣309-细分状态"><a href="#（23）最佳买卖股票时机含冷冻期-力扣309-细分状态" class="headerlink" title="（23）最佳买卖股票时机含冷冻期  力扣309  细分状态"></a>（23）最佳买卖股票时机含冷冻期  力扣309  细分状态</h4><p>确定dp数组以及下标的含义：dp[i][j]，第i天状态为j，所剩的最多现金为dp[i][j]</p><p>具体可以区分出如下四个状态：</p><ul><li>状态一：持有股票状态（今天买入股票，或者是之前就买入了股票然后没有操作，一直持有）</li><li>不持有股票状态，这里就有两种卖出股票状态<ul><li>状态二：保持卖出股票的状态（两天前就卖出了股票，度过一天冷冻期。或者是前一天就是卖出股票状态，一直没操作）</li><li>状态三：今天卖出股票</li></ul></li><li>状态四：今天为冷冻期状态，但冷冻期状态不可持续，只有一天</li></ul><p>确定递推公式<br>达到买入股票状态（状态一）即：dp[i][0]，有两个具体操作：</p><p>操作一：前一天就是持有股票状态（状态一），dp[i][0] &#x3D; dp[i - 1][0]<br>操作二：今天买入了，有两种情况<br>前一天是冷冻期（状态四），dp[i - 1][3] - prices[i]<br>前一天是保持卖出股票的状态（状态二），dp[i - 1][1] - prices[i]<br>那么dp[i][0] &#x3D; max(dp[i - 1][0], dp[i - 1][3] - prices[i], dp[i - 1][1] - prices[i]);</p><p>达到保持卖出股票状态（状态二）即：dp[i][1]，有两个具体操作：</p><p>操作一：前一天就是状态二<br>操作二：前一天是冷冻期（状态四）<br>dp[i][1] &#x3D; max(dp[i - 1][1], dp[i - 1][3]);</p><p>达到今天就卖出股票状态（状态三），即：dp[i][2] ，只有一个操作：</p><p>昨天一定是持有股票状态（状态一），今天卖出，即：dp[i][2] &#x3D; dp[i - 1][0] + prices[i];</p><p>达到冷冻期状态（状态四），即：dp[i][3]，只有一个操作：</p><p>昨天卖出了股票（状态三）</p><p>dp[i][3] &#x3D; dp[i - 1][2];</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">4</span>, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] -= prices[<span class="number">0</span>]; <span class="comment">// 持股票</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">0</span>], <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">3</span>] - prices[i], dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i])); <span class="comment">//持股状态</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">3</span>]); <span class="comment">//不持股状态</span></span><br><span class="line">            dp[i][<span class="number">2</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i]; <span class="comment">//卖出股</span></span><br><span class="line">            dp[i][<span class="number">3</span>] = dp[i - <span class="number">1</span>][<span class="number">2</span>]; <span class="comment">//冻结期</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp[n - <span class="number">1</span>][<span class="number">3</span>], <span class="built_in">max</span>(dp[n - <span class="number">1</span>][<span class="number">1</span>], dp[n - <span class="number">1</span>][<span class="number">2</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（24）买卖股票的最佳时机含手续费-力扣714"><a href="#（24）买卖股票的最佳时机含手续费-力扣714" class="headerlink" title="（24）买卖股票的最佳时机含手续费  力扣714"></a>（24）买卖股票的最佳时机含手续费  力扣714</h4><p>和买卖股票2一致，只是买股票的时候多了手续费而已</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices, <span class="type">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len=prices.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">dp</span>(len,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>,<span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=-prices[<span class="number">0</span>];<span class="comment">//持有</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//没有</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>]-prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">0</span>]+prices[i]-fee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp[len<span class="number">-1</span>][<span class="number">0</span>],dp[len<span class="number">-1</span>][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（25）最长递增子序列-力扣300"><a href="#（25）最长递增子序列-力扣300" class="headerlink" title="（25）最长递增子序列  力扣300"></a>（25）最长递增子序列  力扣300</h4><p>dp[i]含义是：以nums[i]结尾的最长递增子序列长度</p><p>位置i的最长升序子序列等于j从0到i-1各个位置的最长升序子序列 + 1 的最大值</p><p>所以，if (nums[i] &gt; nums[j]) dp[i] &#x3D; max(dp[i], dp[j] + 1)</p><p>以nums[i]结尾的最长递增子序列最短也为1，所以dp数组初始化为1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len=nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">dp</span>(len,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]&lt;nums[i])</span><br><span class="line">                    dp[i]=<span class="built_in">max</span>(dp[i],dp[j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为最长递增子序列不一定是以nums[len-1]这最后一个元素结尾的，所以选择出dp数组中的最大值返回</span></span><br><span class="line">        <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i]&gt;result)</span><br><span class="line">                result=dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（26）最长连续递增序列-力扣674"><a href="#（26）最长连续递增序列-力扣674" class="headerlink" title="（26）最长连续递增序列  力扣674"></a>（26）最长连续递增序列  力扣674</h4><p>和上一题的区别在于，要求子序列连续，思路反而更简单</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findLengthOfLCIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size() ,<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[i - <span class="number">1</span>]) &#123; <span class="comment">// 连续记录</span></span><br><span class="line">                dp[i] = dp[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dp[i] &gt; result) result = dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="10-数论"><a href="#10-数论" class="headerlink" title="10.数论"></a>10.数论</h3><h4 id="（1）快速幂"><a href="#（1）快速幂" class="headerlink" title="（1）快速幂"></a>（1）快速幂</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long </span></span><br><span class="line"><span class="function">LL <span class="title">fastMod</span><span class="params">(LL base,LL power,LL mod)</span></span>&#123;</span><br><span class="line">LL result=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(power)&#123;</span><br><span class="line"><span class="keyword">if</span>(power&amp;<span class="number">1</span>)&#123;</span><br><span class="line">result=result*base%mod;</span><br><span class="line">&#125;</span><br><span class="line">base=base*base%mod;</span><br><span class="line">power=power&gt;&gt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">LL a,b,c;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">cout&lt;&lt;<span class="built_in">fastMod</span>(a,b,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="（2）素数筛"><a href="#（2）素数筛" class="headerlink" title="（2）素数筛"></a>（2）素数筛</h4><h5 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h5><p>质数的倍数一定是合数，可以定义一个数组，让所有质数的倍数全都标记一遍，直到达到边界值n停止，这样标记数组中未被标记的元素则是素数。对于选取的质数，只需要在根号n以内即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>;</span><br><span class="line"><span class="type">bool</span> pm[MAXN];<span class="comment">//pm[i]=0，i为素数；pm[i]=1，i为合数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">erat_prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">pm[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">pm[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!pm[i])&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>*i;j&lt;=n;j+=i)&#123;</span><br><span class="line">pm[j]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h5><p>在埃氏筛的基础上，让每个合数只被它的最小质因子筛选一次，以达到不重复的目的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">countPrimes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span>* isprime = <span class="keyword">new</span> <span class="type">bool</span>[n]();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prime</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isprime[i])&#123;</span><br><span class="line">            prime[<span class="number">0</span>]++;</span><br><span class="line">            prime.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= prime[<span class="number">0</span>] &amp;&amp; prime[j] * i &lt;= n; j++)&#123;</span><br><span class="line">            isprime[prime[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prime[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯真题</title>
      <link href="/posts/7420a9e6.html"/>
      <url>/posts/7420a9e6.html</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯真题"><a href="#蓝桥杯真题" class="headerlink" title="蓝桥杯真题"></a>蓝桥杯真题</h1><h2 id="2023-A组"><a href="#2023-A组" class="headerlink" title="2023 A组"></a>2023 A组</h2><p><a href="https://www.dotcpp.com/oj/train/1088/">2023年第十四届蓝桥杯大赛软件类省赛C&#x2F;C++大学A组真题 - 题库 - C语言网 (dotcpp.com)</a></p><h3 id="平方差"><a href="#平方差" class="headerlink" title="平方差"></a>平方差</h3><p>给定 L, R，问 L ≤ x ≤ R 中有多少个数 x 满足存在整数 y,z 使得 x &#x3D; y^2 − z^2</p><p>输入一行包含两个整数 L, R，用一个空格分隔</p><p>输出一行包含一个整数满足题目给定条件的 x 的数量</p><p>思路：经过数学推导，可以看出符合条件的 x 满足：是奇数，或者是4的倍数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">0</span>||i%<span class="number">2</span>!=<span class="number">0</span>)cnt++;</span><br><span class="line">&#125; </span><br><span class="line">cout&lt;&lt;cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更小的数"><a href="#更小的数" class="headerlink" title="更小的数"></a>更小的数</h3><p>小蓝有一个长度均为 n 且仅由数字字符 0 ∼ 9 组成的字符串，下标从 0 到 n − 1，你可以将其视作是一个具有 n 位的十进制数字 num，小蓝可以从 num 中选出一段连续的子串并将子串进行反转，最多反转一次。小蓝想要将选出的子串进行反转后再放入原位置处得到的新的数字 num_new 满足条件 num_new &lt; num，请你帮他计算下一共有多少种不同的子串选择方案，只要两个子串在 num 中的位置不完全相同我们就视作是不同的方案。注意，我们允许前导零的存在，即数字的最高位可以是 0 ，这是合法的</p><p>输入一行包含一个长度为 n 的字符串表示 num（仅包含数字字符 0 ∼ 9）</p><p>输出一行包含一个整数表示答案</p><p>思路：设定子串的左端 l 和右端 r ，遍历字符串中所有可能的子串，如果最左端大于最右端，反转后一定满足条件；如果最左端等于最右端，将两端内移，继续比较；如果最左端小于最右端，直接返回false</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string str;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pass</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="keyword">if</span>(str[l]&gt;str[r])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[l]==str[r])&#123;</span><br><span class="line">l++;</span><br><span class="line">r--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>,len=str.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;len<span class="number">-1</span>;l++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> r=len<span class="number">-1</span>;r&gt;l;r--)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pass</span>(l,r))</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-2017-省-AB-分巧克力"><a href="#蓝桥杯-2017-省-AB-分巧克力" class="headerlink" title="[蓝桥杯 2017 省 AB] 分巧克力"></a>[蓝桥杯 2017 省 AB] 分巧克力</h3><p>二分法<a href="https://www.acwing.com/file_system/file/content/whole/index/content/3073/">二分查找算法模板 - AcWing</a></p><p>根据题目的具体划分，来选择第一或者第二种模版</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> h[N],w[N];</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findans</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cnt=cnt+(h[i]/mid)*(w[i]/mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;=k)&#123;</span><br><span class="line">l=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;h[i]&gt;&gt;w[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="built_in">findans</span>(<span class="number">1</span>,<span class="number">1e5</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-2022-省-A-求和"><a href="#蓝桥杯-2022-省-A-求和" class="headerlink" title="[蓝桥杯 2022 省 A] 求和"></a>[蓝桥杯 2022 省 A] 求和</h3><p>前缀和</p><p>S[i] &#x3D; a[1] + a[2] + … a[i]  表示前i个元素的和<br>a[l] + … + a[r] &#x3D; S[r] - S[l - 1]  表示下标从l到r的元素的和</p><p>节约时间，避免超时</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">num</span>(n,<span class="number">0</span>);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">pre</span>(n,<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;num[<span class="number">0</span>];pre[<span class="number">0</span>]=num[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;num[i];</span><br><span class="line">pre[i]=pre[i<span class="number">-1</span>]+num[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">ans=ans+num[i]*(pre[n<span class="number">-1</span>]-pre[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-2018-省-A-航班时间"><a href="#蓝桥杯-2018-省-A-航班时间" class="headerlink" title="[蓝桥杯 2018 省 A] 航班时间"></a>[蓝桥杯 2018 省 A] 航班时间</h3><p>设飞行时间为f，两地时差为k，去的时候起飞时间t1，落地时间t2（都是当地时间），假设起点时间更早</p><p>那么 t2&#x3D;t1+f-k，f&#x3D;t2-t1+k</p><p>返程，起飞时间t3，落地时间t4，这时终点是时间更早的地方，所以</p><p>t4&#x3D;t3+f+k，f&#x3D;t4-t3-k</p><p>结合两式，可以推出 f&#x3D;(t2-t1+t4-t3)&#x2F;2</p><p>之后只要注意输入输出格式即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> h1,m1,s1,h2,m2,s2,day=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d:%d:%d %d:%d:%d&quot;</span>,&amp;h1,&amp;m1,&amp;s1,&amp;h2,&amp;m2,&amp;s2);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">getchar</span>()==<span class="string">&#x27; &#x27;</span>)<span class="built_in">scanf</span>(<span class="string">&quot;(+%d)&quot;</span>,&amp;day);</span><br><span class="line"><span class="keyword">return</span> (day*<span class="number">86400</span>+h2*<span class="number">3600</span>+m2*<span class="number">60</span>+s2)-(h1*<span class="number">3600</span>+m1*<span class="number">60</span>+s1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="type">int</span> ans=(<span class="built_in">get</span>()+<span class="built_in">get</span>())/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d\n&quot;</span>,ans/<span class="number">3600</span>,ans%<span class="number">3600</span>/<span class="number">60</span>,ans%<span class="number">60</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-2019-省-AB-完全二叉树的权值"><a href="#蓝桥杯-2019-省-AB-完全二叉树的权值" class="headerlink" title="[蓝桥杯 2019 省 AB] 完全二叉树的权值"></a>[蓝桥杯 2019 省 AB] 完全二叉树的权值</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n+<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> depth=<span class="number">0</span>,p=n;</span><br><span class="line">    <span class="comment">//求完全二叉树的深度</span></span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line">p/=<span class="number">2</span>;</span><br><span class="line">depth++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxx=<span class="number">0</span>,flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;depth;i++)&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> t1=<span class="built_in">pow</span>(<span class="number">2</span>,i<span class="number">-1</span>),t2=<span class="built_in">pow</span>(<span class="number">2</span>,i)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=t1;j&lt;=t2;j++)&#123;</span><br><span class="line">sum+=a[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;maxx)&#123;</span><br><span class="line">maxx=sum;</span><br><span class="line">flag=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="built_in">pow</span>(<span class="number">2</span>,depth<span class="number">-1</span>);i&lt;=n;i++)&#123;</span><br><span class="line">sum+=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;maxx)flag=depth;</span><br><span class="line">cout&lt;&lt;flag;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-2017-省-B-k-倍区间"><a href="#蓝桥杯-2017-省-B-k-倍区间" class="headerlink" title="[蓝桥杯 2017 省 B] k 倍区间"></a>[蓝桥杯 2017 省 B] k 倍区间</h3><p>利用前缀和，求出从第一个数开始，每个区间的和模k的结果，存储在pre数组中</p><p>那么pre数组元素相减的结果，就是某个区间中数字之和模k的结果，如果这个结果是0，满足k倍区间的条件</p><p>由于pre数组都是模k的结果，从0-k-1，且有相同的数值，定义一个map，令0-k-1这些数为键，统计这些数的个数，记录在对应的map中</p><p>根据数学规律，键为0的，由于自身也是一个k倍区间，且0之间互相减也是0，所以ans+&#x3D;cnt+cnt*(cnt-1)&#x2F;2&#x3D;cnt*(cnt+1)&#x2F;2</p><p>键不为0的，相同键相减为0，所以ans+&#x3D;cnt*(cnt-1)&#x2F;2</p><p>map中，若i为一个中的元素，i.first表示i的键，i.second表示i的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],pre[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">pre[i]=(pre[i<span class="number">-1</span>]+a[i])%k;</span><br><span class="line">mp[pre[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:mp)&#123;</span><br><span class="line"><span class="keyword">if</span>(i.first==<span class="number">0</span>)</span><br><span class="line">ans=ans+i.second*(i.second+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans=ans+i.second*(i.second<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-2017-国-C-合根植物-并查集"><a href="#蓝桥杯-2017-国-C-合根植物-并查集" class="headerlink" title="[蓝桥杯 2017 国 C] 合根植物  并查集"></a>[蓝桥杯 2017 国 C] 合根植物  并查集</h3><p>利用并查集，将各个节点的父节点联系起来</p><p>由于根节点的父节点是自身，所以遍历数组，如果有fa[i]&#x3D;&#x3D;i说明是根节点，ans++</p><p>注意：记住find函数优化，防止超时</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)fa[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==fa[x])<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line"><span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionn</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x_fa=<span class="built_in">find</span>(x);</span><br><span class="line"><span class="type">int</span> y_fa=<span class="built_in">find</span>(y);</span><br><span class="line">fa[x_fa]=y_fa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> m=<span class="number">0</span>,n=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="type">int</span> all=m*n;</span><br><span class="line"><span class="built_in">init</span>(all);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="built_in">unionn</span>(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=all;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[i]==i)ans++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-2013-国-C-危险系数"><a href="#蓝桥杯-2013-国-C-危险系数" class="headerlink" title="[蓝桥杯 2013 国 C] 危险系数"></a>[蓝桥杯 2013 国 C] 危险系数</h3><p>dfs暴力，遍历每条路径，得到可行的路径数sum</p><p>如果在所有情况下，一个节点（不包括起点和终点）被访问过的总次数cnt[i]&#x3D;&#x3D;sum，说明无论走哪条路都要经过i这个点，那么这个点就是关键点，危险系数ans++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> a[<span class="number">1010</span>][<span class="number">1010</span>],vi[<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">1010</span>],ans,sum,u,v,m,n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(now==v)&#123;</span><br><span class="line">sum++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vi[i])cnt[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[now][i]&amp;&amp;!vi[i])&#123;</span><br><span class="line">vi[i]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">vi[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">a[u][v]=a[v][u]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(u);</span><br><span class="line"><span class="keyword">if</span>(sum&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i!=u&amp;&amp;i!=v&amp;&amp;cnt[i]==sum)ans++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-2014-国-C-拼接平方数"><a href="#蓝桥杯-2014-国-C-拼接平方数" class="headerlink" title="[蓝桥杯 2014 国 C] 拼接平方数"></a>[蓝桥杯 2014 国 C] 拼接平方数</h3><p>根据样例数据的范围，判断范围内所有数是否是完全平方数，将结果存储在数组中，节省调用函数的时间</p><p>对数字进行分割，根据数组判断是否满足条件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> f[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sqrt</span>(x)==<span class="built_in">int</span>(<span class="built_in">sqrt</span>(x)))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(i))f[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=a;i&lt;=b;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[i])&#123;</span><br><span class="line">string s=<span class="built_in">to_string</span>(i);</span><br><span class="line"><span class="type">int</span> len=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(<span class="number">0</span>,j));</span><br><span class="line"><span class="type">int</span> y=<span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(j));</span><br><span class="line"><span class="keyword">if</span>(f[x]&amp;&amp;f[y])cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-2019-省-B-等差数列"><a href="#蓝桥杯-2019-省-B-等差数列" class="headerlink" title="[蓝桥杯 2019 省 B] 等差数列"></a>[蓝桥杯 2019 省 B] 等差数列</h3><p>__gcd()求相邻两项差值得最大公因数，遍历下来得到公差sub</p><p>如果公差为0，不能除，直接输出n项</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">sort</span>(a,a+n);</span><br><span class="line"><span class="type">int</span> sub=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">sub=__gcd(sub,a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">if</span>(sub==<span class="number">0</span>)cout&lt;&lt;n;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;(a[n<span class="number">-1</span>]-a[<span class="number">0</span>])/sub+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-2019-国-C-数正方形"><a href="#蓝桥杯-2019-国-C-数正方形" class="headerlink" title="[蓝桥杯 2019 国 C] 数正方形"></a>[蓝桥杯 2019 国 C] 数正方形</h3><p>一个边长为3（每条边上有4个点）的正方形，可以分成三个板块来看，每个板块边长分别为1&#x2F;2&#x2F;3，边长为1的板块就是9个小正方形；边长为2的板块可以分出4个；边长为3的板块只有1个</p><p>同时，每个板块内可以分小正方形，例如边长为2的板块，每个板块可以分2个正方形；边长为3的板块可以分3个正方形……</p><p>那么，边长为3的大正方形总共可以分为 9*1+4*2+1*3&#x3D;20个小正方形</p><p>边长为4的大正方形总共可以分为 16*1+9*2+4*3+1*4&#x3D;50个小正方形</p><p>推出规律，如果大正方形一条边上n个点，边长为n-1，边长为i的板块有(n-i)*(n-i)个，每个板块又可以分i个小正方形，所以对边长i进行循环遍历 ans&#x3D;(ans+i*(n-i)*(n-i))%mod;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">ans=(ans+i*(n-i)*(n-i))%N;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-2020-国-C-重复字符串"><a href="#蓝桥杯-2020-国-C-重复字符串" class="headerlink" title="[蓝桥杯 2020 国 C] 重复字符串"></a>[蓝桥杯 2020 国 C] 重复字符串</h3><p>将一个字符串分成k组，分别比较对应位置的字符，取出现次数最多的字符作为修改后的结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="type">int</span> len=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span>(len%k!=<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> t=len/k;<span class="comment">//子串的长度t</span></span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line"><span class="type">int</span> mx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;len;j+=t)&#123;</span><br><span class="line">mp[s[j]]++;</span><br><span class="line">mx=<span class="built_in">max</span>(mx,mp[s[j]]);</span><br><span class="line">&#125;</span><br><span class="line">ans+=(k-mx);</span><br><span class="line">&#125; </span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-2021-省-AB2-完全平方数"><a href="#蓝桥杯-2021-省-AB2-完全平方数" class="headerlink" title="[蓝桥杯 2021 省 AB2] 完全平方数"></a>[蓝桥杯 2021 省 AB2] 完全平方数</h3><p>将给定的整数n进行质因子分解，用map存每个质因子的次数</p><p>完全平方数分解后的所有质因子，次数都为偶数；将n的分解结果进行遍历，对奇数次进行处理，要乘上的所有数之积就是所要的ans</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n/i;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">n/=i;</span><br><span class="line">mp[i]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">1</span>)mp[n]++;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:mp)&#123;</span><br><span class="line"><span class="keyword">if</span>(i.second%<span class="number">2</span>==<span class="number">1</span>)ans*=i.first;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蓝桥杯-2023-国-B-班级活动"><a href="#蓝桥杯-2023-国-B-班级活动" class="headerlink" title="[蓝桥杯 2023 国 B] 班级活动"></a>[蓝桥杯 2023 国 B] 班级活动</h3><p>最后要考虑是单独号码的人cnt1多，还是重复号码的人cnt2多</p><p>如果是重复的人多，一部分改变号码和单号的互补，另一部分也要改变两两凑对，cnt1+cnt2-cnt1&#x3D;cnt2</p><p>如果是单独的人多，cnt2都来补全单号，此外未补全的cnt1剩下的一半变号，cnt2+(cnt1-cnt2)&#x2F;2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">cin&gt;&gt;tmp;</span><br><span class="line">mp[tmp]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:mp)&#123;</span><br><span class="line"><span class="keyword">if</span>(i.second&gt;<span class="number">2</span>)cnt2+=i.second<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">if</span>(i.second&lt;<span class="number">2</span>)cnt1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt2&gt;=cnt1)cout&lt;&lt;cnt2;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;cnt2+(cnt1-cnt2)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习</title>
      <link href="/posts/8df0ec14.html"/>
      <url>/posts/8df0ec14.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java学习"><a href="#Java学习" class="headerlink" title="Java学习"></a>Java学习</h1><h2 id="零、java概述"><a href="#零、java概述" class="headerlink" title="零、java概述"></a>零、java概述</h2><h3 id="1-java语言的主要特点"><a href="#1-java语言的主要特点" class="headerlink" title="1. java语言的主要特点"></a>1. java语言的主要特点</h3><p>（1）跨平台性<br>指软件可以不受计算机硬件和操作系统的约束而在任意计算机环境下正常运行</p><p><strong>跨平台原理</strong>：在Java语言中，Java自带的虚拟机很好地实现了跨平台性。Java源程序代码经过编译后生成二进制的字节码是与平台无关的，但是可被Java虚拟机识别的一种机器码指令。Java虚拟机提供了一个字节码到底层硬件平台及操作系统的屏障，使得Java语言具备跨平台性</p><p>（2）面向对象<br>面向对象是指以对象为根本粒度，其下包含属性和方法</p><p>（3）安全性<br>安全性可以分为四个层面，即语言级安全性、编译时安全性、运行时安全性、可执行代码安全性。</p><p>（4）多线程<br>多线程在操作系统中已得到了最成功的应用。多线程是指允许一个应用程序同时存在两个或两个以上的线程，用于支持事务并发和多任务处理。</p><p>（5）简单易用<br>Java源代码的书写不拘泥于特定的环境，可以用记事本、文本编辑器等编辑软件来实现，然后将源文件进行编译，编译通过后可直接运行，通过调试那么可得到想要的结果。</p><h2 id="一、字符串String"><a href="#一、字符串String" class="headerlink" title="一、字符串String"></a>一、字符串String</h2><h3 id="1-初始化字符串"><a href="#1-初始化字符串" class="headerlink" title="1.初始化字符串"></a>1.初始化字符串</h3><p>字符串是常量，创建后其值不能被更改。如果不初始化String对象，变量不会指向任何一个内存地址，从而无法调用（空指针异常）。表面上可以对String类定义的变量进行赋值运算，其实是创建了一个新的String对象并指向定义的字符串常量，然后将这个新对象的内存地址引用赋值给了该变量。原来创建的String对象没有变，和新对象不是同一个，不能认为是等同的。</p><p>初始化方法：</p><p>（1）通过字符串常量直接引用赋值</p><p>（2）构造方法初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructString</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();<span class="comment">//创建了一个空的字符串对象</span></span><br><span class="line">        str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;构造方法创建字符串对象&quot;</span>);</span><br><span class="line">        str = String.valueOf(<span class="number">1</span>);<span class="comment">//将int数值1转换成字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）基本数据类型转换方法</p><p>调用String.valueOf()</p><p>（4）字符数组初始化</p><p>可以使用一个字符数组初始化与一个字符串</p><p>char[] charArray &#x3D; {‘a’, ‘b’, ‘c’, ‘d’};</p><p>String str &#x3D; new String(charArray);</p><p>str &#x3D; new String(charArray, 2, 1)      &#x2F;&#x2F;表示从索引2开始取一个元素初始化字符串 </p><p>String.valueOf(charArray) 也可以初始化字符串</p><h3 id="2-字符串操作"><a href="#2-字符串操作" class="headerlink" title="2.字符串操作"></a>2.字符串操作</h3><h4 id="2-1字符串连接-“-”"><a href="#2-1字符串连接-“-”" class="headerlink" title="2.1字符串连接 “+”"></a>2.1字符串连接 “+”</h4><h4 id="2-2字符串长度"><a href="#2-2字符串长度" class="headerlink" title="2.2字符串长度"></a>2.2字符串长度</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="string">&quot;好好学习&quot;</span>+<span class="number">4</span>+<span class="number">5</span>+<span class="number">6</span>+<span class="string">&quot;抬头显示&quot;</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line">System.out.println(str.length());</span><br><span class="line"><span class="comment">//6好好学习456抬头显示</span></span><br><span class="line"><span class="comment">//12</span></span><br></pre></td></tr></table></figure><h4 id="2-3查找字符串"><a href="#2-3查找字符串" class="headerlink" title="2.3查找字符串"></a>2.3查找字符串</h4><h5 id="2-3-1-charAt-方法"><a href="#2-3-1-charAt-方法" class="headerlink" title="2.3.1 charAt()方法"></a>2.3.1 charAt()方法</h5><p>charAt(int index)方法可以获取字符串指定索引位置的字符，输入int类型的index，返回一个char类型字符</p><p>例如对字符串str&#x3D;”好好学习”，str.charAt(0)&#x3D;’好’</p><h5 id="2-3-2-indexOf-方法"><a href="#2-3-2-indexOf-方法" class="headerlink" title="2.3.2 indexOf()方法"></a>2.3.2 indexOf()方法</h5><p>返回入参字符串在指定String对象中第一次出现的索引位置，找不到则返回-1</p><h5 id="2-3-3-lastIndexOf-方法"><a href="#2-3-3-lastIndexOf-方法" class="headerlink" title="2.3.3 lastIndexOf()方法"></a>2.3.3 lastIndexOf()方法</h5><p>返回入参字符串在指定String对象中最后一次出现的索引位置，找不到则返回-1</p><h4 id="2-4字符串替换-replace-方法"><a href="#2-4字符串替换-replace-方法" class="headerlink" title="2.4字符串替换 replace()方法"></a>2.4字符串替换 replace()方法</h4><p>replace(char oldChar, char newChar)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;好好学习abcd&quot;</span>;</span><br><span class="line">str = str.replace(<span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;天天向上&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;替换之后的字符串：&quot;</span> + str);</span><br><span class="line"><span class="comment">//替换之后的字符串：好好学习天天向上</span></span><br><span class="line"><span class="comment">//如果找不到要替换的字符串，则返回原字符串</span></span><br></pre></td></tr></table></figure><h4 id="2-5字符串截取-substring-方法"><a href="#2-5字符串截取-substring-方法" class="headerlink" title="2.5字符串截取 substring()方法"></a>2.5字符串截取 substring()方法</h4><p>substring(int beginIndex) 从入参索引位置开始截取，直到String对象结尾</p><p>substring(int beginIndex, int endIndex) 从入参索引位置开始截取，直到结束索引-1的位置 (左闭右开)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;好好学习天天向上&quot;</span>;</span><br><span class="line">str = str.substring(<span class="number">4</span>);</span><br><span class="line">System.out.println(str);  <span class="comment">//天天向上</span></span><br><span class="line">str = <span class="string">&quot;好好学习天天向上&quot;</span>.substring(<span class="number">2</span>,<span class="number">6</span>);</span><br><span class="line">System.out.println(str);  <span class="comment">//学习天天</span></span><br></pre></td></tr></table></figure><h4 id="2-6字符串分割-split-方法"><a href="#2-6字符串分割-split-方法" class="headerlink" title="2.6字符串分割 split()方法"></a>2.6字符串分割 split()方法</h4><p>split(String regex) 根据入参元素分割字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;计算机,编程,学习&quot;</span>;</span><br><span class="line">String[] strArray = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(String element : strArray)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;分割后元素依次为：&quot;</span> + element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分割后元素依次为：计算机</span></span><br><span class="line"><span class="comment">//分割后元素依次为：编程</span></span><br><span class="line"><span class="comment">//分割后元素依次为：学习</span></span><br></pre></td></tr></table></figure><h2 id="二、面向对象"><a href="#二、面向对象" class="headerlink" title="二、面向对象"></a>二、面向对象</h2><h3 id="1-封装"><a href="#1-封装" class="headerlink" title="1.封装"></a>1.封装</h3><p>封装的优点：</p><ul><li>提高程序的安全性，保护数据</li><li>隐藏代码的实现细节</li><li>统一接口</li><li>系统可维护性增加</li></ul><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2.继承"></a>2.继承</h3><p>继承是类和类之间的一种关系</p><p>继承关系的两个类，一个为子类（派生类），一个为父类（基类）。 子类继承父类，使用关键字extends来表示</p><p><strong>super使用注意点:</strong></p><ul><li>super调用父类的构造方法，必须在子类构造方法的第一句，格式为super()</li><li>super必须只能出现在子类的方法或者构造方法中</li></ul><h3 id="3-重写"><a href="#3-重写" class="headerlink" title="3.重写"></a>3.重写</h3><ul><li>需要有继承关系，子类重写父类的方法</li><li>需要 @Override 注解</li><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符范围可以扩大但不能缩小：public&gt;Protected&gt;Default&gt;private</li><li>抛出的异常范围可以被缩小，但不能被扩大</li><li>带static &#x2F; final 修饰的方法和 private 修饰的类不能重写</li></ul><h3 id="4-多态"><a href="#4-多态" class="headerlink" title="4.多态"></a>4.多态</h3><ul><li>多态存在的条件：有继承关系；子类重写父类方法；父类引用指向子类对象</li><li>多态是方法的多态，属性没有多态</li></ul><h3 id="5-向上转型"><a href="#5-向上转型" class="headerlink" title="5.向上转型"></a>5.向上转型</h3><p>向上转型就是父类引用指向子类对象，即将子类对象赋值给父类的引用，这样做是不需要强制转化的，因为子类相对父类功能更多，父类有的子类都有，使用父类的引用调用<strong>父类方法</strong>不会出现没有某个方法而出错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public class B_child extends A_parent</span></span><br><span class="line"><span class="type">A_parent</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B_child</span>();</span><br><span class="line"><span class="comment">//父类引用指向子类指针  左父右子</span></span><br><span class="line"><span class="comment">//如果B_child类有重写A_parent类中的方法，那么调用对象b的该方法时，调用的是子类重写后的方法</span></span><br></pre></td></tr></table></figure><h3 id="6-向下转型"><a href="#6-向下转型" class="headerlink" title="6.向下转型"></a>6.向下转型</h3><p><strong>子类引用不能指向父类对象</strong></p><p>会出现调用不了某些方法的情况，因为子类本来就是父类的扩展。当然某些情况下需要转型的时候就可以手动强制转化，这里只能是父类强制转化成子类，同一个父类的两个子类之间不能强制转化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///////////////例一///////////////</span></span><br><span class="line"><span class="type">Father</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>(); <span class="comment">// 向上转型</span></span><br><span class="line"><span class="comment">// 现在f1引用指向一个Son对象，是子类对象</span></span><br><span class="line"><span class="type">Son</span> <span class="variable">s1</span> <span class="operator">=</span> (Son)f1; <span class="comment">//向下转型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////例二///////////////</span></span><br><span class="line"><span class="type">Father</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="type">Son</span> <span class="variable">s2</span> <span class="operator">=</span> (Son)f2; <span class="comment">// 出错，子类引用不能指向父类对象</span></span><br></pre></td></tr></table></figure><h3 id="7-static的用法"><a href="#7-static的用法" class="headerlink" title="7.static的用法"></a>7.static的用法</h3><ul><li>静态变量和静态方法可以不创建对象，而是用类名来调用</li><li>非静态方法可以调用静态方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="type">int</span> age;<span class="comment">//静态变量   大多只会出现在多线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;<span class="comment">//非静态变量</span></span><br><span class="line">    <span class="comment">//下面这个是非静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">        <span class="comment">//go();//非静态方法里可以调用静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面这个是静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;go&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//静态变量对于类，所有对象（实例）所共享，当直接使用类名去调用变量名，说明这个变量名是static（静态）的</span></span><br><span class="line">        System.out.println(Student.age);  <span class="comment">// 0</span></span><br><span class="line">        <span class="comment">//System.out.println(Student.score);会报错，提示score是非静态变量，无法用类名调用。</span></span><br><span class="line">        System.out.println(s1.age);  <span class="comment">// 0</span></span><br><span class="line">        System.out.println(s1.score);  <span class="comment">// 0.0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        s1.run();(想使用run()方法，就必须new一个Student，即new一个对象,调用的写法只能是 对象名称.方法名)</span></span><br><span class="line"><span class="comment">        go();(即使没有new一个Student，也可以直接调用go()方法，)</span></span><br><span class="line"><span class="comment">        Student.go();(也可以在go()方法前面加类名，也可以像上面一样不加类名,(不加类名的前提是必须在同一个类下面))</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当下面public class Person写成public final class Person时，表示当前类不能被继承</span></span><br><span class="line"><span class="comment">//final有最终的意思</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//第二个执行，每new一次对象就会执行一次(可以用来赋初始值)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一个执行，并且只执行一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第三个执行，每new一次对象就会执行一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        输出结果：</span></span><br><span class="line"><span class="comment">                静态代码块</span></span><br><span class="line"><span class="comment">                匿名代码块</span></span><br><span class="line"><span class="comment">                无参构造方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-final修饰符"><a href="#8-final修饰符" class="headerlink" title="8.final修饰符"></a>8.final修饰符</h3><h4 id="8-1final常量"><a href="#8-1final常量" class="headerlink" title="8.1final常量"></a>8.1final常量</h4><p>final修饰的常量只能赋值一次，之后不能再修改</p><p>三种常见用法：</p><p>（1）blank final</p><p>当由同一个类生成的不同对象希望可以有不同的final字段值时，可以在定义该字段时只声明不赋值，通过构造方法对每个对象的final字段进行赋值</p><p>（2）final参数</p><p>final修饰形参，如果是基本数据类型，表示形参被实参赋值后，其值再方法体内不变；如果是<strong>引用类型</strong>，表示形参被赋值后，在方法体内不会指向新的对象</p><p>（3）static final 静态常量</p><p>只用于修饰字段而不能用于局部变量，需要在类型被加载时就完成初始化操作，因此要在定义时或者在static块中就给定初始值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)(Math.random()*<span class="number">26</span>);  <span class="comment">//合法，定义时初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> j;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">j = <span class="number">10</span>;</span><br><span class="line">&#125;  <span class="comment">//合法，在类型加载前，在静态块中初始化</span></span><br></pre></td></tr></table></figure><h4 id="8-2final类"><a href="#8-2final类" class="headerlink" title="8.2final类"></a>8.2final类</h4><p>final修饰的类不能被继承</p><h4 id="8-3final方法"><a href="#8-3final方法" class="headerlink" title="8.3final方法"></a>8.3final方法</h4><p>不能被子类覆盖的方法</p><h3 id="9-instanceof操作符"><a href="#9-instanceof操作符" class="headerlink" title="9.instanceof操作符"></a>9.instanceof操作符</h3><p>instanceof 操作符用于判断某个对象的所属类型，语法格式如下：</p><p>对象 instanceof 类型  &#x2F;&#x2F; 返回值为boolean类型</p><h3 id="10-抽象类"><a href="#10-抽象类" class="headerlink" title="10.抽象类"></a>10.抽象类</h3><ul><li>abstract修饰符可以用来修饰方法也可以修饰类：如果修饰方法,那么该方法就是抽象方法；如果修饰类,那么该类就是抽象类</li><li>抽象类中可以没有抽象方法,但是有抽象方法的类一定要声明为抽象类。</li><li>抽象类不能使用new来创建对象，它只能被子类继承</li><li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</li><li>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类</li><li>抽象类中存在无参构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Action.java</span></span><br><span class="line"><span class="comment">// 抽象类Action</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">    <span class="comment">//abstract，抽象方法，只有方法名字，没有方法的实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//1.不能new这个抽象类，只能靠子类去实现它</span></span><br><span class="line">    <span class="comment">//2.抽象类中可以写普通的方法</span></span><br><span class="line">    <span class="comment">//3.抽象方法必须在抽象类中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A.java</span></span><br><span class="line"><span class="comment">// 普通类A继承抽象类Action</span></span><br><span class="line"><span class="comment">// 抽象类的所有方法，继承给了子类，都必须要实现它的方法（重写父类的方法），除非把这个类也设置为抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-接口"><a href="#11-接口" class="headerlink" title="11.接口"></a>11.接口</h3><p>接口中所有的方法都是公开的抽象方法，所有的字段都是公开的静态常量</p><p>与抽象类类似的是，接口不能被实例化，只能被实现</p><p>与类不同的是，接口可以继承其他接口（不能是类），而且支持多继承</p><p>类implements实现接口，且可以实现多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyInterface.java</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">2</span>;     <span class="comment">//等价于 public static final int flag = 2;</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">10</span>;    <span class="comment">//等价于 public static final int size = 10;</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;      <span class="comment">//等价于 public abstract void show();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> <span class="keyword">extends</span> <span class="title class_">A</span>,B&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">myFlag</span> <span class="operator">=</span> A.flag + B.flag;  <span class="comment">//同名字段要用接口名来限定</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// myTest.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myTest</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is my test of interface!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">myTest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">myTest</span>();</span><br><span class="line">        test.show();</span><br><span class="line">        System.out.println(test.myFlag);</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口MyInterface继承接口A和B，myTest类实现接口MyInterface，test是myTest类的实例化对象</span></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">//this is my test of interface!</span></span><br><span class="line"><span class="comment">//7</span></span><br></pre></td></tr></table></figure><p><strong>接口和抽象类比较：</strong></p><p>（1）语法上，抽象类用 abstract class 定义，并且可以定义自己的成员变量和非抽象及抽象的成员方法；接口用 interface 定义，接口内只有公开的静态常量，所有的成员方法都是公开的抽象方法、默认方法（default）或静态方法（static）</p><p>（2）使用上，抽象类是用来被继承的，一个类只能继承一个父类，但可以实现多个接口，这样可以使用接口实现多重继承</p><p>（3）设计上，抽象类和子类之间存在”is-a”关系，即父子类本质上是一种类型；接口只能表示类支持接口的行为，具有接口的功能，接口和类之间是”like-a”关系</p><h2 id="三、内部类"><a href="#三、内部类" class="headerlink" title="三、内部类"></a>三、内部类</h2><h3 id="1-内部类的基本语法"><a href="#1-内部类的基本语法" class="headerlink" title="1.内部类的基本语法"></a>1.内部类的基本语法</h3><ul><li>内部类作为外部类的一个成员存在，与外部类的属性、方法并列。内部类不能与外部类重名。</li><li>Java编译器在创建内部类对象时，隐式的把其外部类对象的引用也传了进去。 因此一个内部类对象可以访问创建它的外部类对象的内容，甚至包括私有变量。</li><li>在外部类中不能直接访问内部类的成员，必须通过内部类的实例去访问。通过内部类的实例，外部类可以访问内部类的所有成员，无论其访问修饰是什么。</li><li>外部类只能被public或是默认修饰。而内部类可以被private\protected\默认\public修饰。</li><li>内部类与外部类一旦编译成功，就会成为完全不同的两类。对于一个名为outer的外部类和其内部名为inner的内部类。编译完成后出现outer.class和outer$inner.class两类。</li><li>一个内部类不管嵌套多少层都能透明地访问所有它所嵌入的外围类的所有成员</li></ul><p><strong>例一：外部类的成员可以在内部类中使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInnerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">         inner.display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123; <span class="comment">// Inner被定义为内部类</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;显示: outer_exp = &quot;</span> + a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.testInnerMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// outer_exp = -100</span></span><br></pre></td></tr></table></figure><p><strong>例二：在外部类中必须通过内部类实例访问内部类方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">InnerTool</span> <span class="variable">tool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerTool</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerTool</span> &#123;<span class="comment">// 内部类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">inneradd</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tool.inneradd(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tester</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        <span class="comment">// 其实是使用内部类来完成相加操作的。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> outer.add(<span class="number">2</span>, <span class="number">3</span>); </span><br><span class="line">        System.err.println(<span class="string">&quot;a=&quot;</span> + a);</span><br><span class="line">Outer.<span class="type">InnerTool</span> <span class="variable">tool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">InnerTool</span>();<span class="comment">//先new了一个Outer类再new其中的内部类</span></span><br><span class="line">        <span class="comment">//Outer.InnerTool tool = outer.new InnerTool();或者用之前的Outer类对象来new内部类</span></span><br><span class="line">        a = tool.inneradd(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 功能是一样的,注意上面的初始化方法</span></span><br><span class="line">        System.err.println(<span class="string">&quot;a=&quot;</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>例三：内部类成员只有在内部类内可知，且不能被外部类直接使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">outer_exp</span> <span class="operator">=</span> -<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInnerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">         inner.display();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123; <span class="comment">// Inner被定义为内部类</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">Y</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">         <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;显示: outer_exp = &quot;</span> + outer_exp);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showY</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Y = &quot;</span> + Y); <span class="comment">//error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例四：内部类和外部类互相访问</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">outProp</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">inProp</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acessOuterProp</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 内部类可以直接访问外部类的成员</span></span><br><span class="line">            System.out.println(<span class="string">&quot;外部类的outProp属性值:&quot;</span> + outProp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accessInnerProp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 外部类不能直接访问内部类属性,下面代码出现编译错误</span></span><br><span class="line">        <span class="comment">// System.out.println(&quot;内部类的inProp属性值:&quot; + inProp);</span></span><br><span class="line">        <span class="comment">// 如需访问内部类成员，必须显式创建内部类对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;内部类的inProp属性值:&quot;</span> + <span class="keyword">new</span> <span class="title class_">Inner</span>().inProp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        out.accessInnerProp();</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        in.acessOuterProp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-实例内部类"><a href="#2-实例内部类" class="headerlink" title="2.实例内部类"></a>2.实例内部类</h3><p>实例内部类即没有被 static 修饰的内部类</p><p>在创建实例内部类时，必须已经存在外部类的实例。如前例中的：</p><p>Outer.Inner  ob &#x3D; new Outer().new Inner()</p><ul><li>实例内部类自动对其外部类有一个引用。即：内部类可以直接访问外部类的成员变量。<strong>注意、此处说的是在内部类的内部可以访问外部类的成员变量，而不是说内部类的引用变量。</strong>内部类的引用变量不能访问外部类的成员变量</li><li>在实例内部类中不能定义静态成员，只能定义实例成员。因为它违背了“内部类的实例一定要绑定在外部类的实例上”的原则(静态成员在Class被load的时候就初始化了)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner1_1</span> &#123;</span><br><span class="line">        Inner1_1() &#123;</span><br><span class="line">            a = <span class="number">4</span>; <span class="comment">// 直接访问外部类的成员变量</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Inner1.<span class="type">Inner1_1</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner1</span>().<span class="keyword">new</span> <span class="title class_">Inner1_1</span>();</span><br><span class="line">        inner.display();</span><br><span class="line">        <span class="comment">// inner.a = 8;//编译错误</span></span><br><span class="line">        <span class="comment">//System.out.println(inner.a);//编译错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>内部类中的实例变量和外部类的实例变量可以同名。当内部类的成员变量与外部成员变量重名时，this.varName表示内部类成员，可以通过外部类名.this.varName的方式访问外部类的成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EgDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EgDemoSub</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EgDemoSub</span><span class="params">()</span> &#123;</span><br><span class="line">            System.err.println(<span class="built_in">this</span>.a);</span><br><span class="line">            System.err.println(EgDemo.<span class="built_in">this</span>.a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        EgDemo.<span class="type">EgDemoSub</span> <span class="variable">ob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EgDemo</span>().<span class="keyword">new</span> <span class="title class_">EgDemoSub</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例：外部类成员、内部类成员、局部变量重名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscernVariable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="string">&quot;外部类属性&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">InClass</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="string">&quot;内部类属性&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="string">&quot;局部变量&quot;</span>;</span><br><span class="line">            <span class="comment">// 通过 外部类类名.this.varName 访问外部类实例属性</span></span><br><span class="line">            System.out.println(<span class="string">&quot;外部类的属性值：&quot;</span> +  DiscernVariable.<span class="built_in">this</span>.prop);</span><br><span class="line">            <span class="comment">// 通过 this.varName 访问外内部类实例的属性</span></span><br><span class="line">            System.out.println(<span class="string">&quot;内部类的属性值：&quot;</span> + <span class="built_in">this</span>.prop);</span><br><span class="line">            <span class="comment">// 直接访问局部变量</span></span><br><span class="line">            System.out.println(<span class="string">&quot;局部变量的属性值：&quot;</span> + prop);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">InClass</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InClass</span>();</span><br><span class="line">        in.info();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DiscernVariable</span>().test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-静态内部类"><a href="#3-静态内部类" class="headerlink" title="3.静态内部类"></a>3.静态内部类</h3><p>如果不需要内部类对象与其外围类对象之间有联系,那么可以将内部类声明为static。用static修饰的内部类为静态内部类（嵌套类）</p><p><strong>在创建内部静态类的实例时，不必创建外部类的实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticInnerCls1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">One</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">One</span>();<span class="comment">// 在本类当中可选的初始化方式</span></span><br><span class="line">        one.aa();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">One</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aa</span><span class="params">()</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;One.aa()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在其他类中的初始化方式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OtherCls</span> &#123;</span><br><span class="line">    OtherCls() &#123;</span><br><span class="line">        StaticInnerCls1.<span class="type">One</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticInnerCls1</span>.One();</span><br><span class="line"><span class="comment">//StaticInnerCls1.One one = new StaticInnerCls1().new One();</span></span><br><span class="line"></span><br><span class="line">        one.aa();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态内部类可以直接访问外部类的静态成员，如果访问外部类的实例成员，就必须通过外部类的实例去访问，原因是静态内部类没有了指向外部类的引用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> <span class="string">&quot;I am Outer&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">l</span> <span class="operator">=</span> <span class="string">&quot;hehe&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerTool</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> “I am Inner”; <span class="comment">//可以有非静态成员</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.f);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">Outer</span>().f); <span class="comment">// 访问实例成员</span></span><br><span class="line">            System.out.println(l); <span class="comment">// 访问静态成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        Outer.<span class="type">InnerTool</span> <span class="variable">ob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>.InnerTool();</span><br><span class="line">        ob.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*I am Inner</span></span><br><span class="line"><span class="comment">I am Inner</span></span><br><span class="line"><span class="comment">I am Outer</span></span><br><span class="line"><span class="comment">hehe</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>可以把main方法放在嵌套类中</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBed</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Tester</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="type">TestBed</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestBed</span>();</span><br><span class="line">            t.f();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-局部内部类"><a href="#4-局部内部类" class="headerlink" title="4.局部内部类"></a>4.局部内部类</h3><p>局部内部类和局部变量一样，是定义在方法内的类。同样，局部内部类与局部变量一样，不能使用private\public\protected以及static修饰。其使用范围为定义它的代码块</p><ul><li>只能在当前方法中使用。在类外不可直接访问</li><li>不能包含静态成员变量</li><li>可以访问外部类的成员变量</li><li>可以使用本方法中使用final修饰的变量</li><li>本方法中只能是被final修饰的变量才能被局部内部类访问，否则会编译出错</li></ul><p>例一：局部内部类只能访问方法体内里的final变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;final变量&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;非final变量&quot;</span>;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">InnerTool</span> &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                System.out.println(a);</span><br><span class="line">                <span class="comment">// System.out.println(j);</span></span><br><span class="line">                <span class="comment">// System.out.println(b);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">InnerTool</span> <span class="variable">tool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerTool</span>();</span><br><span class="line">        tool.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        Outer2 ob=<span class="keyword">new</span> <span class="title class_">Outer2</span>();</span><br><span class="line">        ob.print(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例二：可以在任意作用域内嵌入局部内部类</p><p>例三：用局部内部类隐藏接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Destination</span> &#123;</span><br><span class="line">    String <span class="title function_">readLabel</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parcel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Destination <span class="title function_">destination</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">PDestination</span> <span class="keyword">implements</span> <span class="title class_">Destination</span> &#123;</span><br><span class="line">             <span class="keyword">private</span> String label;</span><br><span class="line">             PDestination(String whereTo) &#123;</span><br><span class="line">                 label = whereTo;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">public</span> String <span class="title function_">readLabel</span><span class="params">()</span> &#123;</span><br><span class="line">                 <span class="keyword">return</span> label;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PDestination</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Parcel</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Parcel</span> ();</span><br><span class="line">        <span class="type">Destination</span> <span class="variable">d</span> <span class="operator">=</span> p.destination(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        System.out.println(d.readLabel());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-内部类的继承"><a href="#5-内部类的继承" class="headerlink" title="5.内部类的继承"></a>5.内部类的继承</h3><ul><li>内部类可外部类一样，同样也可以被继承。但是注意，局部内部类不能被继承</li><li>要继承一个内部类，必须给出内部类的全名</li><li>要继承一个内部类，必须给出外部类的实例。且必须先调用外部类的super方法初始化外部类</li><li>Sample继承了Inner内部类。则必须在Sample的构造方法中，含有对外部类的引用</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Outer</span> <span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;外部类的a=&quot;</span> + a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sample</span> <span class="keyword">extends</span> <span class="title class_">Outer</span>.Inner &#123;</span><br><span class="line">    Sample(Outer o) &#123;</span><br><span class="line">        o.<span class="built_in">super</span>(); <span class="comment">// 必须在第一句就调用。相当于super(o)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span> (<span class="number">1</span>);</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span> (<span class="number">2</span>);</span><br><span class="line">        <span class="type">Sample</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sample</span>(outer1);</span><br><span class="line">        <span class="type">Sample</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sample</span>(outer2);</span><br><span class="line">        s1.print(); <span class="comment">// 调用继承而来的方法，其实是父类的方法</span></span><br><span class="line">        s2.print(); <span class="comment">// 除非自己进行了覆盖，才会调用自己的print方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//外部类的a=1</span></span><br><span class="line"><span class="comment">//外部类的a=2</span></span><br></pre></td></tr></table></figure><h3 id="6-匿名内部类"><a href="#6-匿名内部类" class="headerlink" title="6.匿名内部类"></a>6.匿名内部类</h3><p>匿名内部类一般格式：<br>new superclassname(){……};<br>或者<br>new interfacename(){……}; </p><ul><li>匿名内部类：顾名思义就是没有名字的类，匿名内部类是没有访问修饰符的。</li><li>匿名内部类所在方法的形参需要被匿名内部类使用时，这个形参必须是final。</li><li>匿名内部类是没有构造方法的，因为他没有类名。由于不知道类名，也不能使用关键字来创建该类的实例。实际上匿名内部类的定义、构造、和第一次使用都发生在同样一个地方。</li><li>匿名内部类中不能存在任何静态变量和方法。</li><li>匿名内部类必须继承一个抽象类或者实现一个接口，一般隐式的继承某一个父类或者实现某一个接口，不需要使用extends和implements关键字。但不能同时继承类和实现接口。</li><li>一个匿名内部类一定是在new的后面，用其隐含地实现一个接口或者实现一个类，没有类名，根据多态，我们使用其父类名。因为他是局部内部类，那么局部内部类的所有限制都对其生效。匿名内部类是唯一一种无构造方法类。</li><li>大部分匿名内部类是用于接口回调用的，匿名内部类在编译的时候由系统自动起名Out$1.class。如果一个对象编译时的类型是接口，那么其运行的类型为实现这个接口的类。</li><li>匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Ftest</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ftest</span>();</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> inner.get(<span class="number">3</span>);</span><br><span class="line">        System.out.println(t.getI());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">T</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ftest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建匿名内部类，调用父类的构造方法</span></span><br><span class="line">        <span class="comment">// 该内部类其实是继承了父类的子类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">T</span>(x) &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.getI() * <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        正常情况下我们想调用Apple类中eat方法，我们会先new一个对象，然后初始化类</span></span><br><span class="line"><span class="comment">        Apple apple = new Apple();</span></span><br><span class="line"><span class="comment">        然后用对象名调用eat</span></span><br><span class="line"><span class="comment">        apple.eat();</span></span><br><span class="line"><span class="comment">        但是这里我们不需要去初始化，直接new</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//没有名字初始化类,不用将实例保存到变量中</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Apple</span>().eat();</span><br><span class="line">        <span class="comment">//下面的也叫匿名内部类</span></span><br><span class="line">        <span class="comment">//new UserService()其实是长这样， UserService userService =  new UserService()</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">UserService</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、异常"><a href="#四、异常" class="headerlink" title="四、异常"></a>四、异常</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>在程序中，错误是不可避免的：程序员没有预料到或没有足够的时间测试到超出程序员控制之外的环境因素（如无法连网，已损坏文件，文件不存在等）</p><p>错误的类型：编译错误和运行错误</p><p>错误处理方法: 常常采用返回值进行处理</p><p>编写一个方法，返回一个状态代码，调用者根据状态代码判断出错与否。若状态代码表示一个错误，则调用错误处理程序进行处理</p><p>Java的异常处理把错误集中起来统一处理。程序员只需要说明何处可能出现异常，如何处理即可</p><p>Java把程序运行过程中可能遇到的问题分为两类：</p><ul><li>致命性的，即程序遇到了非常严重的不正常状态，不能简单地恢复执行——错误(Error类)，如程序运行过程中内存耗尽</li><li>非致命性的，通过某种处理后程序还能继续运行——异常(Exception类)</li></ul><p><strong>Java异常处理方法：为运行错误引入了异常、异常类和异常处理机制</strong></p><p>（1）异常：特殊的运行错误，是在程序运行过程中发生的、会打断程序正常执行的错误</p><p>（2）异常类：Java用面向对象的方法处理异常，异常类是处理运行时错误的特殊类，每一种异常类对应一种特定的运行错误，每一个异常事件由一个异常类的对象来代表</p><p>例如：</p><p>除0溢出                 （ArithmeticException）<br>文件找不到           （FileNotFoundException）<br>数组元素下标越界（ArrayIndexOutofBoundsException）</p><p>（3）异常处理机制：抛出异常——捕捉异常</p><ul><li>出现错误，方法都会产生一个异常对象，异常对象将交由运行系统来处理。此过程称为抛出(throwing)异常。抛出异常又分为系统抛出和用户自定义抛出</li><li>运行系统开始寻找合适的处理方法来处理这个异常。如果系统找到了适合的处理该异常的方法，这一过程叫捕获异常</li></ul><p>（4）异常处理的语法支持 —— try, catch, throws, throw, finally</p><ul><li><p>try包含可能出现异常的语句块</p></li><li><p>一个或多个catch块紧随try{}块，每个catch块通常处理指定类型的异常</p></li><li><p>finally引导块紧随catch块后，主要用于清理现场（可有可无）</p></li><li><pre><code class="java">try&#123;          //可能出现异常的代码&#125;catch(异常类型1 变量名1)&#123;          //处理异常的方式1&#125;catch(异常类型2 变量名2)&#123;          //处理异常的方式2&#125;catch(异常类型3 变量名3)&#123;          //处理异常的方式3&#125;....finally&#123;         //一定会执行的代码&#125;// finally总是执行，catch块不一定执行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2.throws抛出异常</span><br><span class="line"></span><br><span class="line">声明抛出异常：不捕获异常，而是将异常交由上一层处理，在其他地方捕获异常</span><br><span class="line">应该向编译器表明：此方法可能会抛出异常，但方法本身不会捕获它</span><br><span class="line">可以在方法头中用throws子句来实现此功能</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">class Test &#123;</span><br><span class="line">public String getInput() throws IOException &#123;</span><br><span class="line">System.in.read();</span><br><span class="line">return null;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="3-throw抛出异常"><a href="#3-throw抛出异常" class="headerlink" title="3.throw抛出异常"></a>3.throw抛出异常</h3><p>使用throw语句应注意：<br>一般这种抛出异常的语句应该在满足一定条件执行，例如把throw语句放到if分支中<br>含有throw语句的方法，应该在方法头定义中用throws语句声明所有可能抛出的异常</p><p>抛出异常有三步：<br>确定异常类<br>创建异常类的实例<br>抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThrowTest</span> &#123;</span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">getInput</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line">buffer[counter] = (<span class="type">char</span>) System.in.read();</span><br><span class="line"><span class="keyword">if</span> (buffer[counter] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">counter++;</span><br><span class="line"><span class="keyword">if</span> (counter &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;buffer is full&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(getInput());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、用户图形界面GUI"><a href="#五、用户图形界面GUI" class="headerlink" title="五、用户图形界面GUI"></a>五、用户图形界面GUI</h2><h3 id="1-基本组件"><a href="#1-基本组件" class="headerlink" title="1.基本组件"></a>1.基本组件</h3><table><thead><tr><th align="center">基本组件（类名）Swing</th><th align="center">名称</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">JButton</td><td align="center">按钮</td><td align="center">完成一个命令</td></tr><tr><td align="center">JLabel</td><td align="center">标签</td><td align="center">显示单行文字</td></tr><tr><td align="center">JTextField</td><td align="center">文本框</td><td align="center">显示或输入单行文字</td></tr><tr><td align="center">JTextArea</td><td align="center">多行文本框</td><td align="center">显示或输入多行文字</td></tr><tr><td align="center">JCheckbox</td><td align="center">复选框</td><td align="center">选择功能</td></tr><tr><td align="center">JRadioButton</td><td align="center">单选框</td><td align="center">选择功能</td></tr></tbody></table><h3 id="2-容器组件"><a href="#2-容器组件" class="headerlink" title="2.容器组件"></a>2.容器组件</h3><p>Swing：JWindows、JFrame、JDialog、Jpanel</p><p>建立一个窗口系统，首先需要创建一个图形用户界面，这就需要使用顶级容器类JWindows、JFrame、JDialog等 </p><p>Window类提供了用于窗口操作的基本功能，但通常使用的是Window类的子类JFrame(框架)类和JDialog(对话框)类</p><h4 id="2-1-JFrame"><a href="#2-1-JFrame" class="headerlink" title="2.1 JFrame"></a>2.1 JFrame</h4><p>JFrame类的常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setVisible(<span class="type">boolean</span> b)  <span class="comment">//使框架可见/不可见(true/false)</span></span><br><span class="line">hide()  <span class="comment">//隐藏框架</span></span><br><span class="line">setTile()  <span class="comment">//设置框架的标题</span></span><br><span class="line">pack()  <span class="comment">//调整窗口正好容纳各组件</span></span><br><span class="line">setSize(<span class="type">int</span> w,<span class="type">int</span> h)  <span class="comment">//设置框架的尺寸</span></span><br><span class="line">setLocation(<span class="type">int</span> x,<span class="type">int</span> y)  <span class="comment">//设置框架的位置</span></span><br><span class="line">reSize(<span class="type">int</span> w,<span class="type">int</span> h)  <span class="comment">//调整框架的尺寸</span></span><br><span class="line">setBounds(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> w,<span class="type">int</span> h)  <span class="comment">//调整框架的位置及尺寸(左上角为(x,y), 宽、高为w、h)</span></span><br><span class="line">add(Component ob)  <span class="comment">//将其它组件ob加入到框架的中心位置</span></span><br><span class="line">add(String p, Component ob) 将组件ob加入到框架的p位置</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">amDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">jButton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">jButton1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">jButton2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">amDemo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.setSize(<span class="number">400</span>, <span class="number">200</span>); <span class="comment">// this.setBounds(100,100,400,200);</span></span><br><span class="line"><span class="comment">//Container c=this.getContentPane();</span></span><br><span class="line">jButton = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;右&quot;</span>);</span><br><span class="line">jButton1 = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;退出&quot;</span>);</span><br><span class="line">jButton2 = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//框架默认的布局方式是BorderLayout, 它将容器划分为东西南北中</span></span><br><span class="line"><span class="comment">//新版本的JDK，直接在JFrame中可以调用add(组件)来添加组件，组件将被添加到 contentPane</span></span><br><span class="line">add(jButton, BorderLayout.EAST);</span><br><span class="line">add(jButton1, BorderLayout.SOUTH);</span><br><span class="line">add(jButton2, BorderLayout.CENTER);</span><br><span class="line"><span class="built_in">this</span>.setTitle(<span class="string">&quot;JFrame&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">am</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arg[])</span>&#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">amDemo</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="2-2-JDialog"><a href="#2-2-JDialog" class="headerlink" title="2.2 JDialog"></a>2.2 JDialog</h4><p>对话框类Dialog (JDialog)的对象是有标题条而无菜单条和最小化按钮图标的容器组件，它必须依附在某个窗口上(如Frame)，一旦它所依附的窗口关闭了，对话框也自动关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">guiDemo</span> <span class="keyword">extends</span> <span class="title class_">JDialog</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮0&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">btn1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮1&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">btn2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮2&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">btn3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮3&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JButton</span> <span class="variable">btn4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮4&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">guiDemo</span><span class="params">(JFrame owner)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(owner);</span><br><span class="line">        add(btn,BorderLayout.CENTER);</span><br><span class="line">        add(btn1,BorderLayout.SOUTH);</span><br><span class="line">        add(btn2,BorderLayout.EAST);</span><br><span class="line">        add(btn3,BorderLayout.NORTH);</span><br><span class="line">        add(btn4,BorderLayout.WEST);</span><br><span class="line">        setSize(<span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">guiDemo</span>(<span class="keyword">new</span> <span class="title class_">JFrame</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-JPanel"><a href="#2-3-JPanel" class="headerlink" title="2.3 JPanel"></a>2.3 JPanel</h4><ul><li>JPanel(面板)是能在屏幕上实际显示的容器,但必须放在JWindows、JFrame、JDialog等容器中才能够显示</li><li>面板提供容纳其他组件的功能，利用面板可以把控件分组，使整个窗口的组件显得有层次，安排合理布局</li><li>面板缺省的布局方式是顺序方式(FlowLayout)，即按照从左至右、从上到下的方式布局</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.awt.*;</span><br><span class="line">import javax.swing.JFrame;</span><br><span class="line">import javax.swing.*;</span><br><span class="line">public class UsePanel extends JFrame&#123;</span><br><span class="line">public UsePanel()&#123;</span><br><span class="line">setLayout(new FlowLayout());</span><br><span class="line">JPanel panel1=new JPanel(); // 创建一个面板对象</span><br><span class="line">JPanel panel2=new JPanel();</span><br><span class="line">add(panel1); add(panel2);</span><br><span class="line">panel1.setBackground(Color.lightGray); //为能看清面板,修改面板的背景颜色</span><br><span class="line">panel2.setBackground(Color.yellow);</span><br><span class="line">panel1.add(new JButton(&quot;left&quot;));</span><br><span class="line">panel1.add(new JButton(&quot;right&quot;)); </span><br><span class="line">panel2.add(new JButton(&quot;Panel2&quot;)); </span><br><span class="line">pack(); //根据所放组件，调整窗口正好容纳各组件</span><br><span class="line">setVisible(true);</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String args[])&#123;</span><br><span class="line">UsePanel frm= new UsePanel();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-事件监听器"><a href="#3-事件监听器" class="headerlink" title="3.事件监听器"></a>3.事件监听器</h3><p>有两种办法实现：</p><p>实现监听器接口：implements XXXListener</p><p>扩展监听适配类：extends XXXAdapter</p><h4 id="3-1-事件监听器接口"><a href="#3-1-事件监听器接口" class="headerlink" title="3.1 事件监听器接口"></a>3.1 事件监听器接口</h4><table><thead><tr><th align="center">事件名称</th><th align="center">引发原因</th><th align="center">事件监听接口</th><th align="center">事件处理方法</th></tr></thead><tbody><tr><td align="center">活动事件</td><td align="center">单击按钮、选择菜单项、文本框中回车等</td><td align="center">ActionListener</td><td align="center">actionPerformed(ActionEvent e)</td></tr><tr><td align="center">文本事件</td><td align="center">文本框或文本区域内容改变</td><td align="center">TextListener</td><td align="center">textValueChanged(TextEvent e)</td></tr><tr><td align="center">选项事件</td><td align="center">改变复选框, (下拉) 列表框选中状态</td><td align="center">ItemListener</td><td align="center">itemStateChanged (ItemEvent e)</td></tr><tr><td align="center">窗口事件</td><td align="center">有关窗口的操作</td><td align="center">WindowListener</td><td align="center">有4个方法</td></tr></tbody></table><p>注册监听器：public void addXXXListener(…);</p><p>注销监听器：public void removeXXXListener(…);</p><p>处理发生在某个GUI组件上的XXXEvent事件的某种情况，其事件处理的通用编写流程如下：</p><p>（1）编写一个实现了XXXListener接口的事件监听器类</p><p>（2）在XXXListener类中用于处理该事件情况的方法中，编写处理代码</p><p>（3）调用组件的addXXXListener方法，将类XXXListener创建的实例对象注册到GUI组件上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让窗体本身来完成这个监听器，实现点击按钮将其禁用的功能</span></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line">    <span class="type">JButton</span> <span class="variable">btn1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;禁用&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           setLayout(<span class="literal">null</span>);</span><br><span class="line">           btn1.setBounds(<span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">102</span>,<span class="number">46</span>,<span class="number">104</span>,<span class="number">25</span>));</span><br><span class="line">           setSize(<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">           add(btn1,<span class="literal">null</span>);</span><br><span class="line">           btn1.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">           setVisible(<span class="literal">true</span>);</span><br><span class="line">           <span class="built_in">this</span>.setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line">       &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span>&#123;</span><br><span class="line">        btn1.setEnabled(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Main</span> <span class="variable">frm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、集合"><a href="#六、集合" class="headerlink" title="六、集合"></a>六、集合</h2><h3 id="1-Set"><a href="#1-Set" class="headerlink" title="1. Set"></a>1. Set</h3><p>Set是最简单的集合，集合中的对象不按照特定的方式排序，并且<strong>没有重复的对象</strong>。Set接口主要有两个实现类：HashSet和TreeSet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt;  set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">String  s1=<span class="keyword">new</span>  <span class="title class_">String</span>(“Hello”);</span><br><span class="line">String  s2=<span class="keyword">new</span>  <span class="title class_">String</span>(“Hello”); </span><br><span class="line">String  s3=<span class="keyword">new</span>  <span class="title class_">String</span>(“World”);</span><br><span class="line">set.add(s1);</span><br><span class="line">set.add(s2);</span><br><span class="line">set.add(s3);</span><br><span class="line">System.out.println(set.size());   <span class="comment">//对象的数目为2</span></span><br></pre></td></tr></table></figure><ul><li>HashSet会调用对象的hashCode()方法来获得哈希码，然后根据哈希码进一步计算出对象在集合中的位置。用迭代器遍历HashSet，输出结果的顺序会是散列存储的顺序</li><li>TreeSet采用树结构来存储数据，它中的每个元素成为一个节点，节点会按照其存放数据的“大小”顺序，一层一层地依次排列，对于同一层中的节点从左到右按“大小”顺序递增排列，下一层的都比上一层的小。</li><li>TreeSet支持来两种排序方式：自然排序和客户化排序。默认情况下采用自然排序。用迭代器遍历TreeSet，输出结果的顺序会是从小到大</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        ts.add(<span class="number">40</span>);</span><br><span class="line">        ts.add(<span class="number">12</span>);</span><br><span class="line">        ts.add(<span class="number">90</span>);</span><br><span class="line">        ts.add(<span class="number">2</span>);</span><br><span class="line">        ts.add(<span class="number">88</span>);</span><br><span class="line">        Iterator&lt;Integer&gt; it= ts.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*2</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">40</span></span><br><span class="line"><span class="comment">88</span></span><br><span class="line"><span class="comment">90 */</span></span><br></pre></td></tr></table></figure><h3 id="2-List"><a href="#2-List" class="headerlink" title="2. List"></a>2. List</h3><p>List的主要特征是按照元素以线性方式存储，允许集合中存放重复对象。</p><p>List接口的主要实现类包括：ArrayList和LinkedList。</p><p>ArrayList：代表长度可以变化的数组。允许对元素进行快速的随机访问，但是向ArrayList中插入与删除元素速度较慢。</p><p>LinkedList：双向链表。向LinkedList中插入和删除元素的速度较快，随机访问的速度较慢。它单独具有addFirst() 、addLast()、getFirst()、getLast()、removeFirst()、removeLast()方法。</p><p><strong>List中的对象按照索引位置排序，程序可以按照对象在集合中的索引位置来检索对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; ls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ls.add(<span class="number">12</span>);</span><br><span class="line">        ls.add(<span class="number">100</span>);</span><br><span class="line">        ls.add(<span class="number">66</span>);</span><br><span class="line">        ls.add(<span class="number">11</span>);</span><br><span class="line">        ls.add(<span class="number">88</span>);</span><br><span class="line">        <span class="comment">//用索引遍历list</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ls.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(ls.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用迭代器遍历list</span></span><br><span class="line">        Iterator&lt;Integer&gt; it = ls.listIterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Collections类是对Java集合类库中的辅助类，它提供操纵集合的各种静态方法。<br>sort(List list):对List中的对象进行自然排序。<br>sort(List list, Comparator comparator): 对List中的对象进行客户化排序， comparator参数指定排序方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; ls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ls.add(<span class="number">12</span>);</span><br><span class="line">        ls.add(<span class="number">100</span>);</span><br><span class="line">        ls.add(<span class="number">66</span>);</span><br><span class="line">        ls.add(<span class="number">11</span>);</span><br><span class="line">        ls.add(<span class="number">88</span>);</span><br><span class="line">        Collections.sort(ls); <span class="comment">//自然排序</span></span><br><span class="line">        Iterator&lt;Integer&gt; it = ls.listIterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">//11 12 66 88 100</span></span><br></pre></td></tr></table></figure><p><strong>Set和List的区别</strong></p><ul><li>Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素。</li><li>Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 &lt;实现类有HashSet,TreeSet&gt;。</li><li>List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变 &lt;实现类有ArrayList,LinkedList,Vector&gt;</li></ul><h3 id="3-Map"><a href="#3-Map" class="headerlink" title="3. Map"></a>3. Map</h3><p>集合中的每一个元素包含一对键对象和值对象，集合中没有重复的键对象，值对象可以重复</p><p>向Map集合中加入元素时，必须提供一对键对象和值对象</p><p>Map的两个主要实现类：HashMap和TreeMap</p><p>在Map中检索元素时，只要给出键对象，就会返回值对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;();</span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;Monday&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;one&quot;</span>,<span class="string">&quot;Monday&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;Tuesday&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;Wensday&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(map.get(“<span class="number">1</span><span class="string">&quot;));</span></span><br><span class="line"><span class="string">System.out.println(map.get(&quot;</span>one<span class="string">&quot;));</span></span><br></pre></td></tr></table></figure><p>HashMap按照哈希算法来存取键值对象</p><p>TreeMap实现了SortedSet接口，能够对的键对象进行排序，支持自然排序和客户化排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String,String&gt;  map=<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;String,String&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;Monday&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;Thursday&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;one&quot;</span>,<span class="string">&quot;Monday&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;Tuesday&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;Wensday&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">        Iterator&lt;String&gt; it = keys.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String key=it.next();</span><br><span class="line">            String value=map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">&quot; &quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-泛型"><a href="#4-泛型" class="headerlink" title="4. 泛型"></a>4. 泛型</h3><h4 id="4-1-泛型的使用"><a href="#4-1-泛型的使用" class="headerlink" title="4.1 泛型的使用"></a>4.1 泛型的使用</h4><p>所谓泛型，就是允许在定义类、接口、方法时使用类型形参，这个类型形参将在声明变量、创建对象、调用方法时动态地指定（即传入实际的类型参数，也可称为类型实参）</p><p>不管为泛型的类型形参传入哪一种类型实参，对于Java来说，它们依然被当成同一个类处理</p><p>由于系统中并不会真正生成泛型类，所以 instanceof 运算符后不能使用泛型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T name;</span><br><span class="line">    <span class="keyword">private</span> T age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(T name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(T age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showName</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showAge</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Main&lt;String&gt; test = <span class="keyword">new</span> <span class="title class_">Main</span>&lt;String&gt;();</span><br><span class="line">        test.setName(<span class="string">&quot;awaww&quot;</span>);</span><br><span class="line">        test.showName();</span><br><span class="line">        Main&lt;Integer&gt; test1 = <span class="keyword">new</span> <span class="title class_">Main</span>&lt;Integer&gt;();</span><br><span class="line">        test1.setAge(<span class="number">12</span>);</span><br><span class="line">        test1.showAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当创建了带泛型声明的接口、父类之后，可以为该接口创建实现类，或者从该父类派生子类，需要指出的是，当使用这些接口、父类时不能再包含类型形参，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class A1 extends Apple&lt;T&gt;  //错误</span><br><span class="line">public class A1 extends Apple&lt;String&gt;  //正确</span><br></pre></td></tr></table></figure><h2 id="七、多线程"><a href="#七、多线程" class="headerlink" title="七、多线程"></a>七、多线程</h2><h3 id="1-线程的概念"><a href="#1-线程的概念" class="headerlink" title="1. 线程的概念"></a>1. 线程的概念</h3><p>进程(Process)：程序处于执行状态就被称为进程<br>线程(Thread)：在进程中，进程可以创建并管理多个并发的执行序列，每个执行序列被称为一个独立的线程<br>关系 ：一个进程中的所有线程共享相同的地址空间和这个进程所拥有的操作系统资源</p><h3 id="2-java中支持线程的结构"><a href="#2-java中支持线程的结构" class="headerlink" title="2. java中支持线程的结构"></a>2. java中支持线程的结构</h3><p>线程是一个运行自身代码的独立控制流，在JAVA中，线程是一个继承自Thread的对象 ，或者是一个实现了Runnable接口的对象</p><h4 id="2-1-extends-Thread"><a href="#2-1-extends-Thread" class="headerlink" title="2.1 extends Thread"></a>2.1 extends Thread</h4><ul><li>线程的入口点是run()方法</li><li>Thread中有run()方法，该方法中包含了运行时执行的代码</li><li>一个类通过继承Thread类，同时重写其run()方法，该类就可以以线程的方式运行，并继承Thread类的所有方法。</li><li>只有调用start()方法，线程才开始执行</li><li>步骤：(1)写类继承Thread类  (2)写子类的构造方法  (3)写子类的run()方法(包含这个线程主要执行的代码)   (4)主函数内新建子类，调用子类的start()方法开始执行线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvenOdd</span> <span class="keyword">extends</span> <span class="title class_">Thread</span></span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> i0;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> m;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvenOdd</span><span class="params">(<span class="type">int</span> first ,<span class="type">int</span> order)</span></span><br><span class="line">    &#123;  </span><br><span class="line">        i0 = first;</span><br><span class="line">        m=order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> i0; i &lt;= <span class="number">100</span>; i += <span class="number">2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;in the &quot;</span>+m+<span class="string">&quot;thread :&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">EvenOdd</span> <span class="variable">ot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvenOdd</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">EvenOdd</span> <span class="variable">et</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvenOdd</span>(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        ot.start();</span><br><span class="line">        et.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;Main thread done&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-implements-Runnable"><a href="#2-2-implements-Runnable" class="headerlink" title="2.2 implements Runnable"></a>2.2 implements Runnable</h4><ul><li>多线程机制的另一种方式是实现Runnable接口。此接口只有一个方法run()</li><li>一个类实现Runnable接口时都需要在类中实现run()方法，该run()方法完成由特定线程所完成的功能</li><li>步骤：(1)写类实现Runnable接口  (2)写类的构造方法  (3)写run()方法  (4)主函数内新建实现Runnable接口的类，将其作为初始化参数新建Thread类，执行Thread类对象的start()方法开始执行线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvenOdd</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span></span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> i0;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> m;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvenOdd</span><span class="params">(<span class="type">int</span> first ,<span class="type">int</span> order)</span></span><br><span class="line">    &#123;</span><br><span class="line">        i0 = first;</span><br><span class="line">        m=order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> i0; i &lt;= <span class="number">100</span>; i += <span class="number">2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;in the &quot;</span>+m+<span class="string">&quot;thread :&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">EvenOdd</span> <span class="variable">ot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvenOdd</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">EvenOdd</span> <span class="variable">et</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvenOdd</span>(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ot); <span class="comment">//Thread th1 = new Thread(new EvenOdd(1,1));</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(et); <span class="comment">//Thread th2 = new Thread(new EvenOdd(0,2));</span></span><br><span class="line">        th1.start();</span><br><span class="line">        th2.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;Main thread done&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Thread类"><a href="#3-Thread类" class="headerlink" title="3. Thread类"></a>3. Thread类</h3><h4 id="3-1-Thread-yield-方法"><a href="#3-1-Thread-yield-方法" class="headerlink" title="3.1 Thread.yield()方法"></a>3.1 Thread.yield()方法</h4><p>执行该方法，线程会让出当前执行的状态，进入就绪状态，重新开始竞争</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EvenOdd</span> <span class="keyword">extends</span> <span class="title class_">Thread</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> order;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvenOdd</span><span class="params">(<span class="type">int</span> order)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.order=order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt;= <span class="number">10</span>; i += <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(order==<span class="number">1</span>&amp;&amp;i==<span class="number">4</span>) Thread.<span class="keyword">yield</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;in the &quot;</span>+order+<span class="string">&quot;thread :&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">EvenOdd</span> <span class="variable">ot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvenOdd</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="type">EvenOdd</span> <span class="variable">et</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvenOdd</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//ot.setPriority(Thread.MAX_PRIORITY);</span></span><br><span class="line">    <span class="comment">//et.setPriority(Thread.MIN_PRIORITY);</span></span><br><span class="line">    ot.start();</span><br><span class="line">   et.start();</span><br><span class="line">    System.out.println(<span class="string">&quot;Main thread done&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-Thread-join-方法"><a href="#3-2-Thread-join-方法" class="headerlink" title="3.2 Thread.join()方法"></a>3.2 Thread.join()方法</h4><p>挂起当前线程，让其他线程执行，进入阻塞状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EvenOdd</span> <span class="keyword">extends</span> <span class="title class_">Thread</span></span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> order;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvenOdd</span><span class="params">(<span class="type">int</span> order)</span></span><br><span class="line">    &#123; <span class="built_in">this</span>.order=order;  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt;= <span class="number">10</span>; i += <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;in the &quot;</span>+order+<span class="string">&quot;thread :&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;   </span><br><span class="line">        <span class="type">EvenOdd</span> <span class="variable">ot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvenOdd</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="type">EvenOdd</span> <span class="variable">et</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvenOdd</span>(<span class="number">2</span>);</span><br><span class="line">    ot.start();</span><br><span class="line">    et.start();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before ot.join&quot;</span>);</span><br><span class="line">       ot.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;before et.join&quot;</span>);</span><br><span class="line">        et.join();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace(); &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;Main thread done&quot;</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-3-设置后台线程"><a href="#3-3-设置后台线程" class="headerlink" title="3.3 设置后台线程"></a>3.3 设置后台线程</h4><p>如果我们对某个线程对象在启动（调用start方法）之前调用setDaemon(true)方法，这个线程就变成了后台线程，后台线程运行不输出</p><h3 id="4-同步"><a href="#4-同步" class="headerlink" title="4. 同步"></a>4. 同步</h3><h4 id="4-1-互斥"><a href="#4-1-互斥" class="headerlink" title="4.1 互斥"></a>4.1 互斥</h4><p>在同一时刻只有一个线程可以操作共享资源</p><p>共享资源＆作用于其上的操作可以被封装在一个互斥对象里</p><p>Java线程中的互斥——在线程里，我们用 synchronized 来描述互斥对象中的互斥方法。</p><p>监视器——Java中每个对象都包含了一把锁（也叫监视器），它自动成为对象的一部分.而监视器是与synchronized 关键字相关联的。调用任何synchronized方法时，对象就会被锁定，其他任何synchronized方法不可调用该对象，只有方法区被解锁时，他们才可以访问它。</p><h4 id="4-2-协作"><a href="#4-2-协作" class="headerlink" title="4.2 协作"></a>4.2 协作</h4><h2 id="八、输入输出流"><a href="#八、输入输出流" class="headerlink" title="八、输入输出流"></a>八、输入输出流</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>数据流：是指在计算机的输入输出之间运动的数据序列。<br>数据流是指所有的数据通信通道<br>在java中有关流的操作使用 java.io.*</p><p>缓存：相对内存较大的内存区域，用于数据进行输入或输出的临时存储。当使用了缓存之后，程序将不再从相对较慢的输入输出设备一个字节一个字节的读出或写入一个字节，而是把大量字节移到缓存中，然后再通过缓存实现与程序的输入输出操作</p><h4 id="1-1-输入输出类"><a href="#1-1-输入输出类" class="headerlink" title="1.1 输入输出类"></a>1.1 输入输出类</h4><p>输入输出是相对程序来说的，程序扮演两个角色：源和目的。</p><p>输入流：代表从外设流入程序的数据序列</p><p>输出流：代表从程序流向外设的数据序列</p><p>字节流：在输入输出过程中以字节为单位</p><p>字符流：在输入输出过程中以字符为单位</p><p><strong>InputStream类的常用方法</strong><br>int read()<br><strong>int read(byte[] b)</strong><br>int read(byte[] b,int off,int len)<br>long skip(long n)<br>void reset()<br>void close()</p><p><strong>OutputStream类的常用方法</strong><br>void write(int b)<br><strong>void write(byte b[])</strong><br>void write(byte b[],int off,int len)<br>void flush()<br>void close()</p><p><strong>Reader类的常用方法</strong><br>int read()<br><strong>int read(char[] ch)</strong><br>int read(char[] b,int off,int len)<br>long skip(long n)<br>void reset()<br>void close()</p><p><strong>Writer类的常用方法</strong><br>void write(int c)<br><strong>void write(char[] ch)</strong><br>void write(char[] ch,int off,int len)<br>void write(String s)<br>void flush()<br>void close()</p><h4 id="1-2-标准输入输出"><a href="#1-2-标准输入输出" class="headerlink" title="1.2 标准输入输出"></a>1.2 标准输入输出</h4><p>System类提供了访问标准输入&#x2F;输出设备的功能。System类有3个类变量：<br>标准输入<br>public static final InputStream in<br>标准输出<br>public static final PrintStream out<br>标准错误输出：<br>public static final PrintStream err</p><h3 id="2-字节输入输出"><a href="#2-字节输入输出" class="headerlink" title="2.字节输入输出"></a>2.字节输入输出</h3><h4 id="2-1-文件输入-输出字节流-FileInputStream-FileOutputStream"><a href="#2-1-文件输入-输出字节流-FileInputStream-FileOutputStream" class="headerlink" title="2.1 文件输入&#x2F;输出字节流 FileInputStream&#x2F;FileOutputStream"></a>2.1 文件输入&#x2F;输出字节流 FileInputStream&#x2F;FileOutputStream</h4><p>（1）创建输入流</p><p>##FileInputStream(String name)  name用文件名<br>FileInputStream fis &#x3D; new FileInputStream(“c:&#x2F;data.txt”);</p><p>##FileInputStream(File file)  file用文件对象<br>File myfile &#x3D; new File(“c:&#x2F;data.txt”);<br>FileInputStream fis &#x3D; new FileInputStream(myfile);</p><p>（2）读取文件信息</p><p>int read( )：从输入流中读取一个字节，返回字节值<br>int read(byte[ ] b)：从输入流中读取，写入b。返回实际读取字节数<br>int read(byte[ ] b, int off, int len)：从输入流中读取len个数据，写入b，从索引off开始。返回实际读取字节数</p><p>##用FileInputStream读取文件，并把文件内容屏幕显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="type">byte</span> buf[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">25</span>];  <span class="comment">//字节流的存储需要字节数组byte[]</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\data.txt&quot;</span>);</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            <span class="keyword">while</span>((b=in.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buf,<span class="number">0</span>,b);</span><br><span class="line">                System.out.print(s);</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;File read Error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）创建输出流</p><p>##FileOutputStream(String name)  用文件名name创建流对象<br>FileOutputStream fos &#x3D; new FileOutStream(“c:&#x2F;dataout.txt”);</p><p>##FileOutputStream(File file)  使用文件对象file创建流对象<br>File f &#x3D; new File(“c:&#x2F;dataout.txt”);<br>FileOutputStream fos &#x3D; new FileOutputStream(f);</p><p>（4）向输出流写信息</p><p>void write(int b)：将指定的整型数据b的低字节写入输出流。<br>void write(byte[] b)：把字节数组b中的数据写入输出流。<br>void write(byte[] b,int off,int len)：把字节数组b中从off开始的len个字节写入输出流。</p><p>（5）关闭流</p><p>显示关闭流对象：close();</p><p>隐式关闭流对象：Java有自动垃圾收集系统，可以自动进行资源的回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="type">byte</span> buffer[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;input one line words&quot;</span>);</span><br><span class="line">            b = System.in.read(buffer);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">writefile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\data.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">            writefile.write(buffer);</span><br><span class="line">            <span class="comment">//writefile.close();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-过滤流-DataInputStream-DataOutputStream"><a href="#2-2-过滤流-DataInputStream-DataOutputStream" class="headerlink" title="2.2 过滤流 DataInputStream&#x2F;DataOutputStream"></a>2.2 过滤流 DataInputStream&#x2F;DataOutputStream</h4><p><strong>字节流FileInputStream类和FileOutputStream类</strong>只提供纯字节或字节数组的输入&#x2F;输出。如果要进行特殊数据的输入&#x2F;输出，如基本数据类型的输入&#x2F;输出，则要通过过滤流FilterInputStream类和FilterOutputStream类中的各种子类。过滤流提供了同步机制，即某一时刻只有一个程序段访问输入&#x2F;输出流</p><p>构造方法：<br>DataInputStream(InputStream in)<br>DataOutputStream(OutputStream out)<br>必须和一个输入类或输出类的对象联系起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(“test.txt<span class="string">&quot;);</span></span><br><span class="line"><span class="string">DataOutputStream out_data=new DataOutputStream(fos);</span></span><br><span class="line"><span class="string">out_data.writeInt(100);</span></span><br><span class="line"><span class="string">Out_data.writeDouble(123.4322);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">FileInputStream fis=new FileInputStream(“test.txt&quot;</span>);</span><br><span class="line">DataInputStream in_data=<span class="keyword">new</span> <span class="title class_">DataInputStream</span>(fis);</span><br><span class="line">System.out.println(in_data.readInt());</span><br><span class="line">System.out.println(in_data.readDouble());</span><br></pre></td></tr></table></figure><h3 id="3-字符输入-输出流"><a href="#3-字符输入-输出流" class="headerlink" title="3.字符输入&#x2F;输出流"></a>3.字符输入&#x2F;输出流</h3><p>InputStreamReader&#x2F; OutputStreamWriter</p><p>FileReader&#x2F; FileWriter</p><p>BufferedReader&#x2F; BufferedWriter</p><h4 id="3-1-输入-输出字符流-InputStreamReader-OutputStreamReader"><a href="#3-1-输入-输出字符流-InputStreamReader-OutputStreamReader" class="headerlink" title="3.1 输入&#x2F;输出字符流 InputStreamReader&#x2F;OutputStreamReader"></a>3.1 输入&#x2F;输出字符流 InputStreamReader&#x2F;OutputStreamReader</h4><p>以字节方式表示的流转换为特定平台上的字符表示的流<br>InputStreamReader(InputStream in)<br>InputStreamReader(InputStream in,String enc)<br>OutputStreamWriter(OutputStream out)<br>OutputStreamWriter(OutputStream out,String enc)<br>read()  write() close()<br>String getEncoding()</p><h4 id="3-2-文件输入输出字符流-FileReader-FileWriter"><a href="#3-2-文件输入输出字符流-FileReader-FileWriter" class="headerlink" title="3.2 文件输入输出字符流 FileReader&#x2F;FileWriter"></a>3.2 文件输入输出字符流 FileReader&#x2F;FileWriter</h4><p>FileReader和FileWriter构造方法各有两种。<br>FileReader(File f)    FileReader(String fn)<br>FileWriter(File f)     FileWriter(String fn)<br>常用方法：<br>read();    read(char[] buffer);<br>write(String str);    write(char[] buffer);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileWriterTest</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">String s=</span><br><span class="line">                            <span class="string">&quot;How do you do!\r\n I like Java!\r\n&quot;</span>;</span><br><span class="line">FileWriter fw;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">fw=<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">String code=fw.getEncoding();</span><br><span class="line">fw.write(s);</span><br><span class="line">fw.write(code);</span><br><span class="line">fw.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-缓冲字符流-BufferedReader-BufferedWriter"><a href="#3-3-缓冲字符流-BufferedReader-BufferedWriter" class="headerlink" title="3.3 缓冲字符流 BufferedReader&#x2F;BufferedWriter"></a>3.3 缓冲字符流 BufferedReader&#x2F;BufferedWriter</h4><p>BufferedReader、BufferedWriter<br>在基础字符流的基础上建立一个缓冲区，来提高字符流处理的效率<br>BufferedReader(Reader in)<br>BufferedWriter(Writer out)<br>read()、write()<br>readLine()、newLine()</p><h4 id="3-4-打印输出字符流-PrintWriter"><a href="#3-4-打印输出字符流-PrintWriter" class="headerlink" title="3.4 打印输出字符流 PrintWriter"></a>3.4 打印输出字符流 PrintWriter</h4><p>PrintWriter：基于字节流或字符流创建，可直接将java的基本类型转换成字符串输出<br>构造方法：<br>PrintWriter(OutputStream out)<br>PrintWriter(Writer out)<br>PrintWriter(File file)<br>PrintWriter(String fileName)</p><h4 id="3-5-对象的串行化-Serializable"><a href="#3-5-对象的串行化-Serializable" class="headerlink" title="3.5 对象的串行化 Serializable"></a>3.5 对象的串行化 Serializable</h4><p>串行化&#x2F;序列化：<br>创建的对象一般情况下，随着生成该对象的程序的终止而结束。但是，有时候我们需要将对象的状态保存下来，在需要时将其对象恢复。这种对象能记录自己状态以便将来再恢复的能力称为对象的持续性(Persistence)<br>对象通过写出描述自己状态的数值来记录自己，这个过程叫对象的序列化</p><p>主要应用：一个对象被存放到磁盘上，或者发送到另外一台机器并存放到存储器或磁盘上。</p><p>说明：<br>(1)定义对象时，实现了Serializable接口，即该对象可序列化<br>(2)有些对象的数据是不断改变的，如FileInputStream、FileOutputStream、Thread类，因此，不能序列化操作<br>(3)如果串行化对象的某个字段不需要永久保存，则可用transient关键字修饰</p><p><strong>串行化的方法</strong></p><p>读取对象信息：ObjectInputStream类readObject()<br>读取对象信息到输出流：ObjectOutputStream类writeObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bag</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"> Color color;</span><br><span class="line"> String price;</span><br><span class="line"> <span class="type">int</span> size;</span><br><span class="line"> String type;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Bag</span><span class="params">(Color c,String p,<span class="type">int</span> s,String t)</span>&#123;</span><br><span class="line">color=c; price=p;size=s; type=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BagSerial</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">       Bag bag=<span class="keyword">new</span> <span class="title class_">Bag</span>(Color.red,<span class="string">&quot;57&quot;</span>,<span class="number">18</span>,<span class="string">&quot;student bag&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">             FileOutputStream fileO=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;info.txt&quot;</span>);</span><br><span class="line">             ObjectOutputStream OS=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileO);  OS.writeObject(bag);</span><br><span class="line">  OS.close();</span><br><span class="line">       &#125;<span class="keyword">catch</span>(IOException e)&#123;System.out.println(e); &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">  FileInputStream fileI=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;info.txt&quot;</span>);</span><br><span class="line"> ObjectInputStream IS=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileI);  </span><br><span class="line">         bag=(Bag)IS.readObject();</span><br><span class="line">   IS.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;System.out.println(e);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ClassNotFoundException e)&#123;System.out.println(e); &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;size:&quot;</span>+bag.size);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-流的包装"><a href="#3-6-流的包装" class="headerlink" title="3.6 流的包装"></a>3.6 流的包装</h4><p>基本数据转换流</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分组密码学习</title>
      <link href="/posts/61901517.html"/>
      <url>/posts/61901517.html</url>
      
        <content type="html"><![CDATA[<h1 id="分组密码学习"><a href="#分组密码学习" class="headerlink" title="分组密码学习"></a>分组密码学习</h1><h2 id="一、DES加密"><a href="#一、DES加密" class="headerlink" title="一、DES加密"></a>一、DES加密</h2><p>参考视频：【DES加密算法课程】 <a href="https://www.bilibili.com/video/BV1134y1Y71j/?p=4&share_source=copy_web&vd_source=b46cad7e7705274b9d25b68fa1f31366">https://www.bilibili.com/video/BV1134y1Y71j/?p=4&amp;share_source=copy_web&amp;vd_source=b46cad7e7705274b9d25b68fa1f31366</a></p><h3 id="1-加密过程"><a href="#1-加密过程" class="headerlink" title="1. 加密过程"></a>1. 加密过程</h3><p>大致流程：64bit明文先IP置换（固定的IP置换盒处理），分左右两半各32bit，进行16轮迭代加密，最后IP逆置换得到64bit密文</p><p><strong>IP置换：</strong></p><p>根据置换盒中对应元素告知的位置信息进行置换</p><p><img src="/images/desandaes/des_ipbox.png"></p><p>初始置换IP，未加密的64bit，将第58位放到第1位，……，第1位放到第40位，……</p><p>逆置换IP^-1，已加密的64bit，将第40位放到第1位，……，第1位放到第58位，……</p><p>####例如####</p><p>原明文（9bit为例）                      IP置换盒                            置换结果</p><p>​     0    1    0                                    8    6    2                             1    0    1</p><p>​     0    1    0                                    1    9    3                             0    1    0</p><p>​     1    1    1                                    4    7    5                             0    1    1</p><p>第一个bit，对应置换盒元素8，说明把第8位放到该位，以此类推得到置换结果</p><p><strong>迭代加密：</strong></p><p>(1) E盒扩展 32bit–&gt;48bit</p><p>(2) 与K异或 48bit–&gt;48bit</p><p>(3) <strong>S盒压缩</strong> 48bit–&gt;32bit</p><p>(4) P盒置换 32bit–&gt;32bit  <em>与ip置换相似</em></p><h4 id="1-1-E盒扩展"><a href="#1-1-E盒扩展" class="headerlink" title="1.1 E盒扩展"></a>1.1 E盒扩展</h4><p>左右两半各32bit，对右半部分进行E盒扩展，使其变为48bit</p><p>32bit每4bit一组，共8组，对每组首尾各扩充一位，共扩充16bit</p><p>每组扩充的首位与 <strong>上一组原末位</strong> 相同 （如果该组是第一组，看最后一组的原末位）</p><p>每组扩充的末位与 <strong>下一组原首位</strong> 相同 （如果该组是最后一组，看第一组的原首位）</p><p>####例如####</p><p>1011 0010 0101 1001 0110 1111 1100 0111 </p><p>第一组扩充：  1 1011 0</p><p>第二组扩充：  1 0010 0</p><p>第三组扩充：  0 0101 1</p><p>第四组扩充：  1 1001 0</p><p>第五组扩充：  1 0110 1</p><p>第六组扩充：  0 1111 1</p><p>第七组扩充：  1 1100 0</p><p>第八组扩充：  0 0111 1</p><p>扩充完成的48bit：110110 100100 001011 110010 101101 011111 111000 001111</p><h4 id="1-2-与K异或"><a href="#1-2-与K异或" class="headerlink" title="1.2 与K异或"></a>1.2 与K异或</h4><p>DES密钥64bit，其中有8位是校验位，剩余56bit每一轮中通过变换得到48bit的密钥K和扩充后的48bit异或</p><p><strong>子密钥的生成过程：</strong></p><p>64bit种子密钥，进入PC-1盒（置换选择器1）（8×7置换表），丢掉8bit校验位（分别是第8&#x2F;16&#x2F;24&#x2F;32&#x2F;40&#x2F;48&#x2F;56&#x2F;64位），选择出剩余的56bit，之后进行置换（类似IP置换）</p><p>置换完成的56bit左右对半分，分别按照规定的左移表进行左移</p><p>####例如####</p><p> i是加密轮数，x是要左移的位数，一张左移表如下：</p><table><thead><tr><th align="center">i</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th><th align="center">12</th><th align="center">13</th><th align="center">14</th><th align="center">15</th><th align="center">16</th></tr></thead><tbody><tr><td align="center">x</td><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">1</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">1</td></tr></tbody></table><p>假设现在是<strong>第一轮</strong>：</p><p>原左半C    0101000 1100111 0110100 0110111</p><p>左移之后  1010001 1001110 1101000 1101110   注意末位是原来的首位</p><p>原右半D   1011011 0010110 1011101 0011011</p><p>左移之后  0110110 0101101 0111010 0110111</p><p>左移之后拼接整合起来，此时还是56bit，进入PC-2（置换选择器2）（8×6置换表），选择并丢掉第9&#x2F;18&#x2F;22&#x2F;25&#x2F;35&#x2F;38&#x2F;43&#x2F;54位，之后按照置换表进行置换，输出48bit密钥<strong>K1</strong></p><p>但是之后的迭代加密仍然需要密钥Ki，所以在第一轮左移之后会进行复制，复制的一份下去完成第一轮密钥K1的生成，另一份回到左移的步骤，根据下一轮次的位移x再次左移生成新密钥K2，以此类推直到生成16个密钥</p><h4 id="1-3-S盒压缩"><a href="#1-3-S盒压缩" class="headerlink" title="1.3 S盒压缩"></a>1.3 S盒压缩</h4><p>异或之后得到48bit输出，均分成8组，每组6bit</p><p>S盒有8张表（固定），每张表对应一组，每张表有<strong>4行16列</strong></p><p>每组的6bit，首尾两位组成的二进制数对应表中的行数，中间四位组成的二进制数对应列数</p><p>定位表中元素，将该元素转二进制，得到压缩之后的4bit</p><p>每组如此操作，得到32bit的压缩结果</p><p>####例如####</p><p>异或得到的组一：011110，那么应该对应表1中第0行第f列元素2    011110 –&gt; 2 –转二进制 –&gt; 0010</p><p>如果组一为 110010，则对应表中第2行第9列元素b(11)    110010 –&gt; 11 –&gt; 1011</p><table><thead><tr><th align="center">表1</th><th align="center">0</th><th>1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">d</th><th align="center">e</th><th align="center">f</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">7</td><td>3</td><td align="center">8</td><td align="center">0</td><td align="center">6</td><td align="center">9</td><td align="center">a</td><td align="center">1</td><td align="center">b</td><td align="center">c</td><td align="center">4</td><td align="center">e</td><td align="center">5</td><td align="center">f</td><td align="center">d</td><td align="center">2</td></tr><tr><td align="center">1</td><td align="center">a</td><td>0</td><td align="center">3</td><td align="center">b</td><td align="center">8</td><td align="center">1</td><td align="center">4</td><td align="center">9</td><td align="center">2</td><td align="center">f</td><td align="center">5</td><td align="center">6</td><td align="center">e</td><td align="center">c</td><td align="center">7</td><td align="center">d</td></tr><tr><td align="center">2</td><td align="center">f</td><td>c</td><td align="center">8</td><td align="center">2</td><td align="center">4</td><td align="center">9</td><td align="center">1</td><td align="center">7</td><td align="center">5</td><td align="center">b</td><td align="center">3</td><td align="center">e</td><td align="center">a</td><td align="center">0</td><td align="center">6</td><td align="center">d</td></tr><tr><td align="center">3</td><td align="center">8</td><td>b</td><td align="center">1</td><td align="center">4</td><td align="center">a</td><td align="center">0</td><td align="center">9</td><td align="center">2</td><td align="center">e</td><td align="center">3</td><td align="center">d</td><td align="center">7</td><td align="center">f</td><td align="center">5</td><td align="center">c</td><td align="center">6</td></tr></tbody></table><h4 id="1-4-P盒置换"><a href="#1-4-P盒置换" class="headerlink" title="1.4 P盒置换"></a>1.4 P盒置换</h4><p>和IP置换类似，最后仍然是32bit，这里不再额外说明</p><h4 id="1-5-进入下一轮迭代加密"><a href="#1-5-进入下一轮迭代加密" class="headerlink" title="1.5 进入下一轮迭代加密"></a>1.5 进入下一轮迭代加密</h4><p>P盒置换完成后，右半的32bit异或左半32bit，得到最终的右半32bit</p><p>将左右两半交换，进入下一轮迭代，继续处理右半（上一轮的左半）32bit</p><p><img src="/images/desandaes/des_image.png"></p><h4 id="1-6-IP逆置换"><a href="#1-6-IP逆置换" class="headerlink" title="1.6 IP逆置换"></a>1.6 IP逆置换</h4><p>和IP置换相同，也是根据置换表进行置换，得到最终的密文</p><h2 id="二、AES加密"><a href="#二、AES加密" class="headerlink" title="二、AES加密"></a>二、AES加密</h2><p>参考视频：【【AES加密算法】| AES加密过程详解| 对称加密| Rijndael-128| 密码学| 信息安全】 <a href="https://www.bilibili.com/video/BV1i341187fK/?share_source=copy_web&vd_source=b46cad7e7705274b9d25b68fa1f31366">https://www.bilibili.com/video/BV1i341187fK/?share_source=copy_web&amp;vd_source=b46cad7e7705274b9d25b68fa1f31366</a></p><p>明文固定长度128bit，密钥长度可以是128&#x2F;192&#x2F;256bit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入的字节顺序：</span><br><span class="line">1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</span><br><span class="line">==&gt;</span><br><span class="line">1  5   9  13</span><br><span class="line"></span><br><span class="line">2  6  10  14</span><br><span class="line"></span><br><span class="line">3  7  11  15</span><br><span class="line"></span><br><span class="line">4  8  12  16</span><br></pre></td></tr></table></figure><h3 id="1-加密过程-1"><a href="#1-加密过程-1" class="headerlink" title="1. 加密过程"></a>1. 加密过程</h3><p>整体流程：明文经过初始变换，再经过9轮循环运算和1轮最终轮，得到密文</p><p>循环运算包括：字节代换、行移位、列混合、轮密钥加</p><p>最终轮和前9轮循环运算相同，只是不进行列混合</p><p><img src="/images/desandaes/aesprogress.png"></p><h4 id="1-1-初始变换"><a href="#1-1-初始变换" class="headerlink" title="1.1 初始变换"></a>1.1 初始变换</h4><p>将16B（128bit）的明文以4×4B形式输入，与M字节密钥按字节异或，得到的结果就是初始变换后的矩阵，这个过程就叫初始变换</p><h4 id="1-2-字节代换"><a href="#1-2-字节代换" class="headerlink" title="1.2 字节代换"></a>1.2 字节代换</h4><p>对照S-BOX进行字节代换</p><p><img src="/images/desandaes/aessub.png"></p><p>初始变换得到的字节矩阵，每一个元素都是一个字节，8bit，可以表示成两个十六进制数</p><p>19查找S-BOX中第1行第9列元素f0</p><p>3d查找S-BOX中第3行第d列元素27</p><p>以此类推进行代换</p><h4 id="1-3-行移位"><a href="#1-3-行移位" class="headerlink" title="1.3 行移位"></a>1.3 行移位</h4><p>对字节变换完成的4×4B矩阵进行行移位（循环移动）</p><p>第一行保持不变，第二行向左移动1个字节，第三行向左移动2个字节，第四行向左移动3个字节</p><p>####例如####</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">       输入数据                                                             输出结果</span><br><span class="line"></span><br><span class="line">p1    p5    p9    p13                                               p1    p5    p9    p13</span><br><span class="line"></span><br><span class="line">p2    p6    p10   p14                    ========&gt;                  p6    p10   p14   p2</span><br><span class="line"></span><br><span class="line">p3    p7    p11   p15                                               p11   p15   p3    p7</span><br><span class="line"></span><br><span class="line">p4    p8    p12   p16                                               p16   p4    p8    p12</span><br></pre></td></tr></table></figure><h4 id="1-4-列混合"><a href="#1-4-列混合" class="headerlink" title="1.4 列混合"></a>1.4 列混合</h4><p>将输入的4×4矩阵左乘一个给定的4×4矩阵</p><p>给定的矩阵为：</p><p>0x02  0x03  0x01  0x01</p><p>0x01  0x02  0x03  0x01</p><p>0x01  0x01  0x02  0x03</p><p>0x03  0x01  0x01  0x02</p><p><img src="/images/desandaes/AES_mix.png"></p><p><img src="/images/desandaes/AES_mix2.png"></p><h4 id="1-5-轮密钥加"><a href="#1-5-轮密钥加" class="headerlink" title="1.5 轮密钥加"></a>1.5 轮密钥加</h4><p>列混合得到的矩阵和一个<strong>轮密钥矩阵</strong>每列按字节异或</p><p>子密钥扩展得到十轮的轮密钥矩阵</p><p><strong>密钥扩展：</strong></p><p>i是从0开始的列数，W[i]表示第i列</p><p>(1) 如果i不是4的倍数，那么第i列由如下等式确定：</p><p>W[i]&#x3D;W[i-4]异或W[i-1]</p><p>(2) 如果i是4的倍数，那么</p><p>W[i]&#x3D;W[i-4]异或T(W[i-1])</p><p>T函数由三部分组成：字循环、字节代换和轮常量异或</p><p>(a) 字循环</p><p>将1个字中的4个字节循环左移1一个字节</p><p>例如要算W[4]：W[4]&#x3D;W[0]异或T(W[3])</p><p>T函数处理W[3]的第一步就是将列W[3]循环左移1一个字节</p><p>09 cf 4f 3c  &#x3D;&#x3D;&#x3D;&#x3D;&gt;   cf 4f 3c 09</p><p><img src="/images/desandaes/AES_a.png"></p><p>(b) 字节代换</p><p>对字循环的结果使用S盒进行字节代换</p><p>(c) 轮常量异或</p><p>将前两步的结果和轮常量Rcon[j]进行异或，其中j表示轮数，得到T(W[i-1])</p><p><img src="/images/desandaes/AES_c.png"></p><p>最后将W[i-4]和T(W[i-1])异或得到W[i]</p><p>以此类推得到十轮的轮密钥</p><p>经过9轮循环运算和1轮最终轮，得到密文</p>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网信柏鹭2023 Crypto</title>
      <link href="/posts/ad815250.html"/>
      <url>/posts/ad815250.html</url>
      
        <content type="html"><![CDATA[<h1 id="网信柏鹭2023-Crypto"><a href="#网信柏鹭2023-Crypto" class="headerlink" title="网信柏鹭2023 Crypto"></a>网信柏鹭2023 Crypto</h1><h2 id="fractrsa"><a href="#fractrsa" class="headerlink" title="fractrsa"></a>fractrsa</h2><p>解摩斯电码拿到压缩包密码，解压得到rsa题目如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span>  secret <span class="keyword">import</span> flag1 <span class="keyword">as</span> flag</span><br><span class="line"></span><br><span class="line">num1 = <span class="number">3</span></span><br><span class="line">num2 = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span>(num1&lt;num2):</span><br><span class="line">    num1 = getPrime(<span class="number">512</span>)</span><br><span class="line">    num2 = getPrime(<span class="number">512</span>)</span><br><span class="line">pt = bytes_to_long(flag) + num2</span><br><span class="line"></span><br><span class="line">ring = RealField(<span class="number">1100</span>)</span><br><span class="line">num3 = ring(num1) / ring(num2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num3 = &quot;</span>, num3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = randint(<span class="number">2</span>**<span class="number">511</span>, num1)</span><br><span class="line">    q = randint(<span class="number">2</span>**<span class="number">511</span>, num2)</span><br><span class="line">    <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q) <span class="keyword">and</span> p!=q:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">N = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">leak = <span class="built_in">pow</span>(p-q, num1, num1*num2)</span><br><span class="line">ct = <span class="built_in">pow</span>(pt, e, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ct = &quot;</span>, ct)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N = &quot;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak = &quot;</span>, leak)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">num3 = 1.23389923415003373900567515471436168841941584796842188964423737295914869304653496800649965063081353720701415762591488370228399019899893688681309320356016722276295236528757306976510687729729934668311830828756908988350841843676900575414367123810470585198055372776278588638204471298838884740198056387082949710435502826460830711429956</span></span><br><span class="line"><span class="string">ct = 31011170589632318837149853165664224847925206003567781692767655474759523146503572164952138829336342836023903919700264739071138739105931471740973631326608186969523753119546323993892359278563753903149741128282349467136720827132122619177620866305659196267641453819504766216964516467658995724859657544518337771393</span></span><br><span class="line"><span class="string">N = 61860727516406742636690805639158184396057779906729165734489212939937929906456706343476469874085504076991779041906401043694401076841639925611957258119417559980829238154105119701407722069260962772947894516879731956778127512764229384957918619863998939985369399189275568362193066167855420897196095587732512368673</span></span><br><span class="line"><span class="string">leak = 23213363443983005040318061737977092634638640953366787443691593387275645092922646169818923792205696350020369122807136306157118385984272980615310163206933078119776935167207473544453080959202803743994251355133953187110546017667004996272367137522351606700447920805532616096125523674597551449412004735397779511371</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>和2023安洵杯signin题类似，连分数攻击找出num1和num2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line">num3=<span class="number">1.23389923415003373900567515471436168841941584796842188964423737295914869304653496800649965063081353720701415762591488370228399019899893688681309320356016722276295236528757306976510687729729934668311830828756908988350841843676900575414367123810470585198055372776278588638204471298838884740198056387082949710435502826460830711429956</span></span><br><span class="line"></span><br><span class="line">c = continued_fraction(num3)</span><br><span class="line">alist = c.convergents()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alist:</span><br><span class="line">    a = <span class="built_in">str</span>(i).split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a)&gt;<span class="number">1</span> <span class="keyword">and</span> gcd(<span class="built_in">int</span>(a[<span class="number">0</span>]),<span class="built_in">int</span>(a[<span class="number">1</span>])) == <span class="number">1</span> <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">0</span>])) <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">1</span>])) <span class="keyword">and</span> <span class="built_in">int</span>(a[<span class="number">0</span>]).bit_length()==<span class="number">512</span> <span class="keyword">and</span> <span class="built_in">int</span>(a[<span class="number">1</span>]).bit_length()==<span class="number">512</span>:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#[&#x27;11167377337790397338811417806698264734026040696284907854286100186126887838302430726803014418419121360514985339992064951270502853852777225947659429837569693&#x27;, &#x27;9050477566333038464101590216458863799039754468566791821195736389139213194857548339787600682491327798736538059818887575696704421576721592454156775006222517&#x27;]</span></span><br></pre></td></tr></table></figure><p>接下来求p和q，根据数论知识，</p><p>leak &#x3D;&#x3D; (p-q) ^ num1 (mod num1*num2)</p><p>leak &#x3D;&#x3D; (p-q) ^ num1 (mod num1) &#x3D;&#x3D;p-q (mod num1)</p><p>所以 leak&#x3D;p-q (mod num1)</p><p>知道了p*q和p-q就可以列方程解出p和q，之后常规解rsa得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">data3 = <span class="number">1.23389923415003373900567515471436168841941584796842188964423737295914869304653496800649965063081353720701415762591488370228399019899893688681309320356016722276295236528757306976510687729729934668311830828756908988350841843676900575414367123810470585198055372776278588638204471298838884740198056387082949710435502826460830711429956</span></span><br><span class="line">c = <span class="number">31011170589632318837149853165664224847925206003567781692767655474759523146503572164952138829336342836023903919700264739071138739105931471740973631326608186969523753119546323993892359278563753903149741128282349467136720827132122619177620866305659196267641453819504766216964516467658995724859657544518337771393</span></span><br><span class="line"></span><br><span class="line">leak = <span class="number">23213363443983005040318061737977092634638640953366787443691593387275645092922646169818923792205696350020369122807136306157118385984272980615310163206933078119776935167207473544453080959202803743994251355133953187110546017667004996272367137522351606700447920805532616096125523674597551449412004735397779511371</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c1 = continued_fraction(data3)</span><br><span class="line">alist = c1.convergents()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alist:</span><br><span class="line">    a = <span class="built_in">str</span>(i).split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a) &gt; <span class="number">1</span> <span class="keyword">and</span> gcd(<span class="built_in">int</span>(a[<span class="number">0</span>]), <span class="built_in">int</span>(a[<span class="number">1</span>])) == <span class="number">1</span> <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">0</span>])) <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">1</span>])) <span class="keyword">and</span> <span class="built_in">int</span>(</span><br><span class="line">            a[<span class="number">0</span>]).bit_length() == <span class="number">512</span> <span class="keyword">and</span> <span class="built_in">int</span>(a[<span class="number">1</span>]).bit_length() == <span class="number">512</span>:</span><br><span class="line">        data1 = <span class="built_in">int</span>(a[<span class="number">0</span>])</span><br><span class="line">        data2 = <span class="built_in">int</span>(a[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">leak1 = leak % data1</span><br><span class="line">p, q = sympy.symbols(<span class="string">&quot;p q&quot;</span>)</span><br><span class="line">h = sympy.solve([p * q - n, p - q - leak1], [p, q])</span><br><span class="line">p = h[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">q = h[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(p,q)</span><br><span class="line"><span class="comment">#8397652354751369475047895816963473478350245201262315191356674989898449420511844471318815750077346111978800531467822072132495108840045942922000560423170719, 7366431105165493870863104020012521226567717006209783271191581404475809252591732063142219903159720601508017444435289526877689688795190667050592115689909567</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p=<span class="number">8397652354751369475047895816963473478350245201262315191356674989898449420511844471318815750077346111978800531467822072132495108840045942922000560423170719</span></span><br><span class="line">q=<span class="number">7366431105165493870863104020012521226567717006209783271191581404475809252591732063142219903159720601508017444435289526877689688795190667050592115689909567</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">num2=<span class="number">9050477566333038464101590216458863799039754468566791821195736389139213194857548339787600682491327798736538059818887575696704421576721592454156775006222517</span></span><br><span class="line">ct=<span class="number">31011170589632318837149853165664224847925206003567781692767655474759523146503572164952138829336342836023903919700264739071138739105931471740973631326608186969523753119546323993892359278563753903149741128282349467136720827132122619177620866305659196267641453819504766216964516467658995724859657544518337771393</span></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(ct,d,n)-num2</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#flag&#123;ISEC-WeMu5tKe2pOn_70in5And#N3Ver@G1veUp!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Vigenere2S"><a href="#Vigenere2S" class="headerlink" title="Vigenere2S"></a>Vigenere2S</h2><p>两次爆破压缩包口令，得到题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> key,flag2 <span class="keyword">as</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_l</span>(<span class="params">idx, s</span>):</span><br><span class="line">    <span class="keyword">return</span> s[idx:] + s[:idx]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mainProc</span>(<span class="params">p, k1, k2</span>):</span><br><span class="line">    s = <span class="string">b&quot;abcd07efghij89klmnopqr16stuvwxyz-_&#123;&#125;ABCDEFGHIJKL34MNOPQRST25VWXYZ&quot;</span></span><br><span class="line">    t = [[_l((i+j)%<span class="built_in">len</span>(s), s) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))]</span><br><span class="line">    i1 = <span class="number">0</span></span><br><span class="line">    i2 = <span class="number">0</span></span><br><span class="line">    c = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> p:</span><br><span class="line">        c += t[s.find(a)][s.find(k1[i1])][s.find(k2[i2])]</span><br><span class="line">        i1 = (i1 + <span class="number">1</span>) % <span class="built_in">len</span>(k1)</span><br><span class="line">        i2 = (i2 + <span class="number">1</span>) % <span class="built_in">len</span>(k2)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">res = mainProc(flag,key,key[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#第二层口令为ROT47，提示要对ciphertext做ROT47编码，得到真正的密文6JnsNxHKJ8mkvhS&#123;rMO_c9apMfHDHObq80PMu&#123;_ww_r&#123;rq</span></span><br></pre></td></tr></table></figure><p>加密方法简单来说就是把明文字符在字符串s中的位置，向右移k1+k2位，得到密文</p><p>注意到flag的格式是 <code>flag&#123;ISEC-&#125;</code> ,利用flag的头和密文的前十位相减，可以得到位移量k1+k2，再将密文移动回去可以得到明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c,tmp</span>):</span><br><span class="line">    s = <span class="string">b&quot;abcd07efghij89klmnopqr16stuvwxyz-_&#123;&#125;ABCDEFGHIJKL34MNOPQRST25VWXYZ&quot;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    message = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> c:</span><br><span class="line">        message += long_to_bytes(s[(s.find(a) - tmp[i]) % <span class="number">65</span>])</span><br><span class="line">        i = (i+<span class="number">1</span>) % <span class="built_in">len</span>(tmp)</span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line">m = <span class="string">b&quot;flag&#123;ISEC-&quot;</span></span><br><span class="line">c = <span class="string">b&quot;6JnsNxHKJ8mkvhS&#123;rMO_c9apMfHDHObq80PMu&#123;_ww_r&#123;rq&quot;</span></span><br><span class="line"></span><br><span class="line">tmp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    s = <span class="string">b&quot;abcd07efghij89klmnopqr16stuvwxyz-_&#123;&#125;ABCDEFGHIJKL34MNOPQRST25VWXYZ&quot;</span></span><br><span class="line">    index = s.find(c[i])</span><br><span class="line">    tmp.append((index - s.find(m[i])) % <span class="built_in">len</span>(s))  </span><br><span class="line"></span><br><span class="line">tmp = tmp + tmp[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br><span class="line">flag = decrypt(c,tmp)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;ISEC-Afr1en7_1nN33d_1S_Afr9end_ind88d0o0&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯2023 Crypto</title>
      <link href="/posts/14c00786.html"/>
      <url>/posts/14c00786.html</url>
      
        <content type="html"><![CDATA[<h1 id="安洵杯2023-Crypto"><a href="#安洵杯2023-Crypto" class="headerlink" title="安洵杯2023 Crypto"></a>安洵杯2023 Crypto</h1><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;--hidden_message--&#x27;</span></span><br><span class="line">data1 = getPrime(<span class="number">256</span>)</span><br><span class="line">data2 = getPrime(<span class="number">256</span>)</span><br><span class="line">m = bytes_to_long(flag)+data2</span><br><span class="line">prec = <span class="number">600</span></span><br><span class="line">ring = RealField(prec)</span><br><span class="line">data3 = ring(data1) / ring(data2)</span><br><span class="line"><span class="built_in">print</span>(data3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = randint(<span class="number">2</span>**<span class="number">255</span>, data1)</span><br><span class="line">    q = randint(<span class="number">2</span>**<span class="number">255</span>, data2)</span><br><span class="line">    <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q) <span class="keyword">and</span> p!=q:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">leak = <span class="built_in">pow</span>(p-q, data1, data1*data2)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(leak)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.42870767357206600351348423521722279489230609801270854618388981989800006431663026299563973511233193052826781891445323183272867949279044062899046090636843802841647378505716932999588</span></span><br><span class="line"><span class="string">1046004343125860480395943301139616023280829254329678654725863063418699889673392326217271296276757045957276728032702540618505554297509654550216963442542837</span></span><br><span class="line"><span class="string">2793178738709511429126579729911044441751735205348276931463015018726535495726108249975831474632698367036712812378242422538856745788208640706670735195762517</span></span><br><span class="line"><span class="string">1788304673303043190942544050868817075702755835824147546758319150900404422381464556691646064734057970741082481134856415792519944511689269134494804602878628</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>题目给出了data1和data2相除的高精度结果data3，利用连分数攻击，找到256位的分子分母的渐进分数来逼近data3，同时进行条件判断，得到data1和data2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line">data3=<span class="number">1.42870767357206600351348423521722279489230609801270854618388981989800006431663026299563973511233193052826781891445323183272867949279044062899046090636843802841647378505716932999588</span></span><br><span class="line"></span><br><span class="line">c = continued_fraction(data3)</span><br><span class="line">alist = c.convergents()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alist:</span><br><span class="line">    a = <span class="built_in">str</span>(i).split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a)&gt;<span class="number">1</span> <span class="keyword">and</span> gcd(<span class="built_in">int</span>(a[<span class="number">0</span>]),<span class="built_in">int</span>(a[<span class="number">1</span>])) == <span class="number">1</span> <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">0</span>])) <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">1</span>])) <span class="keyword">and</span> <span class="built_in">int</span>(a[<span class="number">0</span>]).bit_length()==<span class="number">256</span> <span class="keyword">and</span> <span class="built_in">int</span>(a[<span class="number">1</span>]).bit_length()==<span class="number">256</span>:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#[&#x27;97093002077798295469816641595207740909547364338742117628537014186754830773717&#x27;,&#x27;67958620138887907577348085925738704755742144710390414146201367031822084270769&#x27;]</span></span><br></pre></td></tr></table></figure><p>接下来求p和q，根据数论知识，</p><p>leak &#x3D;&#x3D; (p-q) ^ data1 (mod data1*data2)</p><p>leak &#x3D;&#x3D; (p-q) ^ data1 (mod data1) &#x3D;&#x3D;p-q (mod data1)</p><p>所以 leak&#x3D;p-q (mod data1)</p><p>知道了p*q和p-q就可以列方程解出p和q，之后常规解rsa得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line">data3 = <span class="number">1.42870767357206600351348423521722279489230609801270854618388981989800006431663026299563973511233193052826781891445323183272867949279044062899046090636843802841647378505716932999588</span></span><br><span class="line">c = <span class="number">1046004343125860480395943301139616023280829254329678654725863063418699889673392326217271296276757045957276728032702540618505554297509654550216963442542837</span></span><br><span class="line">n = <span class="number">2793178738709511429126579729911044441751735205348276931463015018726535495726108249975831474632698367036712812378242422538856745788208640706670735195762517</span></span><br><span class="line">leak = <span class="number">1788304673303043190942544050868817075702755835824147546758319150900404422381464556691646064734057970741082481134856415792519944511689269134494804602878628</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">data1 = <span class="number">97093002077798295469816641595207740909547364338742117628537014186754830773717</span></span><br><span class="line">data2 = <span class="number">67958620138887907577348085925738704755742144710390414146201367031822084270769</span></span><br><span class="line">pjq = leak%data1</span><br><span class="line">p,q = sympy.symbols(<span class="string">&quot;p q&quot;</span>)</span><br><span class="line">h = sympy.solve([p*q-n,p-q-pjq],[p,q])</span><br><span class="line">p = h[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">q = h[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">d = <span class="built_in">int</span>(inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m-data2)))</span><br><span class="line"><span class="comment">#SYC&#123;a00338c150aa3a5163dbf404100e6754&#125;</span></span><br></pre></td></tr></table></figure><h2 id="CrazyTreat"><a href="#CrazyTreat" class="headerlink" title="CrazyTreat"></a>CrazyTreat</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TrickPrime</span>(<span class="params">bits</span>):</span><br><span class="line">    p = getPrime(bits)</span><br><span class="line">    q = getPrime(bits)</span><br><span class="line">    cut = randint(<span class="number">1</span>,<span class="number">256</span>)</span><br><span class="line">    temp = p*q</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;clown =&#x27;</span>,temp)</span><br><span class="line">    game  = (p&amp;(<span class="number">2</span>**bits-<span class="number">1</span>)) &gt;&gt;cut&lt;&lt;cut <span class="comment">#p高位需要给出</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;trick =&quot;</span>,game)</span><br><span class="line">    <span class="keyword">return</span> p,q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CrazyPrime</span>(<span class="params">nbits</span>):</span><br><span class="line">    p = getPrime(nbits)</span><br><span class="line">    q = getPrime(nbits)</span><br><span class="line">    r = getPrime(nbits)</span><br><span class="line">    n = p * q * r</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line">    m = getPrime(<span class="number">256</span>)</span><br><span class="line">    P = <span class="built_in">pow</span>(m, p, n)</span><br><span class="line">    Q = <span class="built_in">pow</span>(m, q, n)</span><br><span class="line">    R = <span class="built_in">pow</span>(m, r, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;P =&quot;</span>, P)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Q =&quot;</span>, Q)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;R =&quot;</span>, R)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">P,Q = TrickPrime(<span class="number">512</span>)</span><br><span class="line">R   = CrazyPrime(<span class="number">512</span>)</span><br><span class="line">N = P*Q*R</span><br><span class="line">phi = (P-<span class="number">1</span>)*(Q-<span class="number">1</span>)*(R-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">clown =  128259792862716016839189459678072057136816726330154776961595353705839428880480571473066446384217522987161777524953373380960754160008765782711874445778198828395697797884436326877471408867745183652189648661444125231444711655242478825995283559948683891100547458186394738621410655721556196774451473359271887941209</span></span><br><span class="line"><span class="string">trick =  13053422630763887754872929794631414002868675984142851995620494432706465523574529389771830464455212126838976863742628716168391373019631629866746550551576576</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n = 924936528644761261915490226270682878749572154775391302241867565751616615723850084742168094776229761548826664906020127037598880909798055174894996273670320006942669796769794827782190025101253693980249267932225152093301291975335342891074711919668098647971235568200490825183676601392038486178409517985098598981313504275523679007669267428032655295176395420598988902864122270470643591017567271923728446920345242491655440745259071163984046349191793076143578695363467259</span></span><br><span class="line"><span class="string">P = 569152976869063146023072907832518894975041333927991456910198999345700391220835009080679006115013808845384796762879536272124713177039235766835540634080670611913370463720348843789609330086898067623866793724806787825941048552075917807777474750280276411568158631295041513060119750713892787573668959642318994049493233526305607509996778047209856407800405714104373282610244944206314614906974275396096712817649817035559000245832673082730407216670764400076473183825246052</span></span><br><span class="line"><span class="string">Q = 600870923560313304359037202752076267074889238956345564584928427345594724253036201151726541881494799597966727749590645445697106549304014936202421316051605075583257261728145977582815350958084624689934980044727977015857381612608005101395808233778123605070134652480191762937123526142746130586645592869974342105683948971928881939489687280641660044194168473162316423173595720804934988042177232172212359550196783303829050288001473419477265817928976860640234279193511499</span></span><br><span class="line"><span class="string">R = 502270534450244040624190876542726461324819207575774341876202226485302007962848054723546499916482657212105671666772860609835378197021454344356764800459114299720311023006792483917490176845781998844884874288253284234081278890537021944687301051482181456494678641606747907823086751080399593576505166871905600539035162902145778102290387464751040045505938896117306913887015838631862800918222056118527252590990688099219298296427609455224159445193596547855684004680284030</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c =  10585127810518527980133202456076703601165893288538440737356392760427497657052118442676827132296111066880565679230142991175837099225733564144475217546829625689104025101922826124473967963669155549692317699759445354198622516852708572517609971149808872997711252940293211572610905564225770385218093601905012939143618159265562064340937330846997881816650140361013457891488134685547458725678949</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>trickprime考察p高位泄露，利用coppersmith求解p</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line">N =  <span class="number">128259792862716016839189459678072057136816726330154776961595353705839428880480571473066446384217522987161777524953373380960754160008765782711874445778198828395697797884436326877471408867745183652189648661444125231444711655242478825995283559948683891100547458186394738621410655721556196774451473359271887941209</span></span><br><span class="line"><span class="comment">#p的高位</span></span><br><span class="line">p0 =  <span class="number">13053422630763887754872929794631414002868675984142851995620494432706465523574529389771830464455212126838976863742628716168391373019631629866746550551576576</span></span><br><span class="line"><span class="comment">#0xf93bccfd5550cb15211bdc316f1b15cdfbc1f3e54a7745b9c4835f5346fa7f1d9560784892728000000000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="comment">#cut 204-207</span></span><br><span class="line"> </span><br><span class="line">P.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">f = p0 + x </span><br><span class="line">x = f.monic().small_roots(X=<span class="number">2</span>^<span class="number">210</span>, beta=<span class="number">0.4</span>)</span><br><span class="line">x = x[<span class="number">0</span>]</span><br><span class="line">x = <span class="number">76347864203588455868161824448305083084387260376528823546715135</span></span><br><span class="line">p = ZZ(f(x))</span><br><span class="line">q = N//p</span><br><span class="line"><span class="built_in">print</span>(p,q)</span><br><span class="line"><span class="comment">#####</span></span><br><span class="line">p=<span class="number">13053422630763887754872929794631414002868675984142851995620494432706465523574529389771830464531559991042565319610790540616696456104018890243275374098291711</span></span><br><span class="line">q=<span class="number">9825759610390416003138880321039057063786120681277009947660201742655391150627525256689197020107593156663696181775606008771199371337506657207530847665591719</span></span><br></pre></td></tr></table></figure><p>根据crazyprime函数，化简P,Q,R,m关系，解模方程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">924936528644761261915490226270682878749572154775391302241867565751616615723850084742168094776229761548826664906020127037598880909798055174894996273670320006942669796769794827782190025101253693980249267932225152093301291975335342891074711919668098647971235568200490825183676601392038486178409517985098598981313504275523679007669267428032655295176395420598988902864122270470643591017567271923728446920345242491655440745259071163984046349191793076143578695363467259</span></span><br><span class="line">P = <span class="number">569152976869063146023072907832518894975041333927991456910198999345700391220835009080679006115013808845384796762879536272124713177039235766835540634080670611913370463720348843789609330086898067623866793724806787825941048552075917807777474750280276411568158631295041513060119750713892787573668959642318994049493233526305607509996778047209856407800405714104373282610244944206314614906974275396096712817649817035559000245832673082730407216670764400076473183825246052</span></span><br><span class="line">Q = <span class="number">600870923560313304359037202752076267074889238956345564584928427345594724253036201151726541881494799597966727749590645445697106549304014936202421316051605075583257261728145977582815350958084624689934980044727977015857381612608005101395808233778123605070134652480191762937123526142746130586645592869974342105683948971928881939489687280641660044194168473162316423173595720804934988042177232172212359550196783303829050288001473419477265817928976860640234279193511499</span></span><br><span class="line">R = <span class="number">502270534450244040624190876542726461324819207575774341876202226485302007962848054723546499916482657212105671666772860609835378197021454344356764800459114299720311023006792483917490176845781998844884874288253284234081278890537021944687301051482181456494678641606747907823086751080399593576505166871905600539035162902145778102290387464751040045505938896117306913887015838631862800918222056118527252590990688099219298296427609455224159445193596547855684004680284030</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypto2</span>(<span class="params">P,Q,R,n</span>):</span><br><span class="line">    PR.&lt;m&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = m^<span class="number">3</span>-(P+Q+R)*m^<span class="number">2</span>+(P*Q+Q*R+P*R)*m-P*Q*R</span><br><span class="line">    f=f.monic()</span><br><span class="line">    x0 = f.small_roots(X=<span class="number">2</span>^<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">return</span> x0[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">R1=<span class="built_in">int</span>(decrypto2(P,Q,R,n))</span><br><span class="line"><span class="built_in">print</span>(R1)</span><br><span class="line"><span class="comment">#105960538296223496551922954965164644267919720177702173352061963871195469608683</span></span><br></pre></td></tr></table></figure><p>最后得到phi求解rsa</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c=<span class="number">10585127810518527980133202456076703601165893288538440737356392760427497657052118442676827132296111066880565679230142991175837099225733564144475217546829625689104025101922826124473967963669155549692317699759445354198622516852708572517609971149808872997711252940293211572610905564225770385218093601905012939143618159265562064340937330846997881816650140361013457891488134685547458725678949</span></span><br><span class="line">p=<span class="number">13053422630763887754872929794631414002868675984142851995620494432706465523574529389771830464531559991042565319610790540616696456104018890243275374098291711</span></span><br><span class="line">q=<span class="number">9825759610390416003138880321039057063786120681277009947660201742655391150627525256689197020107593156663696181775606008771199371337506657207530847665591719</span></span><br><span class="line">r=<span class="number">105960538296223496551922954965164644267919720177702173352061963871195469608683</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,p*q*r)))</span><br><span class="line"><span class="comment">#SYC&#123;N0b0dy_Kn0vvs_CryPt0_be7t3r_7haN_Me&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Alexei-needs-help"><a href="#Alexei-needs-help" class="headerlink" title="Alexei needs help"></a>Alexei needs help</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint </span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES </span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5 </span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">a,b = randint(<span class="number">2</span>,<span class="number">2</span>**<span class="number">512</span>), randint(<span class="number">2</span>,<span class="number">2</span>**<span class="number">512</span>) </span><br><span class="line">m = getPrime(<span class="number">512</span>)</span><br><span class="line">n = <span class="number">2023</span></span><br><span class="line">seq = [randint(<span class="number">2</span>,<span class="number">2</span>**<span class="number">512</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">seqsum</span>(<span class="params">i</span>):</span><br><span class="line">   ans = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(seq)):</span><br><span class="line">      ans += gp.powmod(i,j,m)*seq[j] </span><br><span class="line">   <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">homework</span>(<span class="params">i</span>):</span><br><span class="line">   <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span> </span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> (a*homework(i-<span class="number">1</span>)+b*homework(i-<span class="number">2</span>)+seqsum(i))%m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ans = homework(n) </span><br><span class="line"></span><br><span class="line">k = unhexlify(md5(<span class="built_in">str</span>(ans).encode()).hexdigest())</span><br><span class="line">aes = AES.new(k,AES.MODE_ECB)</span><br><span class="line">data = flag + (<span class="number">16</span>-<span class="built_in">len</span>(flag)%<span class="number">16</span>)*<span class="string">b&quot;\x00&quot;</span></span><br><span class="line">ct = hexlify(aes.encrypt(data)) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a = &#x27;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b = &#x27;</span>,b) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;m = &#x27;</span>,m)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;seq = &#x27;</span>,seq) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ct = &#x27;</span>,ct) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a =  12760960185046114319373228302773710922517145043260117201359198182268919830481221094839217650474599663154368235126389153552714679678111020813518413419360215</span></span><br><span class="line"><span class="string">b =  10117047970182219839870108944868089481578053385699469522500764052432603914922633010879926901213308115011559044643704414828518671345427553143525049573118673</span></span><br><span class="line"><span class="string">m =  9088893209826896798482468360055954173455488051415730079879005756781031305351828789190798690556659137238815575046440957403444877123534779101093800357633817</span></span><br><span class="line"><span class="string">seq =  [1588310287911121355041550418963977300431302853564488171559751334517653272107112155026823633337984299690660859399029380656951654033985636188802999069377064, 12201509401878255828464211106789096838991992385927387264891565300242745135291213238739979123473041322233985445125107691952543666330443810838167430143985860, 13376619124234470764612052954603198949430905457204165522422292371804501727674375468020101015195335437331689076325941077198426485127257539411369390533686339, 8963913870279026075472139673602507483490793452241693352240197914901107612381260534267649905715779887141315806523664366582632024200686272718817269720952005, 5845978735386799769835726908627375251246062617622967713843994083155787250786439545090925107952986366593934283981034147414438049040549092914282747883231052, 9415622412708314171894809425735959412573511070691940566563162947924893407832253049839851437576026604329005326363729310031275288755753545446611757793959050, 6073533057239906776821297586403415495053103690212026150115846770514859699981321449095801626405567742342670271634464614212515703417972317752161774065534410, 3437702861547590735844267250176519238293383000249830711901455900567420289208826126751013809630895097787153707874423814381309133723519107897969128258847626, 2014101658279165374487095121575610079891727865185371304620610778986379382402770631536432571479533106528757155632259040939977258173977096891411022595638738, 10762035186018188690203027733533410308197454736009656743236110996156272237959821985939293563176878272006006744403478220545074555281019946284069071498694967]</span></span><br><span class="line"><span class="string">ct = 37dc072bdf4cdc7e9753914c20cbf0b55c20f03249bacf37c88f66b10b72e6e678940eecdb4c0be8466f68fdcd13bd81</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>直接用题目给的函数会超出python解释器允许的最大深度，因此用循环代替递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">a = <span class="number">12760960185046114319373228302773710922517145043260117201359198182268919830481221094839217650474599663154368235126389153552714679678111020813518413419360215</span></span><br><span class="line">b = <span class="number">10117047970182219839870108944868089481578053385699469522500764052432603914922633010879926901213308115011559044643704414828518671345427553143525049573118673</span></span><br><span class="line">m = <span class="number">9088893209826896798482468360055954173455488051415730079879005756781031305351828789190798690556659137238815575046440957403444877123534779101093800357633817</span></span><br><span class="line">seq = [<span class="number">1588310287911121355041550418963977300431302853564488171559751334517653272107112155026823633337984299690660859399029380656951654033985636188802999069377064</span>,<span class="number">12201509401878255828464211106789096838991992385927387264891565300242745135291213238739979123473041322233985445125107691952543666330443810838167430143985860</span>,<span class="number">13376619124234470764612052954603198949430905457204165522422292371804501727674375468020101015195335437331689076325941077198426485127257539411369390533686339</span>,<span class="number">8963913870279026075472139673602507483490793452241693352240197914901107612381260534267649905715779887141315806523664366582632024200686272718817269720952005</span>,<span class="number">5845978735386799769835726908627375251246062617622967713843994083155787250786439545090925107952986366593934283981034147414438049040549092914282747883231052</span>,<span class="number">9415622412708314171894809425735959412573511070691940566563162947924893407832253049839851437576026604329005326363729310031275288755753545446611757793959050</span>,<span class="number">6073533057239906776821297586403415495053103690212026150115846770514859699981321449095801626405567742342670271634464614212515703417972317752161774065534410</span>,<span class="number">3437702861547590735844267250176519238293383000249830711901455900567420289208826126751013809630895097787153707874423814381309133723519107897969128258847626</span>,<span class="number">2014101658279165374487095121575610079891727865185371304620610778986379382402770631536432571479533106528757155632259040939977258173977096891411022595638738</span>,<span class="number">10762035186018188690203027733533410308197454736009656743236110996156272237959821985939293563176878272006006744403478220545074555281019946284069071498694967</span>]</span><br><span class="line">ct = <span class="string">&#x27;37dc072bdf4cdc7e9753914c20cbf0b55c20f03249bacf37c88f66b10b72e6e678940eecdb4c0be8466f68fdcd13bd81&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">homework</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    a1, a2 = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 计算 seqsum</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(seq)):</span><br><span class="line">            ans += gmpy2.powmod(i, k, m) * seq[k]</span><br><span class="line">        <span class="comment"># 更新 a1 和 a2</span></span><br><span class="line">        a1, a2 = a2, (a*a2 + b*a1 + ans) % m</span><br><span class="line">    <span class="keyword">return</span> a2</span><br><span class="line"></span><br><span class="line">ans = homework(<span class="number">2023</span>)</span><br><span class="line"></span><br><span class="line">k = unhexlify(hashlib.md5(<span class="built_in">str</span>(ans).encode()).hexdigest())</span><br><span class="line">aes = AES.new(k, AES.MODE_ECB)</span><br><span class="line">c=unhexlify(ct)</span><br><span class="line">flag=aes.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#c7ceedc7197a0d350025fff478f667293ebbaa6b</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>巅峰极客2023 CRYPTO</title>
      <link href="/posts/ef1c5c3c.html"/>
      <url>/posts/ef1c5c3c.html</url>
      
        <content type="html"><![CDATA[<h1 id="巅峰极客2023-CRYPTO"><a href="#巅峰极客2023-CRYPTO" class="headerlink" title="巅峰极客2023 CRYPTO"></a>巅峰极客2023 CRYPTO</h1><h2 id="数学但高中"><a href="#数学但高中" class="headerlink" title="数学但高中"></a>数学但高中</h2><p>使用demos软件输入各函数表达式，即可绘制出flag图像</p><h2 id="Simple-Encryption"><a href="#Simple-Encryption" class="headerlink" title="Simple_Encryption"></a>Simple_Encryption</h2><p>先看前半段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">p = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">q = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">N = p * q</span><br><span class="line">g, r1, r2 = [getRandomRange(<span class="number">1</span>, N) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">g1 = <span class="built_in">pow</span>(g, r1 * (p - <span class="number">1</span>), N)</span><br><span class="line">g2 = <span class="built_in">pow</span>(g, r2 * (q - <span class="number">1</span>), N)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m</span>):</span><br><span class="line">s1, s2 = [getRandomRange(<span class="number">1</span>, N) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">c1 = (m * <span class="built_in">pow</span>(g1, s1, N)) % N</span><br><span class="line">c2 = (m * <span class="built_in">pow</span>(g2, s2, N)) % N</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1=&quot;</span>, c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2=&quot;</span>, c2)</span><br><span class="line"><span class="keyword">return</span> (c1, c2)</span><br><span class="line"></span><br><span class="line">c = encrypt(bytes_to_long(flag[:<span class="built_in">len</span>(flag) // <span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N=&#x27;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;g1=&#x27;</span>, g1)</span><br></pre></td></tr></table></figure><p>p、q都是素数，由费马小定理，有 pow(g, p-1)&#x3D;&#x3D;1(mod p), pow(g, q-1)&#x3D;&#x3D;1(mod q)</p><p>那么 g1&#x3D;&#x3D;g^(r1·(p-1))+k·N，两边同时模p，得到 g1&#x3D;&#x3D;1(mod p)，即 g1-1&#x3D;&#x3D;k·p</p><p>求g1-1和N的最大公约数，得到 p&#x3D;gcd(g1-1, N)</p><p>然后 c1 &#x3D; (m · pow(g1, s1, N)) % N，带入g1的表达式，两边模p，再次用费马小定理：</p><p>c1&#x3D;&#x3D;m(mod p)，同理c2&#x3D;&#x3D;m(mod q)</p><p>所以m1&#x3D;c1%p</p><p>前半段flag脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c1 = <span class="number">19024563955839349902897822692180949371550067644378624199902067434708278125346234824900117853598997270022872667319428613147809325929092749312310446754419305096891122211944442338664613779595641268298482084259741784281927857614814220279055840825157115551456554287395502655358453270843601870807174309121367449335110327991187235786798374254470758957844690258594070043388827157981964323699747450405814713722613265012947852856714100237325256114904705539465145676960232769502207049858752573601516773952294218843901330100257234517481221811887136295727396712894842769582824157206825592614684804626241036297918244781918275524254</span></span><br><span class="line">N = <span class="number">21831630625212912450058787218272832615084640356500740162478776482071876178684642739065105728423872548532056206845637492058465613779973193354996353323494373418215019445325632104575415991984764454753263189235376127871742444636236132111097548997063091478794422370043984009615893441148901566420508196170556189546911391716595983110030778046242014896752388438535131806524968952947016059907135882390507706966746973544598457963945671064540465259211834751973065197550500334726779434679470160463944292619173904064826217284899341554269864669620477774678605962276256707036721407638013951236957603286867871199275024050690034901963</span></span><br><span class="line">g1 = <span class="number">20303501619435729000675510820217420636246553663472832286487504757515586157679361170332171306491820918722752848685645096611030558245362578422584797889428493611704976472409942840368080016946977234874471779189922713887914075985648876516896823599078349725871578446532134614410886658001724864915073768678394238725788245439086601955497248593286832679485832319756671985505398841701463782272300202981842733576006152153012355980197830911700112001441621619417349747262257225469106511527467526286661082010163334100555372381681421874165851063816598907314117035131618062582953512203870615406642787786668571083042463072230605649134</span></span><br><span class="line">p = gcd(g1-<span class="number">1</span>,N)</span><br><span class="line">m1 = c1%p</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line"><span class="comment">#flag&#123;f561fafb-32ce-9d</span></span><br></pre></td></tr></table></figure><p>再看后半段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">msg, length</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(msg)</span><br><span class="line">    <span class="keyword">return</span> msg + (length - l) * <span class="built_in">chr</span>(length - l).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">q = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">assert</span> (p != q)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">5</span></span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line"><span class="keyword">assert</span> (e * d % (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">flag = pad(flag[<span class="built_in">len</span>(flag) // <span class="number">2</span>:], <span class="number">48</span>) <span class="comment">#对后半段flag进行长度填充至48字节</span></span><br><span class="line">m = [<span class="built_in">int</span>(binascii.b2a_hex(flag[i * <span class="number">16</span>:i * <span class="number">16</span> + <span class="number">16</span>]).decode(<span class="string">&#x27;utf-8&#x27;</span>), <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;S=&#x27;</span>, <span class="built_in">sum</span>(m) % n)</span><br><span class="line">cnt = <span class="built_in">len</span>(m)</span><br><span class="line">A = [(i + <span class="number">128</span>) ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line">B = [(i + <span class="number">1024</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line">C = [(i + <span class="number">512</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line">Cs = [<span class="built_in">int</span>(<span class="built_in">pow</span>((A[i] * m[i] ** <span class="number">2</span> + B[i] * m[i] + C[i]), e, n)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N=&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e=&#x27;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Cs=&#x27;</span>, Cs)</span><br></pre></td></tr></table></figure><p>m 是一个包含三个整数的列表，它们分别对应着原始 flag 的前 16 字节、第 17 到 32 字节、以及第 33 到 48 字节</p><p>cnt&#x3D;&#x3D;3，我们可以求出列表A、B、C的内容</p><p>A&#x3D; [16384, 16641, 16900]B&#x3D; [1024, 1025, 1026]C&#x3D; [512, 513, 514]</p><p>最后A、B、C、Cs都已知，要求m[i]的值只要sage解方程即可</p><p>解出m得到后半段flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m = [<span class="number">65413472431888815878902893901773169457</span>,<span class="number">133183392452574799979498526266539842331</span>, <span class="number">36029897673981719660827899610422516507</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>])+long_to_bytes(m[<span class="number">1</span>])+long_to_bytes(m[<span class="number">2</span>]))</span><br><span class="line"><span class="comment">#去掉填充字符后：16-18fa-ec795fc1d208&#125;</span></span><br></pre></td></tr></table></figure><p>求Grobner基参考： <a href="https://fq6p9pyo5tt.feishu.cn/docx/PPG0dCRT4oPLGOxotaicGSKonsc#D0HzdA7S1ouTn1xwOzDcTeX3n2O">https://fq6p9pyo5tt.feishu.cn/docx/PPG0dCRT4oPLGOxotaicGSKonsc#D0HzdA7S1ouTn1xwOzDcTeX3n2O</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF 2023 CRYPTO</title>
      <link href="/posts/f8e8c115.html"/>
      <url>/posts/f8e8c115.html</url>
      
        <content type="html"><![CDATA[<h1 id="DASCTF-2023-CRYPTO"><a href="#DASCTF-2023-CRYPTO" class="headerlink" title="DASCTF 2023 CRYPTO"></a>DASCTF 2023 CRYPTO</h1><h2 id="ezDHKE"><a href="#ezDHKE" class="headerlink" title="ezDHKE"></a>ezDHKE</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randbytes, getrandbits</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diffie_hellman</span>(<span class="params">g, p, flag</span>):</span><br><span class="line">    alice = getrandbits(<span class="number">1024</span>) <span class="comment">#私钥XA</span></span><br><span class="line">    bob = getrandbits(<span class="number">1024</span>) <span class="comment">#私钥XB</span></span><br><span class="line">    alice_c = <span class="built_in">pow</span>(g, alice, p) <span class="comment">#公钥YA</span></span><br><span class="line">    bob_c = <span class="built_in">pow</span>(g, bob, p) <span class="comment">#公钥YB</span></span><br><span class="line">    <span class="built_in">print</span>(alice_c , bob_c)</span><br><span class="line">    key = sha256(long_to_bytes(<span class="built_in">pow</span>(bob_c, alice, p))).digest()<span class="comment">#计算共享密钥</span></span><br><span class="line">    iv = <span class="string">b&quot;dasctfdasctfdasc&quot;</span></span><br><span class="line">    aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    enc = aes.encrypt(flag)</span><br><span class="line">    <span class="built_in">print</span>(enc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getp</span>():</span><br><span class="line">    p = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;P = &quot;</span>))</span><br><span class="line">    <span class="keyword">assert</span> isPrime(p)</span><br><span class="line">    <span class="keyword">assert</span> p.bit_length() &gt;= <span class="number">1024</span> <span class="keyword">and</span> p.bit_length() &lt;= <span class="number">2048</span></span><br><span class="line">    g = <span class="number">2</span></span><br><span class="line">    diffie_hellman(g, p, flag)</span><br><span class="line"></span><br><span class="line">getp()</span><br></pre></td></tr></table></figure><p>解题思路就是发送一个我们选定的素数p，返回公钥和AES加密后的flag，利用公钥和素数p的性质求出共享密钥key，就能AES解密出flag</p><p>突破点在于选定的素数p，除了满足长度要求，还要是一个光滑素数，便于求离散对数得到密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构造光滑素数p</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myPrime</span>(<span class="params">bits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">            n *= choice(sieve_base)</span><br><span class="line">        <span class="keyword">if</span> isPrime(n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = myPrime(1024)</span></span><br><span class="line">p = <span class="number">1182469077081307370897196218645745761830980444301765931993116341653232047837372164705423559281182692544176204911597370454757578292386802085769931530664049097675768844533400835590638787991051583020139522904465317708701035409426895763140957649414478041455897846288859623988524211639954453474651908631751484995976707</span></span><br></pre></td></tr></table></figure><p>利用nc指令进行交互得到相关输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">P = 1182469077081307370897196218645745761830980444301765931993116341653232047837372164705423559281182692544176204911597370454757578292386802085769931530664049097675768844533400835590638787991051583020139522904465317708701035409426895763140957649414478041455897846288859623988524211639954453474651908631751484995976707</span><br><span class="line">alice_c = </span><br><span class="line">987620060329951928897563801889050674437685358955105875701300829837886144006761391945173582761063010834324604561815351590082053214740533840471543325929416813754762786730252281332020628795561105398783397489235540195258717278936159572795700142673565438486544428625198794447713128670178155045211784620148790004123429 </span><br><span class="line">bob_c = 270636258786826687848226566861410417142285939233875568227375941891983616048697934105499840710702658150387478757489868270079301029653993331675122204299929527261954042267522199469280245834147738603817442312278680530875799849310158644931690270517452335585721704968980953405316655912005447964717311154087082611013281</span><br><span class="line">enc = b&#x27;\x87\x0b*\n\xdfP\x17\xa6M\xf7\x84);\x8fC\xbd`:\xf7\x9d\x02\xbb\xac\xb6\xa34\xe3\x08MO[&amp;\xf8/\xc5/\x94\xd8\xe3#\xd2\xc5\xa3\x08\xbe\x7f\xff\x81&#x27;</span><br></pre></td></tr></table></figure><p>用sage求离散对数得到私钥alice，随后求出共享密钥key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#sage</span><br><span class="line">p = 1182469077081307370897196218645745761830980444301765931993116341653232047837372164705423559281182692544176204911597370454757578292386802085769931530664049097675768844533400835590638787991051583020139522904465317708701035409426895763140957649414478041455897846288859623988524211639954453474651908631751484995976707</span><br><span class="line">x = 987620060329951928897563801889050674437685358955105875701300829837886144006761391945173582761063010834324604561815351590082053214740533840471543325929416813754762786730252281332020628795561105398783397489235540195258717278936159572795700142673565438486544428625198794447713128670178155045211784620148790004123429 </span><br><span class="line">y = 270636258786826687848226566861410417142285939233875568227375941891983616048697934105499840710702658150387478757489868270079301029653993331675122204299929527261954042267522199469280245834147738603817442312278680530875799849310158644931690270517452335585721704968980953405316655912005447964717311154087082611013281</span><br><span class="line">g = 2</span><br><span class="line"></span><br><span class="line">G = GF(p)</span><br><span class="line">x = G(x)</span><br><span class="line">y = G(y)</span><br><span class="line">g = G(g)</span><br><span class="line">alice=discrete_log(x,g)</span><br><span class="line">key=pow(y,alice,p)</span><br><span class="line">print(key)</span><br></pre></td></tr></table></figure><p>随后解AES得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">key = <span class="number">895107744833608757358776131937585844353308433149199136571117336830664784309540492249302485574665697659975863976053767850547066551073413029380249393082118011715491767941434289079700897437813321770443071103966854625383285225704046308527264820122218493791074582588445175100704170637454279177172957800740691009465176</span></span><br><span class="line">key = sha256(long_to_bytes(key)).digest()</span><br><span class="line">iv = <span class="string">b&#x27;dasctfdasctfdasc&#x27;</span></span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">enc = <span class="string">b&#x27;\x87\x0b*\n\xdfP\x17\xa6M\xf7\x84);\x8fC\xbd`:\xf7\x9d\x02\xbb\xac\xb6\xa34\xe3\x08MO[&amp;\xf8/\xc5/\x94\xd8\xe3#\xd2\xc5\xa3\x08\xbe\x7f\xff\x81&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(aes.decrypt(enc))</span><br><span class="line"><span class="comment">#DASCTF&#123;bc3d38a8-1b18-421a-ba30-2425e43f613d&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> secret, flag</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&quot;dasctf&#123;&quot;</span> + secret + <span class="string">b&quot;&#125;&quot;</span></span><br><span class="line">e = <span class="number">11</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">P = getPrime(<span class="number">512</span>)</span><br><span class="line">Q = getPrime(<span class="number">512</span>)</span><br><span class="line">N = P * Q</span><br><span class="line">gift = P ^ (Q &gt;&gt; <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(N, gift, <span class="built_in">pow</span>(n, e, N))</span><br><span class="line"><span class="built_in">print</span>(encrypt(bytes_to_long(secret)),</span><br><span class="line">    encrypt(bytes_to_long(flag)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 75000029602085996700582008490482326525611947919932949726582734167668021800854674616074297109962078048435714672088452939300776268788888016125632084529419230038436738761550906906671010312930801751000022200360857089338231002088730471277277319253053479367509575754258003761447489654232217266317081318035524086377 8006730615575401350470175601463518481685396114003290299131469001242636369747855817476589805833427855228149768949773065563676033514362512835553274555294034 14183763184495367653522884147951054630177015952745593358354098952173965560488104213517563098676028516541915855754066719475487503348914181674929072472238449853082118064823835322313680705889432313419976738694317594843046001448855575986413338142129464525633835911168202553914150009081557835620953018542067857943</span></span><br><span class="line"><span class="comment"># 69307306970629523181683439240748426263979206546157895088924929426911355406769672385984829784804673821643976780928024209092360092670457978154309402591145689825571209515868435608753923870043647892816574684663993415796465074027369407799009929334083395577490711236614662941070610575313972839165233651342137645009 46997465834324781573963709865566777091686340553483507705539161842460528999282057880362259416654012854237739527277448599755805614622531827257136959664035098209206110290879482726083191005164961200125296999449598766201435057091624225218351537278712880859703730566080874333989361396420522357001928540408351500991</span></span><br></pre></td></tr></table></figure><p>因为 gift &#x3D; P ^ (Q &gt;&gt; 16)， 已知gift，那么P的高16位是泄露出来的，用N除可以确定Q的部分高位。这样又有Q的高位已知，再利用gift异或能够确定P的更多位数，循环下去直到确定P和Q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">n_c = <span class="number">14183763184495367653522884147951054630177015952745593358354098952173965560488104213517563098676028516541915855754066719475487503348914181674929072472238449853082118064823835322313680705889432313419976738694317594843046001448855575986413338142129464525633835911168202553914150009081557835620953018542067857943</span></span><br><span class="line">secret_c = <span class="number">69307306970629523181683439240748426263979206546157895088924929426911355406769672385984829784804673821643976780928024209092360092670457978154309402591145689825571209515868435608753923870043647892816574684663993415796465074027369407799009929334083395577490711236614662941070610575313972839165233651342137645009</span></span><br><span class="line">flag_c = <span class="number">46997465834324781573963709865566777091686340553483507705539161842460528999282057880362259416654012854237739527277448599755805614622531827257136959664035098209206110290879482726083191005164961200125296999449598766201435057091624225218351537278712880859703730566080874333989361396420522357001928540408351500991</span></span><br><span class="line">N = <span class="number">75000029602085996700582008490482326525611947919932949726582734167668021800854674616074297109962078048435714672088452939300776268788888016125632084529419230038436738761550906906671010312930801751000022200360857089338231002088730471277277319253053479367509575754258003761447489654232217266317081318035524086377</span></span><br><span class="line">gift = <span class="number">8006730615575401350470175601463518481685396114003290299131469001242636369747855817476589805833427855228149768949773065563676033514362512835553274555294034</span></span><br><span class="line">pbar = gift &gt;&gt;(<span class="number">512</span>-<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line">  qbar = (N&gt;&gt;(<span class="number">1024</span> - pbar.bit_length()*<span class="number">2</span>))//pbar</span><br><span class="line">  qbar = qbar&gt;&gt;<span class="number">6</span></span><br><span class="line">  gifts = gift^(qbar&lt;&lt;(<span class="number">512</span>-<span class="number">16</span>-qbar.bit_length()))</span><br><span class="line">  pbar = gifts &gt;&gt; (<span class="number">512</span>-<span class="number">16</span>-qbar.bit_length())</span><br><span class="line"> <span class="keyword">except</span>:</span><br><span class="line">  <span class="keyword">break</span></span><br><span class="line"><span class="comment">#循环最后会还剩大约6个比特没有恢复，再进行暴力搜索</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line"> <span class="keyword">if</span> N%((pbar&lt;&lt;<span class="number">6</span>)+i) == <span class="number">0</span>:</span><br><span class="line">  p = (pbar&lt;&lt;<span class="number">6</span>)+i</span><br><span class="line">  q = N//p</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>,p)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;q =&quot;</span>,q)</span><br><span class="line">  <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到P、Q之后利用RSA解出n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">P = <span class="number">8006847171912577069085166877758626954304824756138758266557706391662987806065132448544117840031499707938227955094109779732609035310252723066470330862622641</span></span><br><span class="line">Q = <span class="number">9366986529377069783394625848920106951220134111548343265311677163992169555436421569730703291128771472885865288798344038000984911921843088200997725324682297</span></span><br><span class="line">e = <span class="number">11</span></span><br><span class="line">n_c = <span class="number">14183763184495367653522884147951054630177015952745593358354098952173965560488104213517563098676028516541915855754066719475487503348914181674929072472238449853082118064823835322313680705889432313419976738694317594843046001448855575986413338142129464525633835911168202553914150009081557835620953018542067857943</span></span><br><span class="line">d = invert(e,(P-<span class="number">1</span>)*(Q-<span class="number">1</span>))</span><br><span class="line">N = P*Q</span><br><span class="line">n = <span class="built_in">pow</span>(n_c,d,N)</span><br><span class="line"><span class="comment">#print(n)</span></span><br><span class="line"><span class="comment">#这里发现n是一个偶数，所以n应该大于N，让n = n+N</span></span><br><span class="line"><span class="built_in">print</span>(n+N)</span><br></pre></td></tr></table></figure><p>接下来是相关明文攻击，由于 secret 长度未知，我们设有i个字符，进行爆破</p><p>我们知道 x&#x3D;&#x3D;secret 是下面两式的解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1 = (bytes_to_long(b&quot;dasctf&#123;&quot; + b&quot;\x00&quot;*i + b&quot;&#125;&quot;) + 256*x)^11 - flag_c</span><br><span class="line">f2 = x^11 - secret_c</span><br></pre></td></tr></table></figure><p>这两个式子一定有公因式 x-secret，于是攻击脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#sage</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">def GCD(a, b):</span><br><span class="line">    if(b == 0):</span><br><span class="line">        return a.monic()</span><br><span class="line">    else:</span><br><span class="line">        return GCD(b, a % b)</span><br><span class="line"></span><br><span class="line">N = 83410392685813224685786027640778560521035854332627839979281105731457044069408118952629284089869335506983096270269822559619624906180108256504440296527471536363057103101146262613593336072556587341466840510200003498265457285439149541137127199088938421905041387224795918868443175561632999479925818053898100117419</span><br><span class="line">R.&lt;x&gt; = Zmod(N)[]</span><br><span class="line">secret_c = 69307306970629523181683439240748426263979206546157895088924929426911355406769672385984829784804673821643976780928024209092360092670457978154309402591145689825571209515868435608753923870043647892816574684663993415796465074027369407799009929334083395577490711236614662941070610575313972839165233651342137645009</span><br><span class="line">flag_c = 46997465834324781573963709865566777091686340553483507705539161842460528999282057880362259416654012854237739527277448599755805614622531827257136959664035098209206110290879482726083191005164961200125296999449598766201435057091624225218351537278712880859703730566080874333989361396420522357001928540408351500991</span><br><span class="line"></span><br><span class="line">for i in range(40):</span><br><span class="line"> f1 = (bytes_to_long(b&quot;dasctf&#123;&quot; + b&quot;\x00&quot;*i + b&quot;&#125;&quot;) + 256*x)^11 - flag_c</span><br><span class="line"> f2 = x^11 - secret_c</span><br><span class="line"> if (N-GCD(f1,f2).coefficients()[0]) != N-1:</span><br><span class="line"> print(long_to_bytes(int(N-GCD(f1,f2).coefficients()[0])))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MoeCTF 2022 CRYPTO-1</title>
      <link href="/posts/33e51a15.html"/>
      <url>/posts/33e51a15.html</url>
      
        <content type="html"><![CDATA[<h1 id="MoeCTF-2022-CRYPTO-1"><a href="#MoeCTF-2022-CRYPTO-1" class="headerlink" title="MoeCTF 2022 CRYPTO-1"></a>MoeCTF 2022 CRYPTO-1</h1><h2 id="vigenere"><a href="#vigenere" class="headerlink" title="vigenere"></a>vigenere</h2><p>题目是没有密钥的维吉尼亚密码，在线工具解密，明文中可以找到flag</p><h2 id="0rsa0"><a href="#0rsa0" class="headerlink" title="0rsa0"></a>0rsa0</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[<span class="number">0</span>:<span class="number">7</span>] == <span class="string">b&#x27;moectf&#123;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag[-<span class="number">1</span>:] == <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">flag = flag[<span class="number">7</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">32</span></span><br><span class="line"></span><br><span class="line">m1 = bytes_to_long(flag[<span class="number">0</span>:<span class="number">16</span>])</span><br><span class="line">m2 = bytes_to_long(flag[<span class="number">16</span>:<span class="number">32</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc1</span>(<span class="params">m</span>):</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">3</span></span><br><span class="line">    c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">    <span class="keyword">return</span> n,e,c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc2</span>(<span class="params">m</span>):</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    n = p * q </span><br><span class="line">    dp2 = d % (p-<span class="number">1</span>)</span><br><span class="line">    c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">    <span class="keyword">return</span> n,e,c,dp2</span><br><span class="line"></span><br><span class="line">n1,e1,c1 = enc1(m1)</span><br><span class="line">n2,e2,c2,dp2 = enc2(m2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1=&quot;</span>+ <span class="built_in">str</span>(n1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1=&quot;</span>+ <span class="built_in">str</span>(e1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1=&quot;</span>+ <span class="built_in">str</span>(c1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2=&quot;</span>+ <span class="built_in">str</span>(n2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2=&quot;</span>+ <span class="built_in">str</span>(e2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2=&quot;</span>+ <span class="built_in">str</span>(c2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dp2=&quot;</span>+ <span class="built_in">str</span>(dp2))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n1=133024413746207623787624696996450696028790885302997888417950218110624599333002677651319135333439059708696691802077223829846594660086912881559705074934655646133379015018208216486164888406398123943796359972475427652972055533125099746441089220943904185289464863994194089394637271086436301059396682856176212902707</span></span><br><span class="line"><span class="string">e1=3</span></span><br><span class="line"><span class="string">c1=1402983421957507617092580232325850324755110618998641078304840725502785669308938910491971922889485661674385555242824</span></span><br><span class="line"><span class="string">n2=159054389158529397912052248500898471690131016887756654738868415880711791524038820158051782236121110394481656324333254185994103242391825337525378467922406901521793714621471618374673206963439266173586955520902823718942484039624752828390110673871132116507696336326760564857012559508160068814801483975094383392729</span></span><br><span class="line"><span class="string">e2=65537</span></span><br><span class="line"><span class="string">c2=37819867277367678387219893740454448327093874982803387661058084123080177731002392119369718466140559855145584144511271801362374042596420131167791821955469392938900319510220897100118141494412797730438963434604351102878410868789119825127662728307578251855605147607595591813395984880381435422467527232180612935306</span></span><br><span class="line"><span class="string">dp2=947639117873589776036311153850942192190143164329999603361788468962756751774397111913170053010412835033030478855001898886178148944512883446156861610917865</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>flag分两段加密，c1小指数攻击得到m1，c2 dp泄露得到m2，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">133024413746207623787624696996450696028790885302997888417950218110624599333002677651319135333439059708696691802077223829846594660086912881559705074934655646133379015018208216486164888406398123943796359972475427652972055533125099746441089220943904185289464863994194089394637271086436301059396682856176212902707</span></span><br><span class="line">e1 = <span class="number">3</span></span><br><span class="line">c1 = <span class="number">1402983421957507617092580232325850324755110618998641078304840725502785669308938910491971922889485661674385555242824</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    m1 = gmpy2.iroot(c1+k*n1,e1)</span><br><span class="line">    <span class="keyword">if</span>(m1[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        flag1 = long_to_bytes(m1[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(flag1)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k = k+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">159054389158529397912052248500898471690131016887756654738868415880711791524038820158051782236121110394481656324333254185994103242391825337525378467922406901521793714621471618374673206963439266173586955520902823718942484039624752828390110673871132116507696336326760564857012559508160068814801483975094383392729</span></span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">c2 = <span class="number">37819867277367678387219893740454448327093874982803387661058084123080177731002392119369718466140559855145584144511271801362374042596420131167791821955469392938900319510220897100118141494412797730438963434604351102878410868789119825127662728307578251855605147607595591813395984880381435422467527232180612935306</span></span><br><span class="line">dp2 = <span class="number">947639117873589776036311153850942192190143164329999603361788468962756751774397111913170053010412835033030478855001898886178148944512883446156861610917865</span></span><br><span class="line">p = <span class="number">1</span></span><br><span class="line">q = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e2):</span><br><span class="line">    p=(dp2*e2-<span class="number">1</span>)//i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n2%p == <span class="number">0</span>:</span><br><span class="line">        q = n2//p</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e2, phi)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2, d, n2)</span><br><span class="line">flag2 = long_to_bytes(m2)</span><br><span class="line"><span class="built_in">print</span>(flag2)</span><br></pre></td></tr></table></figure><h2 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q=&#x27;</span>,q)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"><span class="comment">#p= 12408795636519868275579286477747181009018504169827579387457997229774738126230652970860811085539129972962189443268046963335610845404214331426857155412988073</span></span><br><span class="line"><span class="comment">#q= 12190036856294802286447270376342375357864587534233715766210874702670724440751066267168907565322961270655972226761426182258587581206888580394726683112820379</span></span><br><span class="line"><span class="comment">#c= 68960610962019321576894097705679955071402844421318149418040507036722717269530195000135979777852568744281930839319120003106023209276898286482202725287026853925179071583797231099755287410760748104635674307266042492611618076506037004587354018148812584502385622631122387857218023049204722123597067641896169655595</span></span><br></pre></td></tr></table></figure><p>常规求解发生错误，发现e和phi不互素，且phi是e的整数倍</p><p>因为e和p互素，那么 c&#x3D;&#x3D;m^e(mod p)，求e模p-1下的逆元d，即可求出m</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">12408795636519868275579286477747181009018504169827579387457997229774738126230652970860811085539129972962189443268046963335610845404214331426857155412988073</span></span><br><span class="line">q = <span class="number">12190036856294802286447270376342375357864587534233715766210874702670724440751066267168907565322961270655972226761426182258587581206888580394726683112820379</span></span><br><span class="line">c = <span class="number">68960610962019321576894097705679955071402844421318149418040507036722717269530195000135979777852568744281930839319120003106023209276898286482202725287026853925179071583797231099755287410760748104635674307266042492611618076506037004587354018148812584502385622631122387857218023049204722123597067641896169655595</span></span><br><span class="line"></span><br><span class="line">phi = p-<span class="number">1</span></span><br><span class="line">d = invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="一次就好"><a href="#一次就好" class="headerlink" title="一次就好"></a>一次就好</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod,next_prime</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;Just once,I will accompany you to see the world&#x27;</span></span><br><span class="line">flag = flag.ljust(<span class="built_in">len</span>(c),<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">key = strxor(flag.encode(), c)</span><br><span class="line">m = bytes_to_long(key)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">N = p*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">gift = powmod(m, e, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gift)</span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gift = 127749242340004016446001520961422059381052911692861305057396462507126566256652316418648339729479729456613704261614569202080544183416817827900318057127539938899577580150210279291202882125162360563285794285643498788533366420857232908632854569967831654923280152015070999912426044356353393293132914925252494215314</span></span><br><span class="line"><span class="comment"># N = 164395171965189899201846744244839588935095288852148507114700855000512464673975991783671493756953831066569435489213778701866548078207835105414442567008315975881952023037557292470005621852113709605286462434049311321175270134326956812936961821511753256992797013020030263567313257339785161436188882721736453384403</span></span><br></pre></td></tr></table></figure><p>主要考查n由邻近素数组成的情况，直接对n开平方并找下一个素数就能找到p、q中的一个</p><p>之后按常规rsa求到gift，最后字符串gift和c异或，并去掉填充长度的符号，就能解出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">12821668064849826676074701213910298504451620184307130249376361333490782040849300923713647818247010549622664747770828229853003308659470956068108542842690393</span></span><br><span class="line">q = <span class="number">12821668064849826676074701213910298504451620184307130249376361333490782040849300923713647818247010549622664747770828229853003308659470956068108542842690571</span></span><br><span class="line">gift = <span class="number">127749242340004016446001520961422059381052911692861305057396462507126566256652316418648339729479729456613704261614569202080544183416817827900318057127539938899577580150210279291202882125162360563285794285643498788533366420857232908632854569967831654923280152015070999912426044356353393293132914925252494215314</span></span><br><span class="line">N = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(gift,d,N)</span><br><span class="line">key = long_to_bytes(m)</span><br><span class="line">c = <span class="string">b&#x27;Just once,I will accompany you to see the world&#x27;</span></span><br><span class="line">flagen = strxor(key, c)</span><br><span class="line"><span class="built_in">print</span>(flagen)</span><br></pre></td></tr></table></figure><h2 id="smooth"><a href="#smooth" class="headerlink" title="smooth"></a>smooth</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> sieve_base,isPrime,getPrime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_vulnerable_prime</span>():</span><br><span class="line">    p=<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">136</span>):</span><br><span class="line">            smallp=random.choice(sieve_base)</span><br><span class="line">            p*=smallp</span><br><span class="line">        <span class="keyword">if</span> isPrime(p+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> p+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">P=get_vulnerable_prime()</span><br><span class="line">Q=getPrime(<span class="number">2048</span>)</span><br><span class="line">N=P*Q</span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,P-<span class="number">1729</span>):</span><br><span class="line">    flag=flag*i%P</span><br><span class="line"></span><br><span class="line">c=<span class="built_in">pow</span>(flag,e,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,<span class="built_in">hex</span>(c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N=&quot;</span>,<span class="built_in">hex</span>(N))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c= 0x3cc51d09c48948e2485820f6758fb10c7693c236acc527ad563ba8369c50a0bc3f650f39a871ee7ef127950ed916c5f4dc69894e11caf9d178cd7e8f9bf9af77e1c69384cc5444da64022b45636eeb5b7a221792880dd242be2bb99be3ed02c430c2b77d4912bec1619d664e066680910317c2bb0c87fafdf25f0a2400103278f557b8eca51d3b67d61098f1ab68da072bb2810596180afbc81a840cd24efef4d4113235160e725a5af4824dc716d758b3bc792f2458e979398e001b27e44d21682e2ef80ae94e21cd09a12e522ca2e569df72f012fa40341645445c6e68c6233a8a39e5b91eb14b1ccfa61c9bad25e8e3285a22da27cd506ddd63f207517a4e8ede00b104d8806ff4c0e3162c3de69169d7e584952655272b96d39d242bb83019c7eab1ceb0b4b287591e1e0a5b6378e70340a82d3430c5925d215f31fda6d9d0bccea240591b22a3d0f6b5bf4ddf1243d71aca0fd53045c352c8c5497ebcdbd7ac11083d63aba7c053604fda2430c317a4e04702b5ad539e110f101165b21dcd9fdb5ba7324acdba6a506244ce7c911197dfe067441fe7488d164c050f45ef6476aaf399cedde1793cceb8c21d88ec8ecf5e17df27586713d7dd9566ec5023cfef75422b73e2d5a932c661b3cfdf9c4bda12b64380d2be1aa957c3e1416e068937bafe79b8cf303296792388e9c197702e11e7ded6088ae992d352b23a4a27</span></span><br><span class="line"><span class="string">N= 0xdc77f076092cbe81c44789ccfc1b2ca55eabae65f44cf34382799e8bbb42d4d6c032bd897c21df1da401929d82deb56264823a757f6cacf63e0037146026cbab32ab9e4abc783dcabaac2b7ccc439937be3ab0fbf149524ff29ef0fe6f27e45215d74b40597c70e8207159dc7f542c2a6828500016480053dfc2d8dbf8fcdf6700640184c8f3318f7aab2e17e116edf680592f5eae951159bb8c20cfbd0cbab8b4b95925b5068038d0377a55a4d346ebbf53a1c2943b7c17e1b9d4a1b77916da2e15140b05b96655906942a07d04b7e25fa7521b3b7ae26eda68375a8b8ef2d5b4704a28168b236de97f24a663f0d0a3aeab47767dfe75a21662f5f25ef7f7d4b25c90fd7bcdd7137c23f03b6ea4209f8fb9b4628355e6ad62e6467d26666d3d1b0e6f078c5f3866413a6fcd3c1dc2ff3a5ab286e339d5c72f4d2f0473a4faddcba6b031bb6ec226fd4b319834b5029f09ea0ffeb5b6ed182d5a13675571b6708c38299118043390343e2f79edebd2ae0e0a765a3aebf776f54ca983cdae8547547cfc8430f7222aefa77301d7cc7c03b1451b6603028b21fea869d35138a9c83919985a91b3fdfa934f25a442cc10349b0ed6f2ee3955d40249e8b3fb9f1955534ee06cee41a3ad2d6ff7dbdb0f01e47b9e4d04f65232f5579135ae035e8ba2d1fe6465a730dcc8b9ba3a558ab38f040ea510757d25e92f886c50c24ad967f1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>光滑数（smooth number）是指可以分解成若干小素数乘积的正整数</p><p>通过费马小定理和 Pollard’s p-1 算法就可以分解 n，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">smooth</span>(<span class="params">N</span>):</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    n = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = powmod(a, n, N)</span><br><span class="line">        res = gcd(a - <span class="number">1</span>, N)</span><br><span class="line">        <span class="keyword">if</span> res != <span class="number">1</span> <span class="keyword">and</span> res != N:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        n += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>之后看到flag先是进了一个阶乘的循环，之后进行了rsa加密</p><p>我们先利用前面分解出的P、Q解出m</p><p>由阶乘联想到Wilson定理  (p - 1)! &#x3D;&#x3D; 1 * (p - 1) &#x3D;&#x3D; -1 (mod p)</p><p>这里flag已经乘了 (P-1730)! ，所以再构造循环，一直乘到结果为flag * (P - 1)! &#x3D;&#x3D; -flag(mod P)</p><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">smooth</span>(<span class="params">N</span>):</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    n = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = powmod(a, n, N)</span><br><span class="line">        res = gcd(a - <span class="number">1</span>, N)</span><br><span class="line">        <span class="keyword">if</span> res != <span class="number">1</span> <span class="keyword">and</span> res != N:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">N = <span class="string">&#x27;dc77f076092cbe81c44789ccfc1b2ca55eabae65f44cf34382799e8bbb42d4d6c032bd897c21df1da401929d82deb56264823a757f6cacf63e0037146026cbab32ab9e4abc783dcabaac2b7ccc439937be3ab0fbf149524ff29ef0fe6f27e45215d74b40597c70e8207159dc7f542c2a6828500016480053dfc2d8dbf8fcdf6700640184c8f3318f7aab2e17e116edf680592f5eae951159bb8c20cfbd0cbab8b4b95925b5068038d0377a55a4d346ebbf53a1c2943b7c17e1b9d4a1b77916da2e15140b05b96655906942a07d04b7e25fa7521b3b7ae26eda68375a8b8ef2d5b4704a28168b236de97f24a663f0d0a3aeab47767dfe75a21662f5f25ef7f7d4b25c90fd7bcdd7137c23f03b6ea4209f8fb9b4628355e6ad62e6467d26666d3d1b0e6f078c5f3866413a6fcd3c1dc2ff3a5ab286e339d5c72f4d2f0473a4faddcba6b031bb6ec226fd4b319834b5029f09ea0ffeb5b6ed182d5a13675571b6708c38299118043390343e2f79edebd2ae0e0a765a3aebf776f54ca983cdae8547547cfc8430f7222aefa77301d7cc7c03b1451b6603028b21fea869d35138a9c83919985a91b3fdfa934f25a442cc10349b0ed6f2ee3955d40249e8b3fb9f1955534ee06cee41a3ad2d6ff7dbdb0f01e47b9e4d04f65232f5579135ae035e8ba2d1fe6465a730dcc8b9ba3a558ab38f040ea510757d25e92f886c50c24ad967f1&#x27;</span></span><br><span class="line">NN = <span class="built_in">int</span>(N,<span class="number">16</span>)</span><br><span class="line"><span class="comment">#P = smooth(NN)</span></span><br><span class="line"><span class="comment">#print(P)</span></span><br><span class="line">c = <span class="string">&#x27;3cc51d09c48948e2485820f6758fb10c7693c236acc527ad563ba8369c50a0bc3f650f39a871ee7ef127950ed916c5f4dc69894e11caf9d178cd7e8f9bf9af77e1c69384cc5444da64022b45636eeb5b7a221792880dd242be2bb99be3ed02c430c2b77d4912bec1619d664e066680910317c2bb0c87fafdf25f0a2400103278f557b8eca51d3b67d61098f1ab68da072bb2810596180afbc81a840cd24efef4d4113235160e725a5af4824dc716d758b3bc792f2458e979398e001b27e44d21682e2ef80ae94e21cd09a12e522ca2e569df72f012fa40341645445c6e68c6233a8a39e5b91eb14b1ccfa61c9bad25e8e3285a22da27cd506ddd63f207517a4e8ede00b104d8806ff4c0e3162c3de69169d7e584952655272b96d39d242bb83019c7eab1ceb0b4b287591e1e0a5b6378e70340a82d3430c5925d215f31fda6d9d0bccea240591b22a3d0f6b5bf4ddf1243d71aca0fd53045c352c8c5497ebcdbd7ac11083d63aba7c053604fda2430c317a4e04702b5ad539e110f101165b21dcd9fdb5ba7324acdba6a506244ce7c911197dfe067441fe7488d164c050f45ef6476aaf399cedde1793cceb8c21d88ec8ecf5e17df27586713d7dd9566ec5023cfef75422b73e2d5a932c661b3cfdf9c4bda12b64380d2be1aa957c3e1416e068937bafe79b8cf303296792388e9c197702e11e7ded6088ae992d352b23a4a27&#x27;</span></span><br><span class="line">cc = <span class="built_in">int</span>(c,<span class="number">16</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">P = <span class="number">45130782138821231634664822924606644347274161463663927387578931639175223286413378324882645031302403289842551326638702711998962760517679897418281467484531163375644705075213662848721478455926415639437965574871053673938130437463383431907231224801316309790287364751279984404056565040242248326224648040650860211493169850992812996172453840449200075853777085801648416876006333273306936825124410389797307488083056497244608773881660250930270420195391832629035158125925203262309579280388854014294622011159984832956422300816768157089660974628522818677622546453173413252374696944407138466146678080076210538578674319834619518810099</span></span><br><span class="line">Q = <span class="number">19929480903966971877741359978214832777067673186776101767607985415984872967131783702304729626331577711025830876686674170433788564223656884574965375895417512648538448454114165043668565344845361735967533803734325629433944151906019295203849389937041766109566748588937702389000280859653264841778232075227804461734481644568063879619171473653153879467534960561551793532641987408308262590477344407917566949561595540828562062207376467975716207562802834742657134267225310067273840884699549038482335638587159643505585791895934244621169372816478043004416985427985158346066496193091020702283948166437350554644511384320505926737291</span></span><br><span class="line">phi = (P-<span class="number">1</span>)*(Q-<span class="number">1</span>)</span><br><span class="line">d = invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(cc,d,NN)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(P-<span class="number">1729</span>,P):</span><br><span class="line">    m = m*i%P</span><br><span class="line">flag = (-m)%P</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><h2 id="MiniMiniBackPack"><a href="#MiniMiniBackPack" class="headerlink" title="MiniMiniBackPack"></a>MiniMiniBackPack</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">size</span>):</span><br><span class="line">    s = <span class="number">1000</span></span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">        a = random.randint(s + <span class="number">1</span>, <span class="number">2</span> * s)</span><br><span class="line">        <span class="keyword">assert</span> a &gt; <span class="built_in">sum</span>(key)</span><br><span class="line">        key.append(a)</span><br><span class="line">        s += a</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">L = <span class="built_in">len</span>(<span class="built_in">bin</span>(m)[<span class="number">2</span>:])</span><br><span class="line">key = gen_key(L)</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">    c += key[i]**(m&amp;<span class="number">1</span>)</span><br><span class="line">    m &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>背包密码原理：<a href="https://ctf-wiki.org/crypto/asymmetric/knapsack/knapsack/">背包加密 - CTF Wiki (ctf-wiki.org)</a></p><p>本题的加密步骤如下：</p><p>首先flag转二进制后通过 gen_key 函数生成 key 数组，其为超递增序列</p><p>随后的for循环中，数组元素的指数 m&amp;1与 m的最低位&amp;1相等，之后又有m的移位，也就是说，这个循环的作用就是 从前往后以 key 数组元素为底、从后向前以m的每一位为指数，与c相加求和。</p><p>我们可以倒推解密：</p><p>首先加密过程中m是从低位到高位的，那么解密就要从高到底，而m的高位对应key的末尾元素，因此将key数组倒序方便求解。之后按c-key[i]是否大于0，判断m该位是否为1。这样循环下去就可以解出m，最后转换得到flag</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">kk = <span class="built_in">open</span>(<span class="string">&#x27;附件.txt&#x27;</span>).readlines()</span><br><span class="line">key = <span class="built_in">eval</span>(kk[<span class="number">0</span>])</span><br><span class="line">key = key[::-<span class="number">1</span>]</span><br><span class="line">c = <span class="number">2396891354790728703114360139080949406724802115971958909288237002299944566663978116795388053104330363637753770349706301118152757502162</span></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">if</span> c - i &gt; <span class="number">0</span>:</span><br><span class="line">        c -= i</span><br><span class="line">        m += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c -= <span class="number">1</span></span><br><span class="line">        m += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">m = <span class="built_in">int</span>(m,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF 2022 新生赛</title>
      <link href="/posts/948ede2a.html"/>
      <url>/posts/948ede2a.html</url>
      
        <content type="html"><![CDATA[<h1 id="SWPUCTF-2022-新生赛"><a href="#SWPUCTF-2022-新生赛" class="headerlink" title="SWPUCTF 2022 新生赛"></a>SWPUCTF 2022 新生赛</h1><h2 id="善哉善哉"><a href="#善哉善哉" class="headerlink" title="善哉善哉"></a>善哉善哉</h2><p>解开压缩包发现是一张jpg，图片备注提示要用到佛说和md5</p><p>010editor打开图片发现末尾的摩斯电码，解密得到：</p><p><code>新佛曰：諸隸僧降閦吽諸閦陀摩隸僧缽薩閦嚤降斯咤須閦色嘚嘇叻閦夷喃哆嚴吶菩若嘇耨咒閦愍閦囉耨所嚤閦嘇閦降陀叻羅宣吽眾阿愍菩修心降叻陀嚤吽蜜吶斯閦嘚愍吽若宣哆色塞囉伏嘇愍降嘇吽闍兜喼如</code></p><p>用新与佛论禅解得：<code>施主，此次前来，不知有何贵干?</code></p><p>最后爆破md5得到flag内容：<code>7551772a99379ed0ae6015a470c1e335</code></p><h2 id="什锦"><a href="#什锦" class="headerlink" title="什锦"></a>什锦</h2><p>CodeA为核心价值观编码，直接在线解码</p><p>结果为 <code>富强明主文明和谐</code></p><p>CodeB是一张猪猪的图片，联想到猪圈密码，也直接在线解码</p><p>结果为 <code>pigissocutewhyyoukillpig</code></p><p>CodeC是brainfuck加密，在线解密即可</p><p>结果为 <code>但是猪猪好好吃诶</code></p><p>最后flag就是 <code>MD5(富强明主文明和谐pigissocutewhyyoukillpig但是猪猪好好吃诶)</code></p><p>得到 <code>NSSCTF&#123;c05485d678cb8a6beb401f31d762532a&#125;</code></p><h2 id="小明文"><a href="#小明文" class="headerlink" title="小明文"></a>小明文</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> getflag</span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">phiN = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = invert(e, phiN)</span><br><span class="line">m = bytes_to_long(getflag().encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="comment">#c=128198926274489803523728445192921664</span></span><br><span class="line"><span class="comment">#flag=NSSCTF&#123;c&#125;</span></span><br></pre></td></tr></table></figure><p>小指数攻击，但此处n未知，先对c直接开e次方，发现符合要求，得到m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c=<span class="number">128198926274489803523728445192921664</span></span><br><span class="line"></span><br><span class="line">m = gmpy2.iroot(c,e)</span><br><span class="line"><span class="keyword">if</span> m[<span class="number">1</span>]:</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><h2 id="爆破MD5"><a href="#爆破MD5" class="headerlink" title="爆破MD5"></a>爆破MD5</h2><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data=&#x27;Boom_MD5****&#x27;</span><br><span class="line">flag=MD5(data)</span><br><span class="line">print(flag)</span><br><span class="line">#0618ac93d4631df725bceea74d0*****</span><br></pre></td></tr></table></figure><p>已知明文和密文的一部分，爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">                    m = hashlib.md5()  <span class="comment"># 获取一个md5加密算法对象</span></span><br><span class="line">                    m.update(<span class="built_in">str</span>(<span class="string">&#x27;Boom_MD5&#x27;</span> + <span class="built_in">chr</span>(i) + <span class="built_in">chr</span>(j) + <span class="built_in">chr</span>(k) + <span class="built_in">chr</span>(l)).encode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># 指定需要加密的字符串</span></span><br><span class="line">                    des = m.hexdigest()</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;0618ac93d4631df725bceea74d0&#x27;</span> <span class="keyword">in</span> des: </span><br><span class="line">                        <span class="built_in">print</span>(des)</span><br><span class="line"><span class="comment">#flag=NSSCTF&#123;0618ac93d4631df725bceea74d0fe071&#125;</span></span><br></pre></td></tr></table></figure><h2 id="yafu分解"><a href="#yafu分解" class="headerlink" title="yafu分解"></a>yafu分解</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> getflag</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">140</span>)</span><br><span class="line">q = getPrime(<span class="number">140</span>)</span><br><span class="line">n = p * q</span><br><span class="line">phiN = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = invert(e, phiN)</span><br><span class="line">m = bytes_to_long(getflag().encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span> + <span class="built_in">str</span>(n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="comment">#n=1851012829537540993346897265450988006921329733937556249710137670254755668838970157221</span></span><br><span class="line"><span class="comment">#c=1165608868963663237838494928147497339359377331987999335624507621030816298293537918937</span></span><br></pre></td></tr></table></figure><p>显然是yafu分解n得到p和q，随后常规RSA，最后要再进行一次位移13的凯撒解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p=<span class="number">1362310363870711901033415700690289289304517</span></span><br><span class="line">q=<span class="number">1358730637766188714476624560503309609820513</span></span><br><span class="line">c=<span class="number">1165608868963663237838494928147497339359377331987999335624507621030816298293537918937</span></span><br><span class="line">n = p * q</span><br><span class="line">phiN = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = invert(e, phiN)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#AFFPGS&#123;snzv1l_ov9_gur_g0_Jr1p0zr&#125;进行凯撒解密</span></span><br></pre></td></tr></table></figure><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><p>通过给出的加密代码，可以知道这是AES加密，利用base64编码，模式为CBC，空格填充</p><p>密钥为 <code>nssctfneedcrypto</code></p><p>偏移量为 <code>1229002635654321</code></p><p>条件充足，可以利用工具解出flag <code>NSSCTF&#123;NSS_CRYPTO_NEED_YOU_0000&#125;</code></p><h2 id="Welcome-to-Modern-Cryptograph"><a href="#Welcome-to-Modern-Cryptograph" class="headerlink" title="Welcome to Modern Cryptograph"></a>Welcome to Modern Cryptograph</h2><p>压缩包内给出公钥私钥和密文，利用工具直接解出flag</p><h2 id="Caesar-Ceaasr"><a href="#Caesar-Ceaasr" class="headerlink" title="Caesar?Ceaasr!"></a>Caesar?Ceaasr!</h2><p>题目：<code>AP&#123;07-p7q6-nr93FGn2r254-7q18q&#125;FSq8no-n2qp7r5</code></p><p>先尝试栅栏密码，发现每组3字的时候就能解出类似flag的字符串</p><p>随后凯撒解密即可</p><h2 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h2><p>搜索题目开头和结尾的信息，得知是一道电子签名题目，要用keybase解密</p><p><code>C:\Users\DELL&gt;keybase verify -m &quot;BEGIN KEYBASE SALTPACK SIGNED MESSAGE. kXR7VktZdyH7rvq v5weRa0zkYz2HcG 0ib8wufDr9Ehs3g 7IrA2TeYweQBqu5 rvbta3003UAuJWC wEK8SvoQqcYEHhK 8RqPvHbeSSUYmnG Y5vhz6AGYcMwcVn nrJq4FLfAD3IGQW NndngFmAhmxV47o mI9tEawz0RxA571 gQVz0BxZXTkwlBl BIMxq2Rj4MkkEcN rmB37Nd5qKhSy45 WPQwe25QsrEHa3F ud2mbgHHsUMV6LZ Nd01d. END KEYBASE SALTPACK SIGNED MESSAGE.&quot;</code></p><p>使用命令行操作解出flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN CRYPTO-2</title>
      <link href="/posts/728800f.html"/>
      <url>/posts/728800f.html</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN-CRYPTO-2"><a href="#CISCN-CRYPTO-2" class="headerlink" title="CISCN CRYPTO-2"></a>CISCN CRYPTO-2</h1><h2 id="CISCN-2023-初赛-Sign-in-passwd"><a href="#CISCN-2023-初赛-Sign-in-passwd" class="headerlink" title="[CISCN 2023 初赛]Sign_in_passwd"></a>[CISCN 2023 初赛]Sign_in_passwd</h2><p>题目：</p><p><code>j2rXjx8yjd=YRZWyTIuwRdbyQdbqR3R9iZmsScutj2iqj3/tidj1jd=D GHI3KLMNJOPQRSTUb%3DcdefghijklmnopWXYZ%2F12%2B406789VaqrstuvwxyzABCDEF5</code></p><p>题目分两行，一般第一行是密文，第二行是密钥</p><p>第二行密钥带有百分号，猜测是URL编码</p><p>URL解密后得到 <code>GHI3KLMNJOPQRSTUb=cdefghijklmnopWXYZ/12+406789VaqrstuvwxyzABCDEF5</code></p><p>用密钥对密文进行base64解码可以得出flag</p><p><img src="/images/cis2-1.png"></p><h2 id="CISCN-2022-东北赛区-math"><a href="#CISCN-2022-东北赛区-math" class="headerlink" title="[CISCN 2022 东北赛区]math"></a>[CISCN 2022 东北赛区]math</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&quot;flag&#123;&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">b&quot;&#125;&quot;</span>)</span><br><span class="line">message=bytes_to_long(flag)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params">nbit, dbit</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">2</span>*dbit &lt; nbit:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            a1 = getRandomNBitInteger(dbit)</span><br><span class="line">            b1 = getRandomNBitInteger(nbit//<span class="number">2</span>-dbit)</span><br><span class="line"></span><br><span class="line">            n1 = a1*b1+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> isPrime(n1):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            a2 = getRandomNBitInteger(dbit)</span><br><span class="line">            b2 = getRandomNBitInteger(nbit//<span class="number">2</span>-dbit)</span><br><span class="line"></span><br><span class="line">            n2=a2*b2+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            n3=a1*b2+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> isPrime(n2) <span class="keyword">and</span> isPrime(n3):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            a3=getRandomNBitInteger(dbit)</span><br><span class="line">            <span class="keyword">if</span> gmpy2.gcd(a3,a1*b1*a2*b2)==<span class="number">1</span>:</span><br><span class="line">                v1=(n1-<span class="number">1</span>)*(n2-<span class="number">1</span>) <span class="comment"># phi1</span></span><br><span class="line">                k=(a3*inverse(a3,v1)-<span class="number">1</span>)//v1  <span class="comment"># k * phi1=k * v1 = ed-1</span></span><br><span class="line">                v2=k*b1+<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> isPrime(v2):</span><br><span class="line">                    <span class="keyword">return</span> a3,n1*n2,n3*v2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg, pubkey</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(msg, pubkey[<span class="number">0</span>], pubkey[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">nbit = <span class="number">1024</span></span><br><span class="line">dbit = <span class="number">256</span></span><br><span class="line">e, n1, n2=keygen(nbit, dbit)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e =&#x27;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n1 =&#x27;</span>, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n2 =&#x27;</span>, n2)</span><br><span class="line">c1 = encrypt(message, [e, n1])</span><br><span class="line">c2 = encrypt(message, [e, n2])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enc1 =&#x27;</span>, c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enc2 =&#x27;</span>, c2)</span><br><span class="line"><span class="comment"># e = 86905291018330218127760596324522274547253465551209634052618098249596388694529</span></span><br><span class="line"><span class="comment"># n1 = 112187114035595515717020336420063560192608507634951355884730277020103272516595827630685773552014888608894587055283796519554267693654102295681730016199369580577243573496236556117934113361938190726830349853086562389955289707685145472794173966128519654167325961312446648312096211985486925702789773780669802574893</span></span><br><span class="line"><span class="comment"># n2 = 95727255683184071257205119413595957528984743590073248708202176413951084648626277198841459757379712896901385049813671642628441940941434989886894512089336243796745883128585743868974053010151180059532129088434348142499209024860189145032192068409977856355513219728891104598071910465809354419035148873624856313067</span></span><br><span class="line"><span class="comment"># enc1 = 71281698683006229705169274763783817580572445422844810406739630520060179171191882439102256990860101502686218994669784245358102850927955191225903171777969259480990566718683951421349181856119965365618782630111357309280954558872160237158905739584091706635219142133906953305905313538806862536551652537126291478865</span></span><br><span class="line"><span class="comment"># enc2 = 7333744583943012697651917897083326988621572932105018877567461023651527927346658805965099102481100945100738540533077677296823678241143375320240933128613487693799458418017975152399878829426141218077564669468040331339428477336144493624090728897185260894290517440392720900787100373142671471448913212103518035775</span></span><br></pre></td></tr></table></figure><p>连分数的应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inthroot</span>(<span class="params">a, n</span>):</span><br><span class="line">    <span class="keyword">if</span> a &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> a.nth_root(n, truncate_mode=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">n, phi</span>):</span><br><span class="line">    tot = n - phi + <span class="number">1</span></span><br><span class="line">    dif = inthroot(Integer(tot * tot - <span class="number">4</span> * n), <span class="number">2</span>)</span><br><span class="line">    dif = <span class="built_in">int</span>(dif)</span><br><span class="line">    p = (tot + dif) // <span class="number">2</span></span><br><span class="line">    q = (tot - dif) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> p * q == n:</span><br><span class="line">        <span class="keyword">return</span> p, q</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">86905291018330218127760596324522274547253465551209634052618098249596388694529</span></span><br><span class="line">n_1 = <span class="number">112187114035595515717020336420063560192608507634951355884730277020103272516595827630685773552014888608894587055283796519554267693654102295681730016199369580577243573496236556117934113361938190726830349853086562389955289707685145472794173966128519654167325961312446648312096211985486925702789773780669802574893</span></span><br><span class="line">n_2 = <span class="number">95727255683184071257205119413595957528984743590073248708202176413951084648626277198841459757379712896901385049813671642628441940941434989886894512089336243796745883128585743868974053010151180059532129088434348142499209024860189145032192068409977856355513219728891104598071910465809354419035148873624856313067</span></span><br><span class="line">enc_1 = <span class="number">71281698683006229705169274763783817580572445422844810406739630520060179171191882439102256990860101502686218994669784245358102850927955191225903171777969259480990566718683951421349181856119965365618782630111357309280954558872160237158905739584091706635219142133906953305905313538806862536551652537126291478865</span></span><br><span class="line">enc_2 = <span class="number">7333744583943012697651917897083326988621572932105018877567461023651527927346658805965099102481100945100738540533077677296823678241143375320240933128613487693799458418017975152399878829426141218077564669468040331339428477336144493624090728897185260894290517440392720900787100373142671471448913212103518035775</span></span><br><span class="line"></span><br><span class="line">c = continued_fraction(Integer(n_2) / Integer(n_1))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">150</span>, <span class="number">200</span>)):</span><br><span class="line">    k = c.numerator(i)</span><br><span class="line">    x = c.denominator(i)</span><br><span class="line">    <span class="keyword">if</span> GCD(e, k) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    res = inverse(e - k, e)</span><br><span class="line">    cc = crt(res, <span class="number">0</span>, e, x)</span><br><span class="line">    md = e * x // GCD(e, x)</span><br><span class="line"></span><br><span class="line">    st = cc + (n_1 // md) * md - <span class="number">100</span> * md</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        <span class="keyword">if</span> GCD(e, st) != <span class="number">1</span>:</span><br><span class="line">            st += md</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        d_1 = inverse(e, st)</span><br><span class="line">        flag = long_to_bytes(<span class="built_in">pow</span>(enc_1, d_1, n_1))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        st += md</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN CRYPTO-1</title>
      <link href="/posts/9e21d1b5.html"/>
      <url>/posts/9e21d1b5.html</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN-CRYPTO-1"><a href="#CISCN-CRYPTO-1" class="headerlink" title="CISCN CRYPTO-1"></a>CISCN CRYPTO-1</h1><h2 id="CISCN-2021初赛-rsa"><a href="#CISCN-2021初赛-rsa" class="headerlink" title="[CISCN 2021初赛]rsa"></a>[CISCN 2021初赛]rsa</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> text,flag</span><br><span class="line"><span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long,getPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> md5.new(text).hexdigest() == flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">msg1 = text[:xx]</span><br><span class="line">msg2 = text[xx:yy]</span><br><span class="line">msg3 = text[yy:]</span><br><span class="line"></span><br><span class="line">msg1 = bytes_to_long(msg1)</span><br><span class="line">msg2 = bytes_to_long(msg2)</span><br><span class="line">msg3 = bytes_to_long(msg3)</span><br><span class="line"></span><br><span class="line">p1 = getPrime(<span class="number">512</span>)</span><br><span class="line">q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">N1 = p1*q1</span><br><span class="line">e1 = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(msg1,e1,N1)</span><br><span class="line"><span class="built_in">print</span> (e1,N1)</span><br><span class="line"></span><br><span class="line">p2 = getPrime(<span class="number">512</span>)</span><br><span class="line">q2 = getPrime(<span class="number">512</span>)</span><br><span class="line">N2 = p2*q2</span><br><span class="line">e2 = <span class="number">17</span></span><br><span class="line">e3 = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(msg2,e2,N2)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(msg2,e3,N2)</span><br><span class="line"><span class="built_in">print</span> (e2,N2)</span><br><span class="line"><span class="built_in">print</span> (e3,N2)</span><br><span class="line"></span><br><span class="line">p3 = getPrime(<span class="number">512</span>)</span><br><span class="line">q3 = getPrime(<span class="number">512</span>)</span><br><span class="line">N3 = p3*q3</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(msg3,e3,N3)</span><br><span class="line"><span class="built_in">print</span> (e3,N3)</span><br><span class="line"><span class="built_in">print</span> p3&gt;&gt;<span class="number">200</span></span><br></pre></td></tr></table></figure><p>text被分为三段msg，要分别采用不同的攻击方式</p><p>首先，e1&#x3D;&#x3D;3，可知求msg1要用小指数攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c1 = <span class="number">19105765285510667553313898813498220212421177527647187802549913914263968945493144633390670605116251064550364704789358830072133349108808799075021540479815182657667763617178044110939458834654922540704196330451979349353031578518479199454480458137984734402248011464467312753683234543319955893</span></span><br><span class="line">e1 = <span class="number">3</span></span><br><span class="line">n1 = <span class="number">123814470394550598363280518848914546938137731026777975885846733672494493975703069760053867471836249473290828799962586855892685902902050630018312939010564945676699712246249820341712155938398068732866646422826619477180434858148938235662092482058999079105450136181685141895955574548671667320167741641072330259009</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    m = gmpy2.iroot(c1+k*n1,e1)</span><br><span class="line">    <span class="keyword">if</span>(m[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(m[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k=k+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>msg2用e2和e3加密生成两个密文，采用共模攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c22 = <span class="number">54995751387258798791895413216172284653407054079765769704170763023830130981480272943338445245689293729308200574217959018462512790523622252479258419498858307898118907076773470253533344877959508766285730509067829684427375759345623701605997067135659404296663877453758701010726561824951602615501078818914410959610</span></span><br><span class="line">c23 = <span class="number">91290935267458356541959327381220067466104890455391103989639822855753797805354139741959957951983943146108552762756444475545250343766798220348240377590112854890482375744876016191773471853704014735936608436210153669829454288199838827646402742554134017280213707222338496271289894681312606239512924842845268366950</span></span><br><span class="line">e2 = <span class="number">17</span></span><br><span class="line">e3 = <span class="number">65537</span></span><br><span class="line">n2 = <span class="number">111381961169589927896512557754289420474877632607334685306667977794938824018345795836303161492076539375959731633270626091498843936401996648820451019811592594528673182109109991384472979198906744569181673282663323892346854520052840694924830064546269187849702880332522636682366270177489467478933966884097824069977</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(gmpy2.gcdext(e2,e3))</span></span><br><span class="line"><span class="comment">#(mpz(1), mpz(30841), mpz(-8))</span></span><br><span class="line">s = <span class="number">30841</span></span><br><span class="line">t = -<span class="number">8</span></span><br><span class="line">m1 = <span class="built_in">pow</span>(c22,s,n2)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c23,t,n2)</span><br><span class="line">m = m1*m2%n2</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>msg3给出了移位之后的p值，因此是p高位泄露</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e3 = <span class="number">65537</span></span><br><span class="line">c3 = <span class="number">59213696442373765895948702611659756779813897653022080905635545636905434038306468935283962686059037461940227618715695875589055593696352594630107082714757036815875497138523738695066811985036315624927897081153190329636864005133757096991035607918106529151451834369442313673849563635248465014289409374291381429646</span></span><br><span class="line">n3 = <span class="number">113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147</span></span><br><span class="line">p3_high = <span class="number">7117286695925472918001071846973900342640107770214858928188419765628151478620236042882657992902</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用sage求p</span></span><br><span class="line"><span class="comment">#P = 7117286695925472918001071846973900342640107770214858928188419765628151478620236042882657992902</span></span><br><span class="line"><span class="comment">#n = 113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147</span></span><br><span class="line"><span class="comment">#kbits = 200 #丢失的位数</span></span><br><span class="line"><span class="comment">#p_fake = P &lt;&lt; kbits #高位准确低位不准确的p值</span></span><br><span class="line"><span class="comment">#pbits = p_fake.nbits() #p原本的二进制位数</span></span><br><span class="line"><span class="comment">#PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="comment">#f = x + p_fake</span></span><br><span class="line"><span class="comment">#p0 = f.small_roots(X = 2^kbits, beta = 0.4)[0] </span></span><br><span class="line"><span class="comment">#p = p0 + p_fake</span></span><br><span class="line"><span class="comment">#print(p)</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">11437038763581010263116493983733546014403343859218003707512796706928880848035239990740428334091106443982769386517753703890002478698418549777553268906496423</span></span><br><span class="line">q = n3//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e3,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c3,d,n3)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>最后组合三条msg，进行转换，得到flag内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m1 = <span class="number">267334379257781603687613466720913534310764480084016847281446486946801530200295563483353634338157</span></span><br><span class="line">m2 = <span class="number">4193305853284549103821195807609492624095031428085219879448342104337322945001387680236011960472296815293233144303730273979905837762067652913308898433728800864776794638198055607422503065410595894676740531680367227696622352026247676452540064020322619036125381146346603655445487695574824919137</span></span><br><span class="line">m3 = <span class="number">978430871477569051989776547659020359721056838635797362474311886436116962354292851181720060000979143571198378856012391742078510586927376783797757539078239088349758644144812898155106623543650953940606543822567423130350207207895380499638001151443841997176299548692737056724423631882</span></span><br><span class="line">m = long_to_bytes(m1)+long_to_bytes(m2)+long_to_bytes(m3)</span><br><span class="line"><span class="built_in">print</span>(md5(m).hexdigest())</span><br><span class="line"><span class="comment">#3943e8843a19149497956901e5d98639</span></span><br></pre></td></tr></table></figure><h2 id="CISCN-2022-西南-rsa"><a href="#CISCN-2022-西南-rsa" class="headerlink" title="[CISCN 2022 西南]rsa"></a>[CISCN 2022 西南]rsa</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;XXXXXXXX&#x27;</span></span><br><span class="line">p1 = getPrime(<span class="number">700</span>)</span><br><span class="line">r1 = getPrime(<span class="number">700</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    q1 = <span class="number">5</span>*p1+i</span><br><span class="line">n = p1*q1*r1</span><br><span class="line">p3 = <span class="built_in">pow</span>(p1,<span class="number">3</span>,n)</span><br><span class="line">q3 = <span class="built_in">pow</span>(q1,<span class="number">3</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p3)</span><br><span class="line"><span class="built_in">print</span>(q3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p3 = 29914513810588158800677413177910972738704129106546850855032986405861482276089830788972187432277517348644647399654780884571794069905291936470934226328931651386658328163535027343107140438177837479649822914209171476632450951930287641742344330471734177295804718555774395704231261550376220154493373703096062950390869299905383682611063374747752091585836452902373843865043412096365874638466683035848817858586173172058756256354758712684819253211761289032789542371351760915771791997388241121078055468403109260493642435791152671979552597191217179672328555740595434990908530985477314228867209314472001848844089467987561661918366232980944933533</span></span><br><span class="line"><span class="string">q3 = 66208618374366130551979192465001581263127328176551695213970812805980115496523825511250542987452691413485117902772315362811067501379171731387904074565035353566976164797769439898266222919741874340315356585585077141595328441423323822407738375537476582506440045835592730211502035261968878999959340204806442390319739977816872969200022096331677277225467021553564212725120939434924481787524609852608476848761521446441776154400518315701988027274150425936061679275540502720782853648148897480117033152064922234451671636288396704170234613549011854618414776342798740690128675106027908639984431432591397555541420243824539205614036979987830125678</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">P = getPrime(<span class="number">1024</span>)</span><br><span class="line">Q = getPrime(<span class="number">1024</span>)</span><br><span class="line">N = P * Q</span><br><span class="line">E = <span class="number">65537</span></span><br><span class="line">lcm = gmpy2.lcm(P-<span class="number">1</span>, Q-<span class="number">1</span>)</span><br><span class="line">e1 = gmpy2.invert(p1, lcm)</span><br><span class="line">e2 = gmpy2.invert(r1, lcm)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, E, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lcm)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">lcm = 4292158730589770192682795435047249488185453170529228019750042608688907718268448193363838203887391025871515871000364259326343790645215256385842265899206372365402431198699714374850409466996627163968391249416054093529090485677808301343590811445080871279796162536469847469761747058736980603093722710824453312207182881241846080117790728778291633761198069016865260030288832065807438020772711645648333908622890343009942617559434851450007195025869850769670769715654662127278293639938359741401336592219730356884542179574372134014927006215640945952229142436595334916765255426954857520777553915330597952622785359222832224632624</span></span><br><span class="line"><span class="string">c = 4288727484183191191687364666620023549392656794153112764357730676861570386983002380982803054964588111708662498647767438881892355599604826306427809017097724346976778230464708540600157055782723189971534549543664668430013171469625043063261219462210251726207552819381767396148632877168530609902046293626355744288863460554297860696918890189350721960355460410677203131993419723440382095665713164422367291153108363066159712951217816814873413423853338021627653555202253351957999686659021298525147460016557904084617528199284448056532965033560516083489693334373695545423561715471204868795248569806148395196572046378679014697206</span></span><br><span class="line"><span class="string">N  = 17168634922359080770731181740188997952741812682116912079000170434755630873073792773455352815549564103486063484001457037305375162580861025543369063596825489461609724794798857499401637867986508655873564997664216374116361942711233205374363245780323485119184650145879389879046988234947922412374890843297813248828996855478005656041814919367820336728271583686844991928889831691815821365423570311291064846736832327637944358854661523107817781673029406341843040857813841671405147146887291204140157388049394514390098066284975682117038362207142272098796924412602725857521665773622056312191400612944442008222587867782281556388669</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>首先p3是小指数加密得出的，iroot开三次方可以得到整数p1，for循环推出q1</p><p>因为p3&#x3D;&#x3D;pow(p1,3,n)，q3&#x3D;&#x3D;pow(q1,3,n)，所以pow(q1,3)-p3|n</p><p>又因为n&#x3D;&#x3D;p1·q1·r1，那么(pow(q1,3)-p3)&#x2F;&#x2F;p1&#x2F;&#x2F;q1&#x3D;&#x3D;k·r1</p><p>分解该数可以得到素数r1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p3 = <span class="number">29914513810588158800677413177910972738704129106546850855032986405861482276089830788972187432277517348644647399654780884571794069905291936470934226328931651386658328163535027343107140438177837479649822914209171476632450951930287641742344330471734177295804718555774395704231261550376220154493373703096062950390869299905383682611063374747752091585836452902373843865043412096365874638466683035848817858586173172058756256354758712684819253211761289032789542371351760915771791997388241121078055468403109260493642435791152671979552597191217179672328555740595434990908530985477314228867209314472001848844089467987561661918366232980944933533</span></span><br><span class="line">q3 = <span class="number">66208618374366130551979192465001581263127328176551695213970812805980115496523825511250542987452691413485117902772315362811067501379171731387904074565035353566976164797769439898266222919741874340315356585585077141595328441423323822407738375537476582506440045835592730211502035261968878999959340204806442390319739977816872969200022096331677277225467021553564212725120939434924481787524609852608476848761521446441776154400518315701988027274150425936061679275540502720782853648148897480117033152064922234451671636288396704170234613549011854618414776342798740690128675106027908639984431432591397555541420243824539205614036979987830125678</span></span><br><span class="line">p1 = <span class="number">3104278304063196628127274167035709732497973183149478174565689311226901027646392317544980271959467036404899516250338673400239351865520610439536310124218012685947217160554009152330023213681886617971326981463871077</span></span><br><span class="line">q1 = <span class="number">15521391520315983140636370835178548662489865915747390872828446556134505138231961587724901359797335182024497581251693367001196759327603052197681550621090063429736085802770045761650116068409433089856634907319355394</span></span><br><span class="line">kr1 = (<span class="built_in">pow</span>(q1,<span class="number">3</span>)-q3)//p1//q1</span><br><span class="line"><span class="comment">#print(kr1) 分解出k和r1</span></span><br><span class="line">r1 = <span class="number">4012254850248640149728766179729622181568889047306796355737648189126852678381304580418646601354334052377010272505434824159877622618692115359742428958423328302444038826295560279988456347430842777189171077679430323</span></span><br></pre></td></tr></table></figure><p>求解出E模lcm的逆元d，E模phi的逆元D，一定是E模lcm的逆元d的整数倍</p><p>最终检验得出D&#x3D;&#x3D;d</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lcm = <span class="number">4292158730589770192682795435047249488185453170529228019750042608688907718268448193363838203887391025871515871000364259326343790645215256385842265899206372365402431198699714374850409466996627163968391249416054093529090485677808301343590811445080871279796162536469847469761747058736980603093722710824453312207182881241846080117790728778291633761198069016865260030288832065807438020772711645648333908622890343009942617559434851450007195025869850769670769715654662127278293639938359741401336592219730356884542179574372134014927006215640945952229142436595334916765255426954857520777553915330597952622785359222832224632624</span></span><br><span class="line">c = <span class="number">4288727484183191191687364666620023549392656794153112764357730676861570386983002380982803054964588111708662498647767438881892355599604826306427809017097724346976778230464708540600157055782723189971534549543664668430013171469625043063261219462210251726207552819381767396148632877168530609902046293626355744288863460554297860696918890189350721960355460410677203131993419723440382095665713164422367291153108363066159712951217816814873413423853338021627653555202253351957999686659021298525147460016557904084617528199284448056532965033560516083489693334373695545423561715471204868795248569806148395196572046378679014697206</span></span><br><span class="line">N = <span class="number">17168634922359080770731181740188997952741812682116912079000170434755630873073792773455352815549564103486063484001457037305375162580861025543369063596825489461609724794798857499401637867986508655873564997664216374116361942711233205374363245780323485119184650145879389879046988234947922412374890843297813248828996855478005656041814919367820336728271583686844991928889831691815821365423570311291064846736832327637944358854661523107817781673029406341843040857813841671405147146887291204140157388049394514390098066284975682117038362207142272098796924412602725857521665773622056312191400612944442008222587867782281556388669</span></span><br><span class="line">e1 = gmpy2.invert(p1, lcm)</span><br><span class="line">e2 = gmpy2.invert(r1, lcm)</span><br><span class="line">E = <span class="number">65537</span></span><br><span class="line">d = gmpy2.invert(E,lcm)</span><br><span class="line"><span class="comment">#E模phi的逆元D，一定是E模lcm的逆元d的整数倍</span></span><br><span class="line"><span class="comment">#最终检验得出D==d</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,N)))</span><br></pre></td></tr></table></figure><p>也可以用维纳攻击求m的解法：_[ciscn 2022 西南]rsa_Bnessy的博客-CSDN博客](<a href="https://blog.csdn.net/weixin_44895005/article/details/125692522?ops_request_misc=&request_id=&biz_id=102&utm_term=%5BCISCN">https://blog.csdn.net/weixin_44895005/article/details/125692522?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=[CISCN</a> 2022 西南]&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-0-125692522.142^v88^control_2,239^v2^insert_chatgpt&amp;spm&#x3D;1018.2226.3001.4187)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF 2023-CRYPTO-2</title>
      <link href="/posts/8d2b1d6a.html"/>
      <url>/posts/8d2b1d6a.html</url>
      
        <content type="html"><![CDATA[<h1 id="LitCTF-2023-CRYPTO-2"><a href="#LitCTF-2023-CRYPTO-2" class="headerlink" title="LitCTF 2023-CRYPTO-2"></a>LitCTF 2023-CRYPTO-2</h1><h2 id="P-Leak"><a href="#P-Leak" class="headerlink" title="P_Leak"></a>P_Leak</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">m=bytes_to_long(<span class="string">b&#x27;xxxx&#x27;</span>)</span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=inverse(e,phi)</span><br><span class="line">dp=d%(p-<span class="number">1</span>)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dp=&quot;</span>,dp)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="comment">#dp= 5892502924236878675675338970704766304539618343869489297045857272605067962848952532606770917225218534430490745895652561015493032055636004130931491316020329</span></span><br><span class="line"><span class="comment">#n= 50612159190225619689404794427464916374543237300894011803225784470008992781409447214236779975896311093686413491163221778479739252804271270231391599602217675895446538524670610623369953168412236472302812808639218392319634397138871387898452935081756580084070333246950840091192420542761507705395568904875746222477</span></span><br><span class="line"><span class="comment">#c= 39257649468514605476432946851710016346016992413796229928386230062780829495844059368939749930876895443279723032641876662714088329296631207594999580050131450251288839714711436117326769029649419789323982613380617840218087161435260837263996287628129307328857086987521821533565738409794866606381789730458247531619</span></span><br></pre></td></tr></table></figure><p>基本的dp泄露问题，题目已知dp、n、c、e，要求p，</p><p>dp·e&#x3D;&#x3D;X·(p-1)+1 只要遍历X，找出满足是整数且能够整除n的条件的p，然后按老路子做即可</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">dp = <span class="number">5892502924236878675675338970704766304539618343869489297045857272605067962848952532606770917225218534430490745895652561015493032055636004130931491316020329</span></span><br><span class="line">n = <span class="number">50612159190225619689404794427464916374543237300894011803225784470008992781409447214236779975896311093686413491163221778479739252804271270231391599602217675895446538524670610623369953168412236472302812808639218392319634397138871387898452935081756580084070333246950840091192420542761507705395568904875746222477</span></span><br><span class="line">c = <span class="number">39257649468514605476432946851710016346016992413796229928386230062780829495844059368939749930876895443279723032641876662714088329296631207594999580050131450251288839714711436117326769029649419789323982613380617840218087161435260837263996287628129307328857086987521821533565738409794866606381789730458247531619</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">    p=(dp*e-<span class="number">1</span>)//i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n%p == <span class="number">0</span>:</span><br><span class="line">        q = n//p</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="e的学问"><a href="#e的学问" class="headerlink" title="e的学问"></a>e的学问</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">m=bytes_to_long(<span class="string">b&#x27;xxxxxx&#x27;</span>)</span><br><span class="line">p=getPrime(<span class="number">256</span>)</span><br><span class="line">q=getPrime(<span class="number">256</span>)</span><br><span class="line">e=<span class="number">74</span></span><br><span class="line">n=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>,q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="comment">#p= 86053582917386343422567174764040471033234388106968488834872953625339458483149</span></span><br><span class="line"><span class="comment">#q= 72031998384560188060716696553519973198388628004850270102102972862328770104493</span></span><br><span class="line"><span class="comment">#c= 3939634105073614197573473825268995321781553470182462454724181094897309933627076266632153551522332244941496491385911139566998817961371516587764621395810123</span></span><br></pre></td></tr></table></figure><p>该题考查的是e和phi不互素的情况，步骤是：先求gcd(e,phi)，e&#x2F;&#x2F;gcd一定与phi互素，这样可以求出来m^gcd，再对其开gcd次根就能得到真正的m</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e=<span class="number">74</span></span><br><span class="line">p= <span class="number">86053582917386343422567174764040471033234388106968488834872953625339458483149</span></span><br><span class="line">q= <span class="number">72031998384560188060716696553519973198388628004850270102102972862328770104493</span></span><br><span class="line">c= <span class="number">3939634105073614197573473825268995321781553470182462454724181094897309933627076266632153551522332244941496491385911139566998817961371516587764621395810123</span></span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">gcd1=gmpy2.gcd(e,phi)</span><br><span class="line">e1=e//gcd1</span><br><span class="line">d1=gmpy2.invert(e1,phi)</span><br><span class="line">m1=<span class="built_in">pow</span>(c,d1,n)</span><br><span class="line">m=gmpy2.iroot(m1,gcd1)[<span class="number">0</span>]</span><br><span class="line">flag=long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="easy-math"><a href="#easy-math" class="headerlink" title="easy_math"></a>easy_math</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p*q</span><br><span class="line">hint = p**<span class="number">3</span>-q**<span class="number">5</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint = <span class="subst">&#123;hint&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 2230791374046346835775433548641067593691369485828070649075162141394476183565187654365131822111419512477883295758461313983481545182887415447403634720326639070667688614534290859200753589300443797</span></span><br><span class="line"><span class="string">c = 2168563038335029902089976057856861885635845445863841607485310134441400500612435296818745930370268060353437465666224400129105788787423156958336380480503762222278722770240792709450637433509537280</span></span><br><span class="line"><span class="string">hint = 392490868359411675557103683163021977774935163924606169241731307258226973701652855448542714274348304997416149742779376023311152228735117186027560227613656229190807480010615064372521942836446425717660375242197759811804760170129768647414717571386950790115746414735411766002368288743086845078803312201707960465419405926186622999423245762570917629351110970429987377475979058821154568001902541710817731089463915930932142007312230897818177067675996751110894377356758932</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>n&#x3D;p·q   hint&#x3D;p^3-q^5   n和hint已知，两个未知数两个方程，可以解出p和q的数值，之后便是常规步骤</p><p>解方程组要引入sympy这一符号数学库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">2230791374046346835775433548641067593691369485828070649075162141394476183565187654365131822111419512477883295758461313983481545182887415447403634720326639070667688614534290859200753589300443797</span></span><br><span class="line">c = <span class="number">2168563038335029902089976057856861885635845445863841607485310134441400500612435296818745930370268060353437465666224400129105788787423156958336380480503762222278722770240792709450637433509537280</span></span><br><span class="line">hint = <span class="number">392490868359411675557103683163021977774935163924606169241731307258226973701652855448542714274348304997416149742779376023311152228735117186027560227613656229190807480010615064372521942836446425717660375242197759811804760170129768647414717571386950790115746414735411766002368288743086845078803312201707960465419405926186622999423245762570917629351110970429987377475979058821154568001902541710817731089463915930932142007312230897818177067675996751110894377356758932</span></span><br><span class="line">p,q = symbols(<span class="string">&#x27;p,q&#x27;</span>)  <span class="comment">#设变量为p、q</span></span><br><span class="line">eq1 = p ** <span class="number">3</span> - q ** <span class="number">5</span> - hint  <span class="comment">#等式1</span></span><br><span class="line">eq2 = p * q - n  <span class="comment">#等式2</span></span><br><span class="line">sol = solve([eq1,eq2],[p,q])<span class="comment">#解出p和q的值 可以用print(sol)来查看</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">7321664971326604351487965655099805117568571010588695608389113791312918573783115429227542573780838065461696504325762281209452761930184231131129306271846427</span></span><br><span class="line">q = <span class="number">304683618109085947723284393392507415311</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="The-same-common-divisor"><a href="#The-same-common-divisor" class="headerlink" title="The same common divisor"></a>The same common divisor</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">m=bytes_to_long(<span class="string">b&#x27;xxxxxx&#x27;</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q1=getPrime(<span class="number">1024</span>)</span><br><span class="line">q2=getPrime(<span class="number">1024</span>)</span><br><span class="line">n1=p*q1</span><br><span class="line">n2=p*q2</span><br><span class="line">c1=<span class="built_in">pow</span>(m,e,n1)</span><br><span class="line">c2=<span class="built_in">pow</span>(m,e,n2)</span><br><span class="line">n3=n1^n2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n1=&#x27;</span>,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n3=&#x27;</span>,n3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c1=&#x27;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c2=&#x27;</span>,c2)</span><br><span class="line"><span class="comment">#n1= 9852079772293301283705208653824307027320071498525390578148444258198605733768947108049676831872672654449631852459503049139275329796717506126689710613873813880735666507857022786447784753088176997374711523987152412069255685005264853118880922539048290400078105858759506186417678959028622484823376958194324034590514104266608644398160457382895380141070373685334979803658172378382884352616985632157233900719194944197689860219335238499593658894630966428723660931647038577670614850305719449893199713589368780231046895222526070730152875112477675102652862254926169713030701937231206405968412044029177246460558028793385980934233</span></span><br><span class="line"><span class="comment">#n3= 4940268030889181135441311597961813780480775970170156650560367030148383674257975796516865571557828263935532335958510269356443566533284856608454193676600884849913964971291145182724888816164723930966472329604608512023988191536173112847915884014445539739070437180314205284883149421228744714989392788108329929896637182055266508625177260492776962915873036873839946591259443753924970795669864031580632650140641456386202636466624658715315856453572441182758855085077441336516178544978457053552156714181607801760605521338788424464551796638531143900048375037218585999440622490119344971822707261432953755569507740550277088437182</span></span><br><span class="line"><span class="comment">#c1= 7066425618980522033304943700150361912772559890076173881522840300333719222157667104461410726444725540513601550570478331917063911791020088865705346188662290524599499769112250751103647749860198318955619903728724860941709527724500004142950768744200491448875522031555564384426372047270359602780292587644737898593450148108629904854675417943165292922990980758572264063039172969633878015560735737699147707712154627358077477591293746136250207139049702201052305840453700782016480965369600667516646007546442708862429431724013679189842300429421340122052682391471347471758814138218632022564279296594279507382548264409296929401260</span></span><br><span class="line"><span class="comment">#c2= 854668035897095127498890630660344701894030345838998465420605524714323454298819946231147930930739944351187708040037822108105697983018529921300277486094149269105712677374751164879455815185393395371001495146490416978221501351569800028842842393448555836910486037183218754013655794027528039329299851644787006463456162952383099752894635657833907958930587328480492546831654755627949756658554724024525108575961076341962292900510328611128404001877137799465932130220386963518903892403159969133882215092783063943679288192557384595152566356483424061922742307738886179947575613661171671781544283180451958232826666741028590085269</span></span><br></pre></td></tr></table></figure><p>n1^n3&#x3D;&#x3D;n2那么n2&#x3D;&#x3D;n1^n3，于是p&#x3D;&#x3D;gcd(n1,n2)，随后可知q1,q2，按常规做即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n1= <span class="number">9852079772293301283705208653824307027320071498525390578148444258198605733768947108049676831872672654449631852459503049139275329796717506126689710613873813880735666507857022786447784753088176997374711523987152412069255685005264853118880922539048290400078105858759506186417678959028622484823376958194324034590514104266608644398160457382895380141070373685334979803658172378382884352616985632157233900719194944197689860219335238499593658894630966428723660931647038577670614850305719449893199713589368780231046895222526070730152875112477675102652862254926169713030701937231206405968412044029177246460558028793385980934233</span></span><br><span class="line">n3= <span class="number">4940268030889181135441311597961813780480775970170156650560367030148383674257975796516865571557828263935532335958510269356443566533284856608454193676600884849913964971291145182724888816164723930966472329604608512023988191536173112847915884014445539739070437180314205284883149421228744714989392788108329929896637182055266508625177260492776962915873036873839946591259443753924970795669864031580632650140641456386202636466624658715315856453572441182758855085077441336516178544978457053552156714181607801760605521338788424464551796638531143900048375037218585999440622490119344971822707261432953755569507740550277088437182</span></span><br><span class="line">c1= <span class="number">7066425618980522033304943700150361912772559890076173881522840300333719222157667104461410726444725540513601550570478331917063911791020088865705346188662290524599499769112250751103647749860198318955619903728724860941709527724500004142950768744200491448875522031555564384426372047270359602780292587644737898593450148108629904854675417943165292922990980758572264063039172969633878015560735737699147707712154627358077477591293746136250207139049702201052305840453700782016480965369600667516646007546442708862429431724013679189842300429421340122052682391471347471758814138218632022564279296594279507382548264409296929401260</span></span><br><span class="line">c2= <span class="number">854668035897095127498890630660344701894030345838998465420605524714323454298819946231147930930739944351187708040037822108105697983018529921300277486094149269105712677374751164879455815185393395371001495146490416978221501351569800028842842393448555836910486037183218754013655794027528039329299851644787006463456162952383099752894635657833907958930587328480492546831654755627949756658554724024525108575961076341962292900510328611128404001877137799465932130220386963518903892403159969133882215092783063943679288192557384595152566356483424061922742307738886179947575613661171671781544283180451958232826666741028590085269</span></span><br><span class="line">n2=n1^n3</span><br><span class="line">p=gmpy2.gcd(n1,n2)</span><br><span class="line">q1=n1//p</span><br><span class="line">q2=n2//p</span><br><span class="line">phi1=(p-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">phi2=(p-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">d1=gmpy2.invert(e,phi1)</span><br><span class="line">d2=gmpy2.invert(e,phi2)</span><br><span class="line">m1=<span class="built_in">pow</span>(c1,d1,n1)</span><br><span class="line">m2=<span class="built_in">pow</span>(c2,d2,n2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line"><span class="comment">#print(long_to_bytes(m2))也可</span></span><br></pre></td></tr></table></figure><h2 id="Euler"><a href="#Euler" class="headerlink" title="Euler"></a>Euler</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="built_in">pow</span>(m,n-p-q+<span class="number">3</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 115140122725890943990475192890188343698762004010330526468754961357872096040956340092062274481843042907652320664917728267982409212988849109825729150839069369465433531269728824368749655421846730162477193420534803525810831025762500375845466064264837531992986534097821734242082950392892529951104643690838773406549</span></span><br><span class="line"><span class="string">c = 406480424882876909664869928877322864482740577681292497936198951316587691545267772748204383995815523935005725558478033908575228532559165174398668885819826720515607326399097899572022020453298441</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>根据欧拉定理，m^φ(n)&#x3D;&#x3D;1(mod n)，即m^(pq-p-q+1)&#x3D;&#x3D;1(mod n)</p><p>那么c&#x3D;&#x3D;pow(m,pq-p-q+3,n)&#x3D;&#x3D;pow(m,2,n)</p><p>对c开平方根就能得到m</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">115140122725890943990475192890188343698762004010330526468754961357872096040956340092062274481843042907652320664917728267982409212988849109825729150839069369465433531269728824368749655421846730162477193420534803525810831025762500375845466064264837531992986534097821734242082950392892529951104643690838773406549</span></span><br><span class="line">c = <span class="number">406480424882876909664869928877322864482740577681292497936198951316587691545267772748204383995815523935005725558478033908575228532559165174398668885819826720515607326399097899572022020453298441</span></span><br><span class="line">m=gmpy2.iroot(c,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="隐晦的聊天记录"><a href="#隐晦的聊天记录" class="headerlink" title="隐晦的聊天记录"></a>隐晦的聊天记录</h2><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">出题人:6c73d5240a948c86981bc294814d</span><br><span class="line">某不知名收件人：收到消息attack at dawn</span><br><span class="line">出题人:xxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">某不知名收件人：收到消息Monday or Thur</span><br><span class="line">已知出题人和收件人手中的密钥相同，请解出出题人第二次发送的密文呢（16进制，字母小写，解得的结果记得要加上LitCTF&#123;&#125;哦。）</span><br></pre></td></tr></table></figure><p>提示是OPT加密，两人密钥相同，第一次的密文和明文异或得到密钥，再和另一明文异或即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0x6c73d5240a948c86981bc294814d</span></span><br><span class="line">b = <span class="string">&#x27;attack at dawn&#x27;</span></span><br><span class="line">c=<span class="string">&#x27;Monday or Thur&#x27;</span></span><br><span class="line"><span class="comment">#下面将b转换成十六进制</span></span><br><span class="line"><span class="comment">#hex_b = &#x27;&#x27;</span></span><br><span class="line"><span class="comment">#for i in b:</span></span><br><span class="line"><span class="comment">#    hex_chr = hex(ord(i))[2:]#去掉前面的0x标识</span></span><br><span class="line"><span class="comment">#    hex_b += hex_chr</span></span><br><span class="line"><span class="comment">#print(hex_b)</span></span><br><span class="line">hex_b = <span class="number">0x61747461636b206174206461776e</span></span><br><span class="line"><span class="comment">#下面将c转换成十六进制</span></span><br><span class="line"><span class="comment">#hex_c = &#x27;&#x27;</span></span><br><span class="line"><span class="comment">#for i in c:</span></span><br><span class="line"><span class="comment">#    hex_chr = hex(ord(i))[2:]</span></span><br><span class="line"><span class="comment">#    hex_c += hex_chr</span></span><br><span class="line"><span class="comment">#print(hex_c)</span></span><br><span class="line">hex_c = <span class="number">0x4d6f6e646179206f722054687572</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(a^hex_b^hex_c)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h2 id="Where-is-P"><a href="#Where-is-P" class="headerlink" title="Where is P?"></a>Where is P?</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">m=bytes_to_long(<span class="string">b&#x27;XXXX&#x27;</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">P=p&gt;&gt;<span class="number">340</span></span><br><span class="line"><span class="built_in">print</span>(P)</span><br><span class="line">a=<span class="built_in">pow</span>(P,<span class="number">3</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a=&quot;</span>,a)</span><br><span class="line"><span class="comment">#n= 24479907029118467064460793139240403258697681144532146836881997837526487637306591893357774423547391867013441147680031968367449693796015901951120514250935018725570026327610524687128709707340727799633444550317834481416507364804274266363478822257132586592232042108076935945436358397787891169163821061005102693505011197453089873909085170776511350713452580692963748763166981047023704528272230392479728897831538235554137129584665886878574314566549330671483636900134584707867654841021494106881794644469229030140144595938886437242375435914268001721437309283611088568191856208951867342004280893021653793820874747638264412653721</span></span><br><span class="line"><span class="comment">#c= 6566517934961780069851397787369134601399136324586682773286046135297104713708615112015588908759927424841719937322574766875308296258325687730658550956691921018605724308665345526807393669538103819281108643141723589363068859617542807984954436567078438099854340705208503317269397632214274507740533638883597409138972287275965697689862321166613821995226000320597560745749780942467497435742492468670016480112957715214640939272457886646483560443432985954141177463448896521810457886108311082101521263110578485768091003174683555938678346359150123350656418123918738868598042533211541966786594006129134087145798672161268647536724</span></span><br><span class="line"><span class="comment">#a= 22184346235325197613876257964606959796734210361241668065837491428527234174610482874427139453643569493268653377061231169173874401139203757698022691973395609028489121048788465356158531144787135876251872262389742175830840373281181905217510352227396545981674450409488394636498629147806808635157820030290630290808150235068140864601098322473572121965126109735529553247807211711005936042322910065304489093415276688746634951081501428768318098925390576594162098506572668709475140964400043947851427774550253257759990959997691631511262768785787474750441024242552456956598974533625095249106992723798354594261566983135394923063605</span></span><br></pre></td></tr></table></figure><p>开始可以爆破求得P，但是P&#x3D;&#x3D;p&gt;&gt;340，如果直接让p&#x3D;P&lt;&lt;340，并不正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n= <span class="number">24479907029118467064460793139240403258697681144532146836881997837526487637306591893357774423547391867013441147680031968367449693796015901951120514250935018725570026327610524687128709707340727799633444550317834481416507364804274266363478822257132586592232042108076935945436358397787891169163821061005102693505011197453089873909085170776511350713452580692963748763166981047023704528272230392479728897831538235554137129584665886878574314566549330671483636900134584707867654841021494106881794644469229030140144595938886437242375435914268001721437309283611088568191856208951867342004280893021653793820874747638264412653721</span></span><br><span class="line">a= <span class="number">22184346235325197613876257964606959796734210361241668065837491428527234174610482874427139453643569493268653377061231169173874401139203757698022691973395609028489121048788465356158531144787135876251872262389742175830840373281181905217510352227396545981674450409488394636498629147806808635157820030290630290808150235068140864601098322473572121965126109735529553247807211711005936042322910065304489093415276688746634951081501428768318098925390576594162098506572668709475140964400043947851427774550253257759990959997691631511262768785787474750441024242552456956598974533625095249106992723798354594261566983135394923063605</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">    a1=a+i*n</span><br><span class="line">    P,t=gmpy2.iroot(a1,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span>(t):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(P)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#i=11</span></span><br><span class="line"><span class="comment">#P=66302204855869216148926460265779698576660998574555407124043768605865908069722142097621926304390549253688814246272903647124801382742681337653915017783954290069842646020090511605930590064443141710086879668946</span></span><br></pre></td></tr></table></figure><p>这是高位泄露攻击，使用CopperSmith脚本可以解出p</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">P = 66302204855869216148926460265779698576660998574555407124043768605865908069722142097621926304390549253688814246272903647124801382742681337653915017783954290069842646020090511605930590064443141710086879668946</span><br><span class="line">n = 24479907029118467064460793139240403258697681144532146836881997837526487637306591893357774423547391867013441147680031968367449693796015901951120514250935018725570026327610524687128709707340727799633444550317834481416507364804274266363478822257132586592232042108076935945436358397787891169163821061005102693505011197453089873909085170776511350713452580692963748763166981047023704528272230392479728897831538235554137129584665886878574314566549330671483636900134584707867654841021494106881794644469229030140144595938886437242375435914268001721437309283611088568191856208951867342004280893021653793820874747638264412653721</span><br><span class="line"></span><br><span class="line">kbits = 340 #丢失的位数</span><br><span class="line">p_fake = P &lt;&lt; kbits #高位准确低位不准确的p值</span><br><span class="line">pbits = p_fake.nbits() #p原本的二进制位数</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p_fake</span><br><span class="line">p0 = f.small_roots(X = 2^kbits, beta = 0.4)[0] </span><br><span class="line">p = p0 + p_fake</span><br><span class="line">print(p)</span><br><span class="line"></span><br><span class="line">#p = 148500014720728755901835170447203030242113125689825190413979909224639701026120883281188694701625473553602289432755479244507504340127322979884849883842306663453018960250560834067472479033116264539127330613635903666209920113813160301513820286874124210921593865507657148933555053341577090100101684021531775022459</span><br></pre></td></tr></table></figure><p>得到p之后求出q，按常规做即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n= <span class="number">24479907029118467064460793139240403258697681144532146836881997837526487637306591893357774423547391867013441147680031968367449693796015901951120514250935018725570026327610524687128709707340727799633444550317834481416507364804274266363478822257132586592232042108076935945436358397787891169163821061005102693505011197453089873909085170776511350713452580692963748763166981047023704528272230392479728897831538235554137129584665886878574314566549330671483636900134584707867654841021494106881794644469229030140144595938886437242375435914268001721437309283611088568191856208951867342004280893021653793820874747638264412653721</span></span><br><span class="line">c= <span class="number">6566517934961780069851397787369134601399136324586682773286046135297104713708615112015588908759927424841719937322574766875308296258325687730658550956691921018605724308665345526807393669538103819281108643141723589363068859617542807984954436567078438099854340705208503317269397632214274507740533638883597409138972287275965697689862321166613821995226000320597560745749780942467497435742492468670016480112957715214640939272457886646483560443432985954141177463448896521810457886108311082101521263110578485768091003174683555938678346359150123350656418123918738868598042533211541966786594006129134087145798672161268647536724</span></span><br><span class="line">p=<span class="number">148500014720728755901835170447203030242113125689825190413979909224639701026120883281188694701625473553602289432755479244507504340127322979884849883842306663453018960250560834067472479033116264539127330613635903666209920113813160301513820286874124210921593865507657148933555053341577090100101684021531775022459</span></span><br><span class="line"></span><br><span class="line">q= n//p</span><br><span class="line">phi= (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d= gmpy2.invert(e,phi)</span><br><span class="line">m= <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="我测你vva"><a href="#我测你vva" class="headerlink" title="我测你vva"></a>我测你vva</h2><p>题目：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Encrypto</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String flag=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> cipher;</span><br><span class="line">        <span class="type">char</span>[] arr;</span><br><span class="line">        arr=flag.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;flag.length(); i++) &#123;</span><br><span class="line">           <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            cipher=Integer.valueOf(arr[i]);</span><br><span class="line">            cipher=cipher+i;</span><br><span class="line">            System.out.print((<span class="type">char</span>)cipher);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">            cipher=Integer.valueOf(arr[i]);</span><br><span class="line">            cipher=cipher-i;</span><br><span class="line">            System.out.print((<span class="type">char</span>)cipher);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cipher=HYEQJvPZ~X@+Bp</span></span><br></pre></td></tr></table></figure><p>写python脚本逆推即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cipher=<span class="string">&#x27;HYEQJvPZ~X@+Bp&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">    <span class="keyword">if</span> j%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)-j)</span><br><span class="line">    <span class="keyword">if</span> j%<span class="number">2</span>!=<span class="number">0</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)+j)</span><br><span class="line">    <span class="keyword">if</span> j==<span class="built_in">len</span>(cipher):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    j+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="babyLCG"><a href="#babyLCG" class="headerlink" title="babyLCG"></a>babyLCG</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">bit_len = m.bit_length()</span><br><span class="line">a = getPrime(bit_len)</span><br><span class="line">b = getPrime(bit_len)</span><br><span class="line">p = getPrime(bit_len+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">seed = m</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%p</span><br><span class="line">    result.append(seed)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">result = [699175025435513913222265085178805479192132631113784770123757454808149151697608216361550466652878, 193316257467202036043918706856603526262215679149886976392930192639917920593706895122296071643390, 1624937780477561769577140419364339298985292198464188802403816662221142156714021229977403603922943, 659236391930254891621938248429619132720452597526316230221895367798170380093631947248925278766506, 111407194162820942281872438978366964960570302720229611594374532025973998885554449685055172110829, 1415787594624585063605356859393351333923892058922987749824214311091742328340293435914830175796909, 655057648553921580727111809001898496375489870757705297406250204329094679858718932270475755075698, 1683427135823894785654993254138434580152093609545092045940376086714124324274044014654085676620851, 492953986125248558013838257810313149490245209968714980288031443714890115686764222999717055064509, 70048773361068060773257074705619791938224397526269544533030294499007242937089146507674570192265]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>该题为线性同余方法（LCG），具体原理见 <a href="https://blog.csdn.net/XiongSiqi_blog/article/details/130790621?spm=1001.2014.3001.5502">记 LCG 例题_Emmaaaaaaaaaa的博客-CSDN博客</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line">s = [<span class="number">699175025435513913222265085178805479192132631113784770123757454808149151697608216361550466652878</span>, <span class="number">193316257467202036043918706856603526262215679149886976392930192639917920593706895122296071643390</span>, <span class="number">1624937780477561769577140419364339298985292198464188802403816662221142156714021229977403603922943</span>, <span class="number">659236391930254891621938248429619132720452597526316230221895367798170380093631947248925278766506</span>, <span class="number">111407194162820942281872438978366964960570302720229611594374532025973998885554449685055172110829</span>, <span class="number">1415787594624585063605356859393351333923892058922987749824214311091742328340293435914830175796909</span>, <span class="number">655057648553921580727111809001898496375489870757705297406250204329094679858718932270475755075698</span>, <span class="number">1683427135823894785654993254138434580152093609545092045940376086714124324274044014654085676620851</span>, <span class="number">492953986125248558013838257810313149490245209968714980288031443714890115686764222999717055064509</span>, <span class="number">70048773361068060773257074705619791938224397526269544533030294499007242937089146507674570192265</span>]</span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    t.append(s[i]-s[i-<span class="number">1</span>])</span><br><span class="line">all_n = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    all_n.append(gcd((t[i+<span class="number">1</span>]*t[i-<span class="number">1</span>]-t[i]*t[i]), (t[i+<span class="number">2</span>]*t[i]-t[i+<span class="number">1</span>]*t[i+<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line">MMI = <span class="keyword">lambda</span> A, n,s=<span class="number">1</span>,t=<span class="number">0</span>,N=<span class="number">0</span>: (n &lt; <span class="number">2</span> <span class="keyword">and</span> t%N <span class="keyword">or</span> MMI(n, A%n, t, s-A//n*t, N <span class="keyword">or</span> n),-<span class="number">1</span>)[n&lt;<span class="number">1</span>] <span class="comment">#逆元计算</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> all_n:</span><br><span class="line">    n=<span class="built_in">abs</span>(n)</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    a=(s[<span class="number">2</span>]-s[<span class="number">1</span>])*MMI((s[<span class="number">1</span>]-s[<span class="number">0</span>]),n)%n</span><br><span class="line">    ani=MMI(a,n)</span><br><span class="line">    b=(s[<span class="number">1</span>]-a*s[<span class="number">0</span>])%n</span><br><span class="line">    seed = (ani*(s[<span class="number">0</span>]-b))%n</span><br><span class="line">    plaintext=seed</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(plaintext))</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="baby-xor"><a href="#baby-xor" class="headerlink" title="baby_xor"></a>baby_xor</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)==<span class="number">32</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c1 = p^m</span><br><span class="line">c2 = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 139167681803392690594490403105432649693546256181767408269202101512534988406137879788255103631885736461742577594980136624933914700779445704490217419248411578290305101891222576080645870988658334799437317221565839991979543660824098367011942169305111105129234902517835649895908656770416774539906212596072334423407</span></span><br><span class="line"><span class="string">c1 = 11201139662236758800406931253538295757259990870588609533820056210585752522925690049252488581929717556881067021381940083808024384402885422258545946243513996</span></span><br><span class="line"><span class="string">c2 = 112016152270171196606652761990170033221036025260883289104273504703557624964071464062375228351458191745141525003775876044271210498526920529385038130932141551598616579917681815276713386113932345056134302042399379895915706991873687943357627747262597883603999621939794450743982662393955266685255577026078256473601</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>要求m就要先求得p</p><p>m、p、q分别是256、512、512位二进制</p><p>又c1&#x3D;&#x3D;p^m，p&#x3D;&#x3D;c1^m，那么c1的高256位和p是相同的，c1已知，则p的高256位已知</p><p>flag前面的格式为LitCTF{，那么m的前7*8&#x3D;&#x3D;56位也已知，p&#x3D;&#x3D;c1^m，这样p又多了56位已知，只有200位未知，这样就大大缩小了求解的范围，sage可以解出p的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p_high = 6970486324755573853659417450568643096739467034952296809356930151463374718468682227634361676471</span><br><span class="line">n = 139167681803392690594490403105432649693546256181767408269202101512534988406137879788255103631885736461742577594980136624933914700779445704490217419248411578290305101891222576080645870988658334799437317221565839991979543660824098367011942169305111105129234902517835649895908656770416774539906212596072334423407</span><br><span class="line">c = 112016152270171196606652761990170033221036025260883289104273504703557624964071464062375228351458191745141525003775876044271210498526920529385038130932141551598616579917681815276713386113932345056134302042399379895915706991873687943357627747262597883603999621939794450743982662393955266685255577026078256473601</span><br><span class="line"></span><br><span class="line">kbits = 512-p_high.nbits() #丢失的位数</span><br><span class="line">p_fake = p_high &lt;&lt; kbits #高位准确低位不准确的p值</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p_fake</span><br><span class="line">p0 = f.small_roots(X = 2^kbits, beta = 0.4)[0] </span><br><span class="line">p = p0 + p_fake</span><br><span class="line">print(p)</span><br><span class="line"></span><br><span class="line">#p = 11201139662236758800406931253538295757259990870588609533820056210585752522925662842097418194280333596411677923137891577493678147771013147838272857867768049</span><br></pre></td></tr></table></figure><p>求出p后按常规RSA求解出m和flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">139167681803392690594490403105432649693546256181767408269202101512534988406137879788255103631885736461742577594980136624933914700779445704490217419248411578290305101891222576080645870988658334799437317221565839991979543660824098367011942169305111105129234902517835649895908656770416774539906212596072334423407</span></span><br><span class="line">c1 = <span class="number">11201139662236758800406931253538295757259990870588609533820056210585752522925690049252488581929717556881067021381940083808024384402885422258545946243513996</span></span><br><span class="line">c2 = <span class="number">112016152270171196606652761990170033221036025260883289104273504703557624964071464062375228351458191745141525003775876044271210498526920529385038130932141551598616579917681815276713386113932345056134302042399379895915706991873687943357627747262597883603999621939794450743982662393955266685255577026078256473601</span></span><br><span class="line">p = <span class="number">11201139662236758800406931253538295757259990870588609533820056210585752522925662842097418194280333596411677923137891577493678147771013147838272857867768049</span></span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c2,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF 2023-CRYPTO-1</title>
      <link href="/posts/af9a3e3d.html"/>
      <url>/posts/af9a3e3d.html</url>
      
        <content type="html"><![CDATA[<h1 id="LitCTF-2023-CRYPTO-1"><a href="#LitCTF-2023-CRYPTO-1" class="headerlink" title="LitCTF 2023-CRYPTO-1"></a>LitCTF 2023-CRYPTO-1</h1><h2 id="梦想是红色的"><a href="#梦想是红色的" class="headerlink" title="梦想是红色的"></a>梦想是红色的</h2><p>核心价值观编码，在线工具解决</p><p><img src="/images/image-1.png"></p><h2 id="Hex？Hex！"><a href="#Hex？Hex！" class="headerlink" title="Hex？Hex！"></a>Hex？Hex！</h2><p>题目：<code>4c69744354467b746169313131636f6f6c6c616161217d</code></p><p>提示是十六进制，Hex解码</p><p><img src="/images/image-2.png"></p><h2 id="你是我的关键词-Keyworld"><a href="#你是我的关键词-Keyworld" class="headerlink" title="你是我的关键词(Keyworld)"></a>你是我的关键词(Keyworld)</h2><p>关键词密码，YOU是关键词，在线解码即可</p><p><img src="/images/image-3.png"></p><h2 id="Is-this-only-base"><a href="#Is-this-only-base" class="headerlink" title="Is this only base?"></a>Is this only base?</h2><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SWZxWl=F=DQef0hlEiSUIVh9ESCcMFS9NF2NXFzM</span><br><span class="line">今年是本世纪的第23年呢</span><br></pre></td></tr></table></figure><p>有等号，猜测是base，但等号不在末尾，猜测需要解密移位</p><p>想到使用栅栏密码，提示分23栏，该题为w型的栅栏，得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SWZxWlFDe0liUV9ScF9FNFMzX2NSMCEhISEhfQ==</span><br></pre></td></tr></table></figure><p>之后base64，得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IfqZQC&#123;IbQ_Rp_E4S3_cR0!!!!!&#125;</span><br></pre></td></tr></table></figure><p>显然已经是flag的形式，最后凯撒解密得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LitCTF&#123;LeT_Us_H4V3_fU0!!!!!&#125;</span><br></pre></td></tr></table></figure><h2 id="家人们！谁懂啊，RSA签到都不会"><a href="#家人们！谁懂啊，RSA签到都不会" class="headerlink" title="家人们！谁懂啊，RSA签到都不会"></a>家人们！谁懂啊，RSA签到都不会</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 12567387145159119014524309071236701639759988903138784984758783651292440613056150667165602473478042486784826835732833001151645545259394365039352263846276073</span></span><br><span class="line"><span class="string">q = 12716692565364681652614824033831497167911028027478195947187437474380470205859949692107216740030921664273595734808349540612759651241456765149114895216695451</span></span><br><span class="line"><span class="string">c = 108691165922055382844520116328228845767222921196922506468663428855093343772017986225285637996980678749662049989519029385165514816621011058462841314243727826941569954125384522233795629521155389745713798246071907492365062512521474965012924607857440577856404307124237116387085337087671914959900909379028727767057</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最基本的RSA，求出d后解得m，long_to_bytes(m)即可，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">12567387145159119014524309071236701639759988903138784984758783651292440613056150667165602473478042486784826835732833001151645545259394365039352263846276073</span></span><br><span class="line">q = <span class="number">12716692565364681652614824033831497167911028027478195947187437474380470205859949692107216740030921664273595734808349540612759651241456765149114895216695451</span></span><br><span class="line">c = <span class="number">108691165922055382844520116328228845767222921196922506468663428855093343772017986225285637996980678749662049989519029385165514816621011058462841314243727826941569954125384522233795629521155389745713798246071907492365062512521474965012924607857440577856404307124237116387085337087671914959900909379028727767057</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="原来你也玩原神"><a href="#原来你也玩原神" class="headerlink" title="原来你也玩原神"></a>原来你也玩原神</h2><p>搜索原神字母对照表一一比对替换可以得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LITCTF&#123;YUANLAINIYEWANYUANSHENWWW&#125;</span><br></pre></td></tr></table></figure><h2 id="md5的破解"><a href="#md5的破解" class="headerlink" title="md5的破解"></a>md5的破解</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag全是由小写字母及数字组成</span></span><br><span class="line">m=md5(flag).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(flag[:<span class="number">13</span>]+flag[<span class="number">15</span>:<span class="number">18</span>]+flag[<span class="number">19</span>:<span class="number">34</span>]+flag[<span class="number">35</span>:<span class="number">38</span>])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># b&#x27;LitCTF&#123;md5can3derypt213thoughcrsh&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 496603d6953a15846cd7cc476f146771</span></span><br></pre></td></tr></table></figure><p>缺少的4个字符分别是第13、14、18和34位，位数较少且都为小写字母和数字，可以直接爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">ss = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line">m = <span class="string">&#x27;496603d6953a15846cd7cc476f146771&#x27;</span></span><br><span class="line">s1 = <span class="string">&#x27;LitCTF&#123;md5can&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;3de&#x27;</span></span><br><span class="line">s3 = <span class="string">&#x27;rypt213thoughcr&#x27;</span></span><br><span class="line">s4 = <span class="string">&#x27;sh&#125;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ss:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> ss:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> ss:</span><br><span class="line">            <span class="keyword">for</span> o <span class="keyword">in</span> ss:</span><br><span class="line">                flag = s1 + i + o + s2 + j + s3 + k + s4</span><br><span class="line">                <span class="keyword">if</span> md5(flag.encode()).hexdigest() == m:</span><br><span class="line">                    <span class="built_in">print</span>(flag)</span><br><span class="line">                    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="yafu"><a href="#yafu" class="headerlink" title="yafu"></a>yafu</h2><p>利用yafu工具分解大模n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">15241208217768849887180010139590210767831431018204645415681695749294131435566140166245881287131522331092026252879324931622292179726764214435307</span></span><br><span class="line">c = <span class="number">12608550100856399369399391849907846147170257754920996952259023159548789970041433744454761458030776176806265496305629236559551086998780836655717</span></span><br><span class="line"><span class="comment">#yafu将n分解成15个素数p1~p15，求欧拉函数phi=（p1-1)*……(p15-1)</span></span><br><span class="line">n1=<span class="number">2201440207</span>-<span class="number">1</span></span><br><span class="line">n2=<span class="number">4171911923</span>-<span class="number">1</span></span><br><span class="line">n3=<span class="number">3354884521</span>-<span class="number">1</span></span><br><span class="line">n4=<span class="number">2719600579</span>-<span class="number">1</span></span><br><span class="line">n5=<span class="number">2315495107</span>-<span class="number">1</span></span><br><span class="line">n6=<span class="number">4021078331</span>-<span class="number">1</span></span><br><span class="line">n7=<span class="number">2906576131</span>-<span class="number">1</span></span><br><span class="line">n8=<span class="number">2151018733</span>-<span class="number">1</span></span><br><span class="line">n9=<span class="number">2585574697</span>-<span class="number">1</span></span><br><span class="line">n10=<span class="number">3355651511</span>-<span class="number">1</span></span><br><span class="line">n11=<span class="number">2758708999</span>-<span class="number">1</span></span><br><span class="line">n12=<span class="number">2767137487</span>-<span class="number">1</span></span><br><span class="line">n13=<span class="number">3989697563</span>-<span class="number">1</span></span><br><span class="line">n14=<span class="number">4044505687</span>-<span class="number">1</span></span><br><span class="line">n15=<span class="number">2923522073</span>-<span class="number">1</span></span><br><span class="line">phi=n1*n2*n3*n4*n5*n6*n7*n8*n9*n10*n11*n12*n13*n14*n15</span><br><span class="line"></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="factordb"><a href="#factordb" class="headerlink" title="factordb"></a>factordb</h2><p>利用factordb在线网站分解大模n</p><p><img src="/images/image-4.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">87924348264132406875276140514499937145050893665602592992418171647042491658461</span></span><br><span class="line">c = <span class="number">87677652386897749300638591365341016390128692783949277305987828177045932576708</span></span><br><span class="line">p = <span class="number">275127860351348928173285174381581152299</span></span><br><span class="line">q = <span class="number">319576316814478949870590164193048041239</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="Virginia"><a href="#Virginia" class="headerlink" title="Virginia"></a>Virginia</h2><p>没有密钥的维吉尼亚密码，用 <a href="https://www.guballa.de/vigenere-solver">Vigenere Solver | guballa.de</a> 处理，可以得知这是一个特殊的凯撒加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My password is not a regular Caesar password,and the enc flag=[86, 116, 128, 80, 98, 85, 139, 122, 134, 114, 125, 136, 117, 123, 129, 127, 128, 128, 142, 130, 140, 147, 127, 132, 131, 136, 151, 134, 152, 164] -Caesar</span><br></pre></td></tr></table></figure><p>我们知道flag的格式一定是LitCTF{}，又因为是特殊凯撒加密，那么前7位与密文一定存在对应关系</p><table><thead><tr><th align="center"></th><th align="center">L</th><th align="center">i</th><th align="center">t</th><th align="center">C</th><th align="center">T</th><th align="center">F</th><th align="center">{</th></tr></thead><tbody><tr><td align="center">ASCII码十进制</td><td align="center">76</td><td align="center">105</td><td align="center">116</td><td align="center">67</td><td align="center">84</td><td align="center">70</td><td align="center">123</td></tr><tr><td align="center">encrypted</td><td align="center">86</td><td align="center">116</td><td align="center">128</td><td align="center">80</td><td align="center">98</td><td align="center">85</td><td align="center">139</td></tr><tr><td align="center">对比</td><td align="center">+10</td><td align="center">+11</td><td align="center">+12</td><td align="center">+13</td><td align="center">+14</td><td align="center">+15</td><td align="center">+16</td></tr></tbody></table><p>那么可以编写脚本解出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f=[<span class="number">86</span>, <span class="number">116</span>, <span class="number">128</span>, <span class="number">80</span>, <span class="number">98</span>, <span class="number">85</span>, <span class="number">139</span>, <span class="number">122</span>, <span class="number">134</span>, <span class="number">114</span>, <span class="number">125</span>, <span class="number">136</span>, <span class="number">117</span>, <span class="number">123</span>, <span class="number">129</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">142</span>, <span class="number">130</span>, <span class="number">140</span>, <span class="number">147</span>, <span class="number">127</span>, <span class="number">132</span>, <span class="number">131</span>, <span class="number">136</span>, <span class="number">151</span>, <span class="number">134</span>, <span class="number">152</span>, <span class="number">164</span>]</span><br><span class="line">i=<span class="number">10</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> f:</span><br><span class="line">    flag+=<span class="built_in">chr</span>(j-i)</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
