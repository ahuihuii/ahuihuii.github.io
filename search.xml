<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分组密码学习</title>
      <link href="/posts/61901517.html"/>
      <url>/posts/61901517.html</url>
      
        <content type="html"><![CDATA[<h1 id="分组密码学习"><a href="#分组密码学习" class="headerlink" title="分组密码学习"></a>分组密码学习</h1><h2 id="一、DES加密"><a href="#一、DES加密" class="headerlink" title="一、DES加密"></a>一、DES加密</h2><p>参考视频：【DES加密算法课程】 <a href="https://www.bilibili.com/video/BV1134y1Y71j/?p=4&share_source=copy_web&vd_source=b46cad7e7705274b9d25b68fa1f31366">https://www.bilibili.com/video/BV1134y1Y71j/?p=4&amp;share_source=copy_web&amp;vd_source=b46cad7e7705274b9d25b68fa1f31366</a></p><h3 id="1-加密过程"><a href="#1-加密过程" class="headerlink" title="1. 加密过程"></a>1. 加密过程</h3><p>大致流程：64bit明文先IP置换（固定的IP置换盒处理），分左右两半各32bit，进行16轮迭代加密，最后IP逆置换得到64bit密文</p><p><strong>IP置换：</strong></p><p>根据置换盒中对应元素告知的位置信息进行置换</p><p><img src="/images/desandaes/des_ipbox.png"></p><p>初始置换IP，未加密的64bit，将第58位放到第1位，……，第1位放到第40位，……</p><p>逆置换IP^-1，已加密的64bit，将第40位放到第1位，……，第1位放到第58位，……</p><p>####例如####</p><p>原明文（9bit为例）                      IP置换盒                            置换结果</p><p>​     0    1    0                                    8    6    2                             1    0    1</p><p>​     0    1    0                                    1    9    3                             0    1    0</p><p>​     1    1    1                                    4    7    5                             0    1    1</p><p>第一个bit，对应置换盒元素8，说明把第8位放到该位，以此类推得到置换结果</p><p><strong>迭代加密：</strong></p><p>(1) E盒扩展 32bit–&gt;48bit</p><p>(2) 与K异或 48bit–&gt;48bit</p><p>(3) <strong>S盒压缩</strong> 48bit–&gt;32bit</p><p>(4) P盒置换 32bit–&gt;32bit  <em>与ip置换相似</em></p><h4 id="1-1-E盒扩展"><a href="#1-1-E盒扩展" class="headerlink" title="1.1 E盒扩展"></a>1.1 E盒扩展</h4><p>左右两半各32bit，对右半部分进行E盒扩展，使其变为48bit</p><p>32bit每4bit一组，共8组，对每组首尾各扩充一位，共扩充16bit</p><p>每组扩充的首位与 <strong>上一组原末位</strong> 相同 （如果该组是第一组，看最后一组的原末位）</p><p>每组扩充的末位与 <strong>下一组原首位</strong> 相同 （如果该组是最后一组，看第一组的原首位）</p><p>####例如####</p><p>1011 0010 0101 1001 0110 1111 1100 0111 </p><p>第一组扩充：  1 1011 0</p><p>第二组扩充：  1 0010 0</p><p>第三组扩充：  0 0101 1</p><p>第四组扩充：  1 1001 0</p><p>第五组扩充：  1 0110 1</p><p>第六组扩充：  0 1111 1</p><p>第七组扩充：  1 1100 0</p><p>第八组扩充：  0 0111 1</p><p>扩充完成的48bit：110110 100100 001011 110010 101101 011111 111000 001111</p><h4 id="1-2-与K异或"><a href="#1-2-与K异或" class="headerlink" title="1.2 与K异或"></a>1.2 与K异或</h4><p>DES密钥64bit，其中有8位是校验位，剩余56bit每一轮中通过变换得到48bit的密钥K和扩充后的48bit异或</p><p><strong>子密钥的生成过程：</strong></p><p>64bit种子密钥，进入PC-1盒（置换选择器1）（8×7置换表），丢掉8bit校验位（分别是第8&#x2F;16&#x2F;24&#x2F;32&#x2F;40&#x2F;48&#x2F;56&#x2F;64位），选择出剩余的56bit，之后进行置换（类似IP置换）</p><p>置换完成的56bit左右对半分，分别按照规定的左移表进行左移</p><p>####例如####</p><p> i是加密轮数，x是要左移的位数，一张左移表如下：</p><table><thead><tr><th align="center">i</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th><th align="center">12</th><th align="center">13</th><th align="center">14</th><th align="center">15</th><th align="center">16</th></tr></thead><tbody><tr><td align="center">x</td><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">1</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">1</td></tr></tbody></table><p>假设现在是<strong>第一轮</strong>：</p><p>原左半C    0101000 1100111 0110100 0110111</p><p>左移之后  1010001 1001110 1101000 1101110   注意末位是原来的首位</p><p>原右半D   1011011 0010110 1011101 0011011</p><p>左移之后  0110110 0101101 0111010 0110111</p><p>左移之后拼接整合起来，此时还是56bit，进入PC-2（置换选择器2）（8×6置换表），选择并丢掉第9&#x2F;18&#x2F;22&#x2F;25&#x2F;35&#x2F;38&#x2F;43&#x2F;54位，之后按照置换表进行置换，输出48bit密钥<strong>K1</strong></p><p>但是之后的迭代加密仍然需要密钥Ki，所以在第一轮左移之后会进行复制，复制的一份下去完成第一轮密钥K1的生成，另一份回到左移的步骤，根据下一轮次的位移x再次左移生成新密钥K2，以此类推直到生成16个密钥</p><h4 id="1-3-S盒压缩"><a href="#1-3-S盒压缩" class="headerlink" title="1.3 S盒压缩"></a>1.3 S盒压缩</h4><p>异或之后得到48bit输出，均分成8组，每组6bit</p><p>S盒有8张表（固定），每张表对应一组，每张表有<strong>4行16列</strong></p><p>每组的6bit，首尾两位组成的二进制数对应表中的行数，中间四位组成的二进制数对应列数</p><p>定位表中元素，将该元素转二进制，得到压缩之后的4bit</p><p>每组如此操作，得到32bit的压缩结果</p><p>####例如####</p><p>异或得到的组一：011110，那么应该对应表1中第0行第f列元素2    011110 –&gt; 2 –转二进制 –&gt; 0010</p><p>如果组一为 110010，则对应表中第2行第9列元素b(11)    110010 –&gt; 11 –&gt; 1011</p><table><thead><tr><th align="center">表1</th><th align="center">0</th><th>1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">d</th><th align="center">e</th><th align="center">f</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">7</td><td>3</td><td align="center">8</td><td align="center">0</td><td align="center">6</td><td align="center">9</td><td align="center">a</td><td align="center">1</td><td align="center">b</td><td align="center">c</td><td align="center">4</td><td align="center">e</td><td align="center">5</td><td align="center">f</td><td align="center">d</td><td align="center">2</td></tr><tr><td align="center">1</td><td align="center">a</td><td>0</td><td align="center">3</td><td align="center">b</td><td align="center">8</td><td align="center">1</td><td align="center">4</td><td align="center">9</td><td align="center">2</td><td align="center">f</td><td align="center">5</td><td align="center">6</td><td align="center">e</td><td align="center">c</td><td align="center">7</td><td align="center">d</td></tr><tr><td align="center">2</td><td align="center">f</td><td>c</td><td align="center">8</td><td align="center">2</td><td align="center">4</td><td align="center">9</td><td align="center">1</td><td align="center">7</td><td align="center">5</td><td align="center">b</td><td align="center">3</td><td align="center">e</td><td align="center">a</td><td align="center">0</td><td align="center">6</td><td align="center">d</td></tr><tr><td align="center">3</td><td align="center">8</td><td>b</td><td align="center">1</td><td align="center">4</td><td align="center">a</td><td align="center">0</td><td align="center">9</td><td align="center">2</td><td align="center">e</td><td align="center">3</td><td align="center">d</td><td align="center">7</td><td align="center">f</td><td align="center">5</td><td align="center">c</td><td align="center">6</td></tr></tbody></table><h4 id="1-4-P盒置换"><a href="#1-4-P盒置换" class="headerlink" title="1.4 P盒置换"></a>1.4 P盒置换</h4><p>和IP置换类似，最后仍然是32bit，这里不再额外说明</p><h4 id="1-5-进入下一轮迭代加密"><a href="#1-5-进入下一轮迭代加密" class="headerlink" title="1.5 进入下一轮迭代加密"></a>1.5 进入下一轮迭代加密</h4><p>P盒置换完成后，右半的32bit异或左半32bit，得到最终的右半32bit</p><p>将左右两半交换，进入下一轮迭代，继续处理右半（上一轮的左半）32bit</p><p><img src="/images/desandaes/des_image.png"></p><h4 id="1-6-IP逆置换"><a href="#1-6-IP逆置换" class="headerlink" title="1.6 IP逆置换"></a>1.6 IP逆置换</h4><p>和IP置换相同，也是根据置换表进行置换，得到最终的密文</p><h2 id="二、AES加密"><a href="#二、AES加密" class="headerlink" title="二、AES加密"></a>二、AES加密</h2><p>参考视频：【【AES加密算法】| AES加密过程详解| 对称加密| Rijndael-128| 密码学| 信息安全】 <a href="https://www.bilibili.com/video/BV1i341187fK/?share_source=copy_web&vd_source=b46cad7e7705274b9d25b68fa1f31366">https://www.bilibili.com/video/BV1i341187fK/?share_source=copy_web&amp;vd_source=b46cad7e7705274b9d25b68fa1f31366</a></p><p>明文固定长度128bit，密钥长度可以是128&#x2F;192&#x2F;256bit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入的字节顺序：</span><br><span class="line">1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</span><br><span class="line">==&gt;</span><br><span class="line">1  5   9  13</span><br><span class="line"></span><br><span class="line">2  6  10  14</span><br><span class="line"></span><br><span class="line">3  7  11  15</span><br><span class="line"></span><br><span class="line">4  8  12  16</span><br></pre></td></tr></table></figure><h3 id="1-加密过程-1"><a href="#1-加密过程-1" class="headerlink" title="1. 加密过程"></a>1. 加密过程</h3><p>整体流程：明文经过初始变换，再经过9轮循环运算和1轮最终轮，得到密文</p><p>循环运算包括：字节代换、行移位、列混合、轮密钥加</p><p>最终轮和前9轮循环运算相同，只是不进行列混合</p><p><img src="/images/desandaes/aesprogress.png"></p><h4 id="1-1-初始变换"><a href="#1-1-初始变换" class="headerlink" title="1.1 初始变换"></a>1.1 初始变换</h4><p>将16B（128bit）的明文以4×4B形式输入，与M字节密钥按字节异或，得到的结果就是初始变换后的矩阵，这个过程就叫初始变换</p><h4 id="1-2-字节代换"><a href="#1-2-字节代换" class="headerlink" title="1.2 字节代换"></a>1.2 字节代换</h4><p>对照S-BOX进行字节代换</p><p><img src="/images/desandaes/aessub.png"></p><p>初始变换得到的字节矩阵，每一个元素都是一个字节，8bit，可以表示成两个十六进制数</p><p>19查找S-BOX中第1行第9列元素f0</p><p>3d查找S-BOX中第3行第d列元素27</p><p>以此类推进行代换</p><h4 id="1-3-行移位"><a href="#1-3-行移位" class="headerlink" title="1.3 行移位"></a>1.3 行移位</h4><p>对字节变换完成的4×4B矩阵进行行移位（循环移动）</p><p>第一行保持不变，第二行向左移动1个字节，第三行向左移动2个字节，第四行向左移动3个字节</p><p>####例如####</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">       输入数据                                                             输出结果</span><br><span class="line"></span><br><span class="line">p1    p5    p9    p13                                               p1    p5    p9    p13</span><br><span class="line"></span><br><span class="line">p2    p6    p10   p14                    ========&gt;                  p6    p10   p14   p2</span><br><span class="line"></span><br><span class="line">p3    p7    p11   p15                                               p11   p15   p3    p7</span><br><span class="line"></span><br><span class="line">p4    p8    p12   p16                                               p16   p4    p8    p12</span><br></pre></td></tr></table></figure><h4 id="1-4-列混合"><a href="#1-4-列混合" class="headerlink" title="1.4 列混合"></a>1.4 列混合</h4><p>将输入的4×4矩阵左乘一个给定的4×4矩阵</p><p>给定的矩阵为：</p><p>0x02  0x03  0x01  0x01</p><p>0x01  0x02  0x03  0x01</p><p>0x01  0x01  0x02  0x03</p><p>0x03  0x01  0x01  0x02</p><p><img src="/images/desandaes/AES_mix.png"></p><p><img src="/images/desandaes/AES_mix2.png"></p><h4 id="1-5-轮密钥加"><a href="#1-5-轮密钥加" class="headerlink" title="1.5 轮密钥加"></a>1.5 轮密钥加</h4><p>列混合得到的矩阵和一个<strong>轮密钥矩阵</strong>每列按字节异或</p><p>子密钥扩展得到十轮的轮密钥矩阵</p><p><strong>密钥扩展：</strong></p><p>i是从0开始的列数，W[i]表示第i列</p><p>(1) 如果i不是4的倍数，那么第i列由如下等式确定：</p><p>W[i]&#x3D;W[i-4]异或W[i-1]</p><p>(2) 如果i是4的倍数，那么</p><p>W[i]&#x3D;W[i-4]异或T(W[i-1])</p><p>T函数由三部分组成：字循环、字节代换和轮常量异或</p><p>(a) 字循环</p><p>将1个字中的4个字节循环左移1一个字节</p><p>例如要算W[4]：W[4]&#x3D;W[0]异或T(W[3])</p><p>T函数处理W[3]的第一步就是将列W[3]循环左移1一个字节</p><p>09 cf 4f 3c  &#x3D;&#x3D;&#x3D;&#x3D;&gt;   cf 4f 3c 09</p><p><img src="/images/desandaes/AES_a.png"></p><p>(b) 字节代换</p><p>对字循环的结果使用S盒进行字节代换</p><p>(c) 轮常量异或</p><p>将前两步的结果和轮常量Rcon[j]进行异或，其中j表示轮数，得到T(W[i-1])</p><p><img src="/images/desandaes/AES_c.png"></p><p>最后将W[i-4]和T(W[i-1])异或得到W[i]</p><p>以此类推得到十轮的轮密钥</p><p>经过9轮循环运算和1轮最终轮，得到密文</p>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网信柏鹭2023 Crypto</title>
      <link href="/posts/ad815250.html"/>
      <url>/posts/ad815250.html</url>
      
        <content type="html"><![CDATA[<h1 id="网信柏鹭2023-Crypto"><a href="#网信柏鹭2023-Crypto" class="headerlink" title="网信柏鹭2023 Crypto"></a>网信柏鹭2023 Crypto</h1><h2 id="fractrsa"><a href="#fractrsa" class="headerlink" title="fractrsa"></a>fractrsa</h2><p>解摩斯电码拿到压缩包密码，解压得到rsa题目如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span>  secret <span class="keyword">import</span> flag1 <span class="keyword">as</span> flag</span><br><span class="line"></span><br><span class="line">num1 = <span class="number">3</span></span><br><span class="line">num2 = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span>(num1&lt;num2):</span><br><span class="line">    num1 = getPrime(<span class="number">512</span>)</span><br><span class="line">    num2 = getPrime(<span class="number">512</span>)</span><br><span class="line">pt = bytes_to_long(flag) + num2</span><br><span class="line"></span><br><span class="line">ring = RealField(<span class="number">1100</span>)</span><br><span class="line">num3 = ring(num1) / ring(num2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num3 = &quot;</span>, num3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = randint(<span class="number">2</span>**<span class="number">511</span>, num1)</span><br><span class="line">    q = randint(<span class="number">2</span>**<span class="number">511</span>, num2)</span><br><span class="line">    <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q) <span class="keyword">and</span> p!=q:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">N = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">leak = <span class="built_in">pow</span>(p-q, num1, num1*num2)</span><br><span class="line">ct = <span class="built_in">pow</span>(pt, e, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ct = &quot;</span>, ct)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N = &quot;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak = &quot;</span>, leak)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">num3 = 1.23389923415003373900567515471436168841941584796842188964423737295914869304653496800649965063081353720701415762591488370228399019899893688681309320356016722276295236528757306976510687729729934668311830828756908988350841843676900575414367123810470585198055372776278588638204471298838884740198056387082949710435502826460830711429956</span></span><br><span class="line"><span class="string">ct = 31011170589632318837149853165664224847925206003567781692767655474759523146503572164952138829336342836023903919700264739071138739105931471740973631326608186969523753119546323993892359278563753903149741128282349467136720827132122619177620866305659196267641453819504766216964516467658995724859657544518337771393</span></span><br><span class="line"><span class="string">N = 61860727516406742636690805639158184396057779906729165734489212939937929906456706343476469874085504076991779041906401043694401076841639925611957258119417559980829238154105119701407722069260962772947894516879731956778127512764229384957918619863998939985369399189275568362193066167855420897196095587732512368673</span></span><br><span class="line"><span class="string">leak = 23213363443983005040318061737977092634638640953366787443691593387275645092922646169818923792205696350020369122807136306157118385984272980615310163206933078119776935167207473544453080959202803743994251355133953187110546017667004996272367137522351606700447920805532616096125523674597551449412004735397779511371</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>和2023安洵杯signin题类似，连分数攻击找出num1和num2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line">num3=<span class="number">1.23389923415003373900567515471436168841941584796842188964423737295914869304653496800649965063081353720701415762591488370228399019899893688681309320356016722276295236528757306976510687729729934668311830828756908988350841843676900575414367123810470585198055372776278588638204471298838884740198056387082949710435502826460830711429956</span></span><br><span class="line"></span><br><span class="line">c = continued_fraction(num3)</span><br><span class="line">alist = c.convergents()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alist:</span><br><span class="line">    a = <span class="built_in">str</span>(i).split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a)&gt;<span class="number">1</span> <span class="keyword">and</span> gcd(<span class="built_in">int</span>(a[<span class="number">0</span>]),<span class="built_in">int</span>(a[<span class="number">1</span>])) == <span class="number">1</span> <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">0</span>])) <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">1</span>])) <span class="keyword">and</span> <span class="built_in">int</span>(a[<span class="number">0</span>]).bit_length()==<span class="number">512</span> <span class="keyword">and</span> <span class="built_in">int</span>(a[<span class="number">1</span>]).bit_length()==<span class="number">512</span>:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#[&#x27;11167377337790397338811417806698264734026040696284907854286100186126887838302430726803014418419121360514985339992064951270502853852777225947659429837569693&#x27;, &#x27;9050477566333038464101590216458863799039754468566791821195736389139213194857548339787600682491327798736538059818887575696704421576721592454156775006222517&#x27;]</span></span><br></pre></td></tr></table></figure><p>接下来求p和q，根据数论知识，</p><p>leak &#x3D;&#x3D; (p-q) ^ num1 (mod num1*num2)</p><p>leak &#x3D;&#x3D; (p-q) ^ num1 (mod num1) &#x3D;&#x3D;p-q (mod num1)</p><p>所以 leak&#x3D;p-q (mod num1)</p><p>知道了p*q和p-q就可以列方程解出p和q，之后常规解rsa得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">data3 = <span class="number">1.23389923415003373900567515471436168841941584796842188964423737295914869304653496800649965063081353720701415762591488370228399019899893688681309320356016722276295236528757306976510687729729934668311830828756908988350841843676900575414367123810470585198055372776278588638204471298838884740198056387082949710435502826460830711429956</span></span><br><span class="line">c = <span class="number">31011170589632318837149853165664224847925206003567781692767655474759523146503572164952138829336342836023903919700264739071138739105931471740973631326608186969523753119546323993892359278563753903149741128282349467136720827132122619177620866305659196267641453819504766216964516467658995724859657544518337771393</span></span><br><span class="line"></span><br><span class="line">leak = <span class="number">23213363443983005040318061737977092634638640953366787443691593387275645092922646169818923792205696350020369122807136306157118385984272980615310163206933078119776935167207473544453080959202803743994251355133953187110546017667004996272367137522351606700447920805532616096125523674597551449412004735397779511371</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c1 = continued_fraction(data3)</span><br><span class="line">alist = c1.convergents()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alist:</span><br><span class="line">    a = <span class="built_in">str</span>(i).split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a) &gt; <span class="number">1</span> <span class="keyword">and</span> gcd(<span class="built_in">int</span>(a[<span class="number">0</span>]), <span class="built_in">int</span>(a[<span class="number">1</span>])) == <span class="number">1</span> <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">0</span>])) <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">1</span>])) <span class="keyword">and</span> <span class="built_in">int</span>(</span><br><span class="line">            a[<span class="number">0</span>]).bit_length() == <span class="number">512</span> <span class="keyword">and</span> <span class="built_in">int</span>(a[<span class="number">1</span>]).bit_length() == <span class="number">512</span>:</span><br><span class="line">        data1 = <span class="built_in">int</span>(a[<span class="number">0</span>])</span><br><span class="line">        data2 = <span class="built_in">int</span>(a[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">leak1 = leak % data1</span><br><span class="line">p, q = sympy.symbols(<span class="string">&quot;p q&quot;</span>)</span><br><span class="line">h = sympy.solve([p * q - n, p - q - leak1], [p, q])</span><br><span class="line">p = h[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">q = h[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(p,q)</span><br><span class="line"><span class="comment">#8397652354751369475047895816963473478350245201262315191356674989898449420511844471318815750077346111978800531467822072132495108840045942922000560423170719, 7366431105165493870863104020012521226567717006209783271191581404475809252591732063142219903159720601508017444435289526877689688795190667050592115689909567</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p=<span class="number">8397652354751369475047895816963473478350245201262315191356674989898449420511844471318815750077346111978800531467822072132495108840045942922000560423170719</span></span><br><span class="line">q=<span class="number">7366431105165493870863104020012521226567717006209783271191581404475809252591732063142219903159720601508017444435289526877689688795190667050592115689909567</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">num2=<span class="number">9050477566333038464101590216458863799039754468566791821195736389139213194857548339787600682491327798736538059818887575696704421576721592454156775006222517</span></span><br><span class="line">ct=<span class="number">31011170589632318837149853165664224847925206003567781692767655474759523146503572164952138829336342836023903919700264739071138739105931471740973631326608186969523753119546323993892359278563753903149741128282349467136720827132122619177620866305659196267641453819504766216964516467658995724859657544518337771393</span></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(ct,d,n)-num2</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#flag&#123;ISEC-WeMu5tKe2pOn_70in5And#N3Ver@G1veUp!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Vigenere2S"><a href="#Vigenere2S" class="headerlink" title="Vigenere2S"></a>Vigenere2S</h2><p>两次爆破压缩包口令，得到题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> key,flag2 <span class="keyword">as</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_l</span>(<span class="params">idx, s</span>):</span><br><span class="line">    <span class="keyword">return</span> s[idx:] + s[:idx]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mainProc</span>(<span class="params">p, k1, k2</span>):</span><br><span class="line">    s = <span class="string">b&quot;abcd07efghij89klmnopqr16stuvwxyz-_&#123;&#125;ABCDEFGHIJKL34MNOPQRST25VWXYZ&quot;</span></span><br><span class="line">    t = [[_l((i+j)%<span class="built_in">len</span>(s), s) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))]</span><br><span class="line">    i1 = <span class="number">0</span></span><br><span class="line">    i2 = <span class="number">0</span></span><br><span class="line">    c = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> p:</span><br><span class="line">        c += t[s.find(a)][s.find(k1[i1])][s.find(k2[i2])]</span><br><span class="line">        i1 = (i1 + <span class="number">1</span>) % <span class="built_in">len</span>(k1)</span><br><span class="line">        i2 = (i2 + <span class="number">1</span>) % <span class="built_in">len</span>(k2)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">res = mainProc(flag,key,key[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#第二层口令为ROT47，提示要对ciphertext做ROT47编码，得到真正的密文6JnsNxHKJ8mkvhS&#123;rMO_c9apMfHDHObq80PMu&#123;_ww_r&#123;rq</span></span><br></pre></td></tr></table></figure><p>加密方法简单来说就是把明文字符在字符串s中的位置，向右移k1+k2位，得到密文</p><p>注意到flag的格式是 <code>flag&#123;ISEC-&#125;</code> ,利用flag的头和密文的前十位相减，可以得到位移量k1+k2，再将密文移动回去可以得到明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c,tmp</span>):</span><br><span class="line">    s = <span class="string">b&quot;abcd07efghij89klmnopqr16stuvwxyz-_&#123;&#125;ABCDEFGHIJKL34MNOPQRST25VWXYZ&quot;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    message = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> c:</span><br><span class="line">        message += long_to_bytes(s[(s.find(a) - tmp[i]) % <span class="number">65</span>])</span><br><span class="line">        i = (i+<span class="number">1</span>) % <span class="built_in">len</span>(tmp)</span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line">m = <span class="string">b&quot;flag&#123;ISEC-&quot;</span></span><br><span class="line">c = <span class="string">b&quot;6JnsNxHKJ8mkvhS&#123;rMO_c9apMfHDHObq80PMu&#123;_ww_r&#123;rq&quot;</span></span><br><span class="line"></span><br><span class="line">tmp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    s = <span class="string">b&quot;abcd07efghij89klmnopqr16stuvwxyz-_&#123;&#125;ABCDEFGHIJKL34MNOPQRST25VWXYZ&quot;</span></span><br><span class="line">    index = s.find(c[i])</span><br><span class="line">    tmp.append((index - s.find(m[i])) % <span class="built_in">len</span>(s))  </span><br><span class="line"></span><br><span class="line">tmp = tmp + tmp[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br><span class="line">flag = decrypt(c,tmp)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;ISEC-Afr1en7_1nN33d_1S_Afr9end_ind88d0o0&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯2023 Crypto</title>
      <link href="/posts/14c00786.html"/>
      <url>/posts/14c00786.html</url>
      
        <content type="html"><![CDATA[<h1 id="安洵杯2023-Crypto"><a href="#安洵杯2023-Crypto" class="headerlink" title="安洵杯2023 Crypto"></a>安洵杯2023 Crypto</h1><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;--hidden_message--&#x27;</span></span><br><span class="line">data1 = getPrime(<span class="number">256</span>)</span><br><span class="line">data2 = getPrime(<span class="number">256</span>)</span><br><span class="line">m = bytes_to_long(flag)+data2</span><br><span class="line">prec = <span class="number">600</span></span><br><span class="line">ring = RealField(prec)</span><br><span class="line">data3 = ring(data1) / ring(data2)</span><br><span class="line"><span class="built_in">print</span>(data3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = randint(<span class="number">2</span>**<span class="number">255</span>, data1)</span><br><span class="line">    q = randint(<span class="number">2</span>**<span class="number">255</span>, data2)</span><br><span class="line">    <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q) <span class="keyword">and</span> p!=q:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">leak = <span class="built_in">pow</span>(p-q, data1, data1*data2)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(leak)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.42870767357206600351348423521722279489230609801270854618388981989800006431663026299563973511233193052826781891445323183272867949279044062899046090636843802841647378505716932999588</span></span><br><span class="line"><span class="string">1046004343125860480395943301139616023280829254329678654725863063418699889673392326217271296276757045957276728032702540618505554297509654550216963442542837</span></span><br><span class="line"><span class="string">2793178738709511429126579729911044441751735205348276931463015018726535495726108249975831474632698367036712812378242422538856745788208640706670735195762517</span></span><br><span class="line"><span class="string">1788304673303043190942544050868817075702755835824147546758319150900404422381464556691646064734057970741082481134856415792519944511689269134494804602878628</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>题目给出了data1和data2相除的高精度结果data3，利用连分数攻击，找到256位的分子分母的渐进分数来逼近data3，同时进行条件判断，得到data1和data2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line">data3=<span class="number">1.42870767357206600351348423521722279489230609801270854618388981989800006431663026299563973511233193052826781891445323183272867949279044062899046090636843802841647378505716932999588</span></span><br><span class="line"></span><br><span class="line">c = continued_fraction(data3)</span><br><span class="line">alist = c.convergents()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alist:</span><br><span class="line">    a = <span class="built_in">str</span>(i).split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a)&gt;<span class="number">1</span> <span class="keyword">and</span> gcd(<span class="built_in">int</span>(a[<span class="number">0</span>]),<span class="built_in">int</span>(a[<span class="number">1</span>])) == <span class="number">1</span> <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">0</span>])) <span class="keyword">and</span> is_prime(<span class="built_in">int</span>(a[<span class="number">1</span>])) <span class="keyword">and</span> <span class="built_in">int</span>(a[<span class="number">0</span>]).bit_length()==<span class="number">256</span> <span class="keyword">and</span> <span class="built_in">int</span>(a[<span class="number">1</span>]).bit_length()==<span class="number">256</span>:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#[&#x27;97093002077798295469816641595207740909547364338742117628537014186754830773717&#x27;,&#x27;67958620138887907577348085925738704755742144710390414146201367031822084270769&#x27;]</span></span><br></pre></td></tr></table></figure><p>接下来求p和q，根据数论知识，</p><p>leak &#x3D;&#x3D; (p-q) ^ data1 (mod data1*data2)</p><p>leak &#x3D;&#x3D; (p-q) ^ data1 (mod data1) &#x3D;&#x3D;p-q (mod data1)</p><p>所以 leak&#x3D;p-q (mod data1)</p><p>知道了p*q和p-q就可以列方程解出p和q，之后常规解rsa得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line">data3 = <span class="number">1.42870767357206600351348423521722279489230609801270854618388981989800006431663026299563973511233193052826781891445323183272867949279044062899046090636843802841647378505716932999588</span></span><br><span class="line">c = <span class="number">1046004343125860480395943301139616023280829254329678654725863063418699889673392326217271296276757045957276728032702540618505554297509654550216963442542837</span></span><br><span class="line">n = <span class="number">2793178738709511429126579729911044441751735205348276931463015018726535495726108249975831474632698367036712812378242422538856745788208640706670735195762517</span></span><br><span class="line">leak = <span class="number">1788304673303043190942544050868817075702755835824147546758319150900404422381464556691646064734057970741082481134856415792519944511689269134494804602878628</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">data1 = <span class="number">97093002077798295469816641595207740909547364338742117628537014186754830773717</span></span><br><span class="line">data2 = <span class="number">67958620138887907577348085925738704755742144710390414146201367031822084270769</span></span><br><span class="line">pjq = leak%data1</span><br><span class="line">p,q = sympy.symbols(<span class="string">&quot;p q&quot;</span>)</span><br><span class="line">h = sympy.solve([p*q-n,p-q-pjq],[p,q])</span><br><span class="line">p = h[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">q = h[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">d = <span class="built_in">int</span>(inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m-data2)))</span><br><span class="line"><span class="comment">#SYC&#123;a00338c150aa3a5163dbf404100e6754&#125;</span></span><br></pre></td></tr></table></figure><h2 id="CrazyTreat"><a href="#CrazyTreat" class="headerlink" title="CrazyTreat"></a>CrazyTreat</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TrickPrime</span>(<span class="params">bits</span>):</span><br><span class="line">    p = getPrime(bits)</span><br><span class="line">    q = getPrime(bits)</span><br><span class="line">    cut = randint(<span class="number">1</span>,<span class="number">256</span>)</span><br><span class="line">    temp = p*q</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;clown =&#x27;</span>,temp)</span><br><span class="line">    game  = (p&amp;(<span class="number">2</span>**bits-<span class="number">1</span>)) &gt;&gt;cut&lt;&lt;cut <span class="comment">#p高位需要给出</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;trick =&quot;</span>,game)</span><br><span class="line">    <span class="keyword">return</span> p,q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CrazyPrime</span>(<span class="params">nbits</span>):</span><br><span class="line">    p = getPrime(nbits)</span><br><span class="line">    q = getPrime(nbits)</span><br><span class="line">    r = getPrime(nbits)</span><br><span class="line">    n = p * q * r</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line">    m = getPrime(<span class="number">256</span>)</span><br><span class="line">    P = <span class="built_in">pow</span>(m, p, n)</span><br><span class="line">    Q = <span class="built_in">pow</span>(m, q, n)</span><br><span class="line">    R = <span class="built_in">pow</span>(m, r, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;P =&quot;</span>, P)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Q =&quot;</span>, Q)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;R =&quot;</span>, R)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">P,Q = TrickPrime(<span class="number">512</span>)</span><br><span class="line">R   = CrazyPrime(<span class="number">512</span>)</span><br><span class="line">N = P*Q*R</span><br><span class="line">phi = (P-<span class="number">1</span>)*(Q-<span class="number">1</span>)*(R-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>,c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">clown =  128259792862716016839189459678072057136816726330154776961595353705839428880480571473066446384217522987161777524953373380960754160008765782711874445778198828395697797884436326877471408867745183652189648661444125231444711655242478825995283559948683891100547458186394738621410655721556196774451473359271887941209</span></span><br><span class="line"><span class="string">trick =  13053422630763887754872929794631414002868675984142851995620494432706465523574529389771830464455212126838976863742628716168391373019631629866746550551576576</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n = 924936528644761261915490226270682878749572154775391302241867565751616615723850084742168094776229761548826664906020127037598880909798055174894996273670320006942669796769794827782190025101253693980249267932225152093301291975335342891074711919668098647971235568200490825183676601392038486178409517985098598981313504275523679007669267428032655295176395420598988902864122270470643591017567271923728446920345242491655440745259071163984046349191793076143578695363467259</span></span><br><span class="line"><span class="string">P = 569152976869063146023072907832518894975041333927991456910198999345700391220835009080679006115013808845384796762879536272124713177039235766835540634080670611913370463720348843789609330086898067623866793724806787825941048552075917807777474750280276411568158631295041513060119750713892787573668959642318994049493233526305607509996778047209856407800405714104373282610244944206314614906974275396096712817649817035559000245832673082730407216670764400076473183825246052</span></span><br><span class="line"><span class="string">Q = 600870923560313304359037202752076267074889238956345564584928427345594724253036201151726541881494799597966727749590645445697106549304014936202421316051605075583257261728145977582815350958084624689934980044727977015857381612608005101395808233778123605070134652480191762937123526142746130586645592869974342105683948971928881939489687280641660044194168473162316423173595720804934988042177232172212359550196783303829050288001473419477265817928976860640234279193511499</span></span><br><span class="line"><span class="string">R = 502270534450244040624190876542726461324819207575774341876202226485302007962848054723546499916482657212105671666772860609835378197021454344356764800459114299720311023006792483917490176845781998844884874288253284234081278890537021944687301051482181456494678641606747907823086751080399593576505166871905600539035162902145778102290387464751040045505938896117306913887015838631862800918222056118527252590990688099219298296427609455224159445193596547855684004680284030</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c =  10585127810518527980133202456076703601165893288538440737356392760427497657052118442676827132296111066880565679230142991175837099225733564144475217546829625689104025101922826124473967963669155549692317699759445354198622516852708572517609971149808872997711252940293211572610905564225770385218093601905012939143618159265562064340937330846997881816650140361013457891488134685547458725678949</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>trickprime考察p高位泄露，利用coppersmith求解p</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line">N =  <span class="number">128259792862716016839189459678072057136816726330154776961595353705839428880480571473066446384217522987161777524953373380960754160008765782711874445778198828395697797884436326877471408867745183652189648661444125231444711655242478825995283559948683891100547458186394738621410655721556196774451473359271887941209</span></span><br><span class="line"><span class="comment">#p的高位</span></span><br><span class="line">p0 =  <span class="number">13053422630763887754872929794631414002868675984142851995620494432706465523574529389771830464455212126838976863742628716168391373019631629866746550551576576</span></span><br><span class="line"><span class="comment">#0xf93bccfd5550cb15211bdc316f1b15cdfbc1f3e54a7745b9c4835f5346fa7f1d9560784892728000000000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="comment">#cut 204-207</span></span><br><span class="line"> </span><br><span class="line">P.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">f = p0 + x </span><br><span class="line">x = f.monic().small_roots(X=<span class="number">2</span>^<span class="number">210</span>, beta=<span class="number">0.4</span>)</span><br><span class="line">x = x[<span class="number">0</span>]</span><br><span class="line">x = <span class="number">76347864203588455868161824448305083084387260376528823546715135</span></span><br><span class="line">p = ZZ(f(x))</span><br><span class="line">q = N//p</span><br><span class="line"><span class="built_in">print</span>(p,q)</span><br><span class="line"><span class="comment">#####</span></span><br><span class="line">p=<span class="number">13053422630763887754872929794631414002868675984142851995620494432706465523574529389771830464531559991042565319610790540616696456104018890243275374098291711</span></span><br><span class="line">q=<span class="number">9825759610390416003138880321039057063786120681277009947660201742655391150627525256689197020107593156663696181775606008771199371337506657207530847665591719</span></span><br></pre></td></tr></table></figure><p>根据crazyprime函数，化简P,Q,R,m关系，解模方程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">924936528644761261915490226270682878749572154775391302241867565751616615723850084742168094776229761548826664906020127037598880909798055174894996273670320006942669796769794827782190025101253693980249267932225152093301291975335342891074711919668098647971235568200490825183676601392038486178409517985098598981313504275523679007669267428032655295176395420598988902864122270470643591017567271923728446920345242491655440745259071163984046349191793076143578695363467259</span></span><br><span class="line">P = <span class="number">569152976869063146023072907832518894975041333927991456910198999345700391220835009080679006115013808845384796762879536272124713177039235766835540634080670611913370463720348843789609330086898067623866793724806787825941048552075917807777474750280276411568158631295041513060119750713892787573668959642318994049493233526305607509996778047209856407800405714104373282610244944206314614906974275396096712817649817035559000245832673082730407216670764400076473183825246052</span></span><br><span class="line">Q = <span class="number">600870923560313304359037202752076267074889238956345564584928427345594724253036201151726541881494799597966727749590645445697106549304014936202421316051605075583257261728145977582815350958084624689934980044727977015857381612608005101395808233778123605070134652480191762937123526142746130586645592869974342105683948971928881939489687280641660044194168473162316423173595720804934988042177232172212359550196783303829050288001473419477265817928976860640234279193511499</span></span><br><span class="line">R = <span class="number">502270534450244040624190876542726461324819207575774341876202226485302007962848054723546499916482657212105671666772860609835378197021454344356764800459114299720311023006792483917490176845781998844884874288253284234081278890537021944687301051482181456494678641606747907823086751080399593576505166871905600539035162902145778102290387464751040045505938896117306913887015838631862800918222056118527252590990688099219298296427609455224159445193596547855684004680284030</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypto2</span>(<span class="params">P,Q,R,n</span>):</span><br><span class="line">    PR.&lt;m&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = m^<span class="number">3</span>-(P+Q+R)*m^<span class="number">2</span>+(P*Q+Q*R+P*R)*m-P*Q*R</span><br><span class="line">    f=f.monic()</span><br><span class="line">    x0 = f.small_roots(X=<span class="number">2</span>^<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">return</span> x0[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">R1=<span class="built_in">int</span>(decrypto2(P,Q,R,n))</span><br><span class="line"><span class="built_in">print</span>(R1)</span><br><span class="line"><span class="comment">#105960538296223496551922954965164644267919720177702173352061963871195469608683</span></span><br></pre></td></tr></table></figure><p>最后得到phi求解rsa</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c=<span class="number">10585127810518527980133202456076703601165893288538440737356392760427497657052118442676827132296111066880565679230142991175837099225733564144475217546829625689104025101922826124473967963669155549692317699759445354198622516852708572517609971149808872997711252940293211572610905564225770385218093601905012939143618159265562064340937330846997881816650140361013457891488134685547458725678949</span></span><br><span class="line">p=<span class="number">13053422630763887754872929794631414002868675984142851995620494432706465523574529389771830464531559991042565319610790540616696456104018890243275374098291711</span></span><br><span class="line">q=<span class="number">9825759610390416003138880321039057063786120681277009947660201742655391150627525256689197020107593156663696181775606008771199371337506657207530847665591719</span></span><br><span class="line">r=<span class="number">105960538296223496551922954965164644267919720177702173352061963871195469608683</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,p*q*r)))</span><br><span class="line"><span class="comment">#SYC&#123;N0b0dy_Kn0vvs_CryPt0_be7t3r_7haN_Me&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Alexei-needs-help"><a href="#Alexei-needs-help" class="headerlink" title="Alexei needs help"></a>Alexei needs help</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint </span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES </span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5 </span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">a,b = randint(<span class="number">2</span>,<span class="number">2</span>**<span class="number">512</span>), randint(<span class="number">2</span>,<span class="number">2</span>**<span class="number">512</span>) </span><br><span class="line">m = getPrime(<span class="number">512</span>)</span><br><span class="line">n = <span class="number">2023</span></span><br><span class="line">seq = [randint(<span class="number">2</span>,<span class="number">2</span>**<span class="number">512</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">seqsum</span>(<span class="params">i</span>):</span><br><span class="line">   ans = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(seq)):</span><br><span class="line">      ans += gp.powmod(i,j,m)*seq[j] </span><br><span class="line">   <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">homework</span>(<span class="params">i</span>):</span><br><span class="line">   <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span> </span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> (a*homework(i-<span class="number">1</span>)+b*homework(i-<span class="number">2</span>)+seqsum(i))%m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ans = homework(n) </span><br><span class="line"></span><br><span class="line">k = unhexlify(md5(<span class="built_in">str</span>(ans).encode()).hexdigest())</span><br><span class="line">aes = AES.new(k,AES.MODE_ECB)</span><br><span class="line">data = flag + (<span class="number">16</span>-<span class="built_in">len</span>(flag)%<span class="number">16</span>)*<span class="string">b&quot;\x00&quot;</span></span><br><span class="line">ct = hexlify(aes.encrypt(data)) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a = &#x27;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b = &#x27;</span>,b) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;m = &#x27;</span>,m)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;seq = &#x27;</span>,seq) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ct = &#x27;</span>,ct) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a =  12760960185046114319373228302773710922517145043260117201359198182268919830481221094839217650474599663154368235126389153552714679678111020813518413419360215</span></span><br><span class="line"><span class="string">b =  10117047970182219839870108944868089481578053385699469522500764052432603914922633010879926901213308115011559044643704414828518671345427553143525049573118673</span></span><br><span class="line"><span class="string">m =  9088893209826896798482468360055954173455488051415730079879005756781031305351828789190798690556659137238815575046440957403444877123534779101093800357633817</span></span><br><span class="line"><span class="string">seq =  [1588310287911121355041550418963977300431302853564488171559751334517653272107112155026823633337984299690660859399029380656951654033985636188802999069377064, 12201509401878255828464211106789096838991992385927387264891565300242745135291213238739979123473041322233985445125107691952543666330443810838167430143985860, 13376619124234470764612052954603198949430905457204165522422292371804501727674375468020101015195335437331689076325941077198426485127257539411369390533686339, 8963913870279026075472139673602507483490793452241693352240197914901107612381260534267649905715779887141315806523664366582632024200686272718817269720952005, 5845978735386799769835726908627375251246062617622967713843994083155787250786439545090925107952986366593934283981034147414438049040549092914282747883231052, 9415622412708314171894809425735959412573511070691940566563162947924893407832253049839851437576026604329005326363729310031275288755753545446611757793959050, 6073533057239906776821297586403415495053103690212026150115846770514859699981321449095801626405567742342670271634464614212515703417972317752161774065534410, 3437702861547590735844267250176519238293383000249830711901455900567420289208826126751013809630895097787153707874423814381309133723519107897969128258847626, 2014101658279165374487095121575610079891727865185371304620610778986379382402770631536432571479533106528757155632259040939977258173977096891411022595638738, 10762035186018188690203027733533410308197454736009656743236110996156272237959821985939293563176878272006006744403478220545074555281019946284069071498694967]</span></span><br><span class="line"><span class="string">ct = 37dc072bdf4cdc7e9753914c20cbf0b55c20f03249bacf37c88f66b10b72e6e678940eecdb4c0be8466f68fdcd13bd81</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>直接用题目给的函数会超出python解释器允许的最大深度，因此用循环代替递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">a = <span class="number">12760960185046114319373228302773710922517145043260117201359198182268919830481221094839217650474599663154368235126389153552714679678111020813518413419360215</span></span><br><span class="line">b = <span class="number">10117047970182219839870108944868089481578053385699469522500764052432603914922633010879926901213308115011559044643704414828518671345427553143525049573118673</span></span><br><span class="line">m = <span class="number">9088893209826896798482468360055954173455488051415730079879005756781031305351828789190798690556659137238815575046440957403444877123534779101093800357633817</span></span><br><span class="line">seq = [<span class="number">1588310287911121355041550418963977300431302853564488171559751334517653272107112155026823633337984299690660859399029380656951654033985636188802999069377064</span>,<span class="number">12201509401878255828464211106789096838991992385927387264891565300242745135291213238739979123473041322233985445125107691952543666330443810838167430143985860</span>,<span class="number">13376619124234470764612052954603198949430905457204165522422292371804501727674375468020101015195335437331689076325941077198426485127257539411369390533686339</span>,<span class="number">8963913870279026075472139673602507483490793452241693352240197914901107612381260534267649905715779887141315806523664366582632024200686272718817269720952005</span>,<span class="number">5845978735386799769835726908627375251246062617622967713843994083155787250786439545090925107952986366593934283981034147414438049040549092914282747883231052</span>,<span class="number">9415622412708314171894809425735959412573511070691940566563162947924893407832253049839851437576026604329005326363729310031275288755753545446611757793959050</span>,<span class="number">6073533057239906776821297586403415495053103690212026150115846770514859699981321449095801626405567742342670271634464614212515703417972317752161774065534410</span>,<span class="number">3437702861547590735844267250176519238293383000249830711901455900567420289208826126751013809630895097787153707874423814381309133723519107897969128258847626</span>,<span class="number">2014101658279165374487095121575610079891727865185371304620610778986379382402770631536432571479533106528757155632259040939977258173977096891411022595638738</span>,<span class="number">10762035186018188690203027733533410308197454736009656743236110996156272237959821985939293563176878272006006744403478220545074555281019946284069071498694967</span>]</span><br><span class="line">ct = <span class="string">&#x27;37dc072bdf4cdc7e9753914c20cbf0b55c20f03249bacf37c88f66b10b72e6e678940eecdb4c0be8466f68fdcd13bd81&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">homework</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    a1, a2 = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 计算 seqsum</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(seq)):</span><br><span class="line">            ans += gmpy2.powmod(i, k, m) * seq[k]</span><br><span class="line">        <span class="comment"># 更新 a1 和 a2</span></span><br><span class="line">        a1, a2 = a2, (a*a2 + b*a1 + ans) % m</span><br><span class="line">    <span class="keyword">return</span> a2</span><br><span class="line"></span><br><span class="line">ans = homework(<span class="number">2023</span>)</span><br><span class="line"></span><br><span class="line">k = unhexlify(hashlib.md5(<span class="built_in">str</span>(ans).encode()).hexdigest())</span><br><span class="line">aes = AES.new(k, AES.MODE_ECB)</span><br><span class="line">c=unhexlify(ct)</span><br><span class="line">flag=aes.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#c7ceedc7197a0d350025fff478f667293ebbaa6b</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>巅峰极客2023 CRYPTO</title>
      <link href="/posts/ef1c5c3c.html"/>
      <url>/posts/ef1c5c3c.html</url>
      
        <content type="html"><![CDATA[<h1 id="巅峰极客2023-CRYPTO"><a href="#巅峰极客2023-CRYPTO" class="headerlink" title="巅峰极客2023 CRYPTO"></a>巅峰极客2023 CRYPTO</h1><h2 id="数学但高中"><a href="#数学但高中" class="headerlink" title="数学但高中"></a>数学但高中</h2><p>使用demos软件输入各函数表达式，即可绘制出flag图像</p><h2 id="Simple-Encryption"><a href="#Simple-Encryption" class="headerlink" title="Simple_Encryption"></a>Simple_Encryption</h2><p>先看前半段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">p = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">q = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">N = p * q</span><br><span class="line">g, r1, r2 = [getRandomRange(<span class="number">1</span>, N) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">g1 = <span class="built_in">pow</span>(g, r1 * (p - <span class="number">1</span>), N)</span><br><span class="line">g2 = <span class="built_in">pow</span>(g, r2 * (q - <span class="number">1</span>), N)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m</span>):</span><br><span class="line">s1, s2 = [getRandomRange(<span class="number">1</span>, N) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">c1 = (m * <span class="built_in">pow</span>(g1, s1, N)) % N</span><br><span class="line">c2 = (m * <span class="built_in">pow</span>(g2, s2, N)) % N</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1=&quot;</span>, c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2=&quot;</span>, c2)</span><br><span class="line"><span class="keyword">return</span> (c1, c2)</span><br><span class="line"></span><br><span class="line">c = encrypt(bytes_to_long(flag[:<span class="built_in">len</span>(flag) // <span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N=&#x27;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;g1=&#x27;</span>, g1)</span><br></pre></td></tr></table></figure><p>p、q都是素数，由费马小定理，有 pow(g, p-1)&#x3D;&#x3D;1(mod p), pow(g, q-1)&#x3D;&#x3D;1(mod q)</p><p>那么 g1&#x3D;&#x3D;g^(r1·(p-1))+k·N，两边同时模p，得到 g1&#x3D;&#x3D;1(mod p)，即 g1-1&#x3D;&#x3D;k·p</p><p>求g1-1和N的最大公约数，得到 p&#x3D;gcd(g1-1, N)</p><p>然后 c1 &#x3D; (m · pow(g1, s1, N)) % N，带入g1的表达式，两边模p，再次用费马小定理：</p><p>c1&#x3D;&#x3D;m(mod p)，同理c2&#x3D;&#x3D;m(mod q)</p><p>所以m1&#x3D;c1%p</p><p>前半段flag脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c1 = <span class="number">19024563955839349902897822692180949371550067644378624199902067434708278125346234824900117853598997270022872667319428613147809325929092749312310446754419305096891122211944442338664613779595641268298482084259741784281927857614814220279055840825157115551456554287395502655358453270843601870807174309121367449335110327991187235786798374254470758957844690258594070043388827157981964323699747450405814713722613265012947852856714100237325256114904705539465145676960232769502207049858752573601516773952294218843901330100257234517481221811887136295727396712894842769582824157206825592614684804626241036297918244781918275524254</span></span><br><span class="line">N = <span class="number">21831630625212912450058787218272832615084640356500740162478776482071876178684642739065105728423872548532056206845637492058465613779973193354996353323494373418215019445325632104575415991984764454753263189235376127871742444636236132111097548997063091478794422370043984009615893441148901566420508196170556189546911391716595983110030778046242014896752388438535131806524968952947016059907135882390507706966746973544598457963945671064540465259211834751973065197550500334726779434679470160463944292619173904064826217284899341554269864669620477774678605962276256707036721407638013951236957603286867871199275024050690034901963</span></span><br><span class="line">g1 = <span class="number">20303501619435729000675510820217420636246553663472832286487504757515586157679361170332171306491820918722752848685645096611030558245362578422584797889428493611704976472409942840368080016946977234874471779189922713887914075985648876516896823599078349725871578446532134614410886658001724864915073768678394238725788245439086601955497248593286832679485832319756671985505398841701463782272300202981842733576006152153012355980197830911700112001441621619417349747262257225469106511527467526286661082010163334100555372381681421874165851063816598907314117035131618062582953512203870615406642787786668571083042463072230605649134</span></span><br><span class="line">p = gcd(g1-<span class="number">1</span>,N)</span><br><span class="line">m1 = c1%p</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line"><span class="comment">#flag&#123;f561fafb-32ce-9d</span></span><br></pre></td></tr></table></figure><p>再看后半段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">msg, length</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(msg)</span><br><span class="line">    <span class="keyword">return</span> msg + (length - l) * <span class="built_in">chr</span>(length - l).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">q = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">assert</span> (p != q)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">5</span></span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line"><span class="keyword">assert</span> (e * d % (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">flag = pad(flag[<span class="built_in">len</span>(flag) // <span class="number">2</span>:], <span class="number">48</span>) <span class="comment">#对后半段flag进行长度填充至48字节</span></span><br><span class="line">m = [<span class="built_in">int</span>(binascii.b2a_hex(flag[i * <span class="number">16</span>:i * <span class="number">16</span> + <span class="number">16</span>]).decode(<span class="string">&#x27;utf-8&#x27;</span>), <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;S=&#x27;</span>, <span class="built_in">sum</span>(m) % n)</span><br><span class="line">cnt = <span class="built_in">len</span>(m)</span><br><span class="line">A = [(i + <span class="number">128</span>) ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line">B = [(i + <span class="number">1024</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line">C = [(i + <span class="number">512</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line">Cs = [<span class="built_in">int</span>(<span class="built_in">pow</span>((A[i] * m[i] ** <span class="number">2</span> + B[i] * m[i] + C[i]), e, n)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N=&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e=&#x27;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Cs=&#x27;</span>, Cs)</span><br></pre></td></tr></table></figure><p>m 是一个包含三个整数的列表，它们分别对应着原始 flag 的前 16 字节、第 17 到 32 字节、以及第 33 到 48 字节</p><p>cnt&#x3D;&#x3D;3，我们可以求出列表A、B、C的内容</p><p>A&#x3D; [16384, 16641, 16900]B&#x3D; [1024, 1025, 1026]C&#x3D; [512, 513, 514]</p><p>最后A、B、C、Cs都已知，要求m[i]的值只要sage解方程即可</p><p>解出m得到后半段flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m = [<span class="number">65413472431888815878902893901773169457</span>,<span class="number">133183392452574799979498526266539842331</span>, <span class="number">36029897673981719660827899610422516507</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>])+long_to_bytes(m[<span class="number">1</span>])+long_to_bytes(m[<span class="number">2</span>]))</span><br><span class="line"><span class="comment">#去掉填充字符后：16-18fa-ec795fc1d208&#125;</span></span><br></pre></td></tr></table></figure><p>求Grobner基参考： <a href="https://fq6p9pyo5tt.feishu.cn/docx/PPG0dCRT4oPLGOxotaicGSKonsc#D0HzdA7S1ouTn1xwOzDcTeX3n2O">https://fq6p9pyo5tt.feishu.cn/docx/PPG0dCRT4oPLGOxotaicGSKonsc#D0HzdA7S1ouTn1xwOzDcTeX3n2O</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF 2023 CRYPTO</title>
      <link href="/posts/f8e8c115.html"/>
      <url>/posts/f8e8c115.html</url>
      
        <content type="html"><![CDATA[<h1 id="DASCTF-2023-CRYPTO"><a href="#DASCTF-2023-CRYPTO" class="headerlink" title="DASCTF 2023 CRYPTO"></a>DASCTF 2023 CRYPTO</h1><h2 id="ezDHKE"><a href="#ezDHKE" class="headerlink" title="ezDHKE"></a>ezDHKE</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randbytes, getrandbits</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diffie_hellman</span>(<span class="params">g, p, flag</span>):</span><br><span class="line">    alice = getrandbits(<span class="number">1024</span>) <span class="comment">#私钥XA</span></span><br><span class="line">    bob = getrandbits(<span class="number">1024</span>) <span class="comment">#私钥XB</span></span><br><span class="line">    alice_c = <span class="built_in">pow</span>(g, alice, p) <span class="comment">#公钥YA</span></span><br><span class="line">    bob_c = <span class="built_in">pow</span>(g, bob, p) <span class="comment">#公钥YB</span></span><br><span class="line">    <span class="built_in">print</span>(alice_c , bob_c)</span><br><span class="line">    key = sha256(long_to_bytes(<span class="built_in">pow</span>(bob_c, alice, p))).digest()<span class="comment">#计算共享密钥</span></span><br><span class="line">    iv = <span class="string">b&quot;dasctfdasctfdasc&quot;</span></span><br><span class="line">    aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    enc = aes.encrypt(flag)</span><br><span class="line">    <span class="built_in">print</span>(enc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getp</span>():</span><br><span class="line">    p = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;P = &quot;</span>))</span><br><span class="line">    <span class="keyword">assert</span> isPrime(p)</span><br><span class="line">    <span class="keyword">assert</span> p.bit_length() &gt;= <span class="number">1024</span> <span class="keyword">and</span> p.bit_length() &lt;= <span class="number">2048</span></span><br><span class="line">    g = <span class="number">2</span></span><br><span class="line">    diffie_hellman(g, p, flag)</span><br><span class="line"></span><br><span class="line">getp()</span><br></pre></td></tr></table></figure><p>解题思路就是发送一个我们选定的素数p，返回公钥和AES加密后的flag，利用公钥和素数p的性质求出共享密钥key，就能AES解密出flag</p><p>突破点在于选定的素数p，除了满足长度要求，还要是一个光滑素数，便于求离散对数得到密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构造光滑素数p</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myPrime</span>(<span class="params">bits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">            n *= choice(sieve_base)</span><br><span class="line">        <span class="keyword">if</span> isPrime(n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = myPrime(1024)</span></span><br><span class="line">p = <span class="number">1182469077081307370897196218645745761830980444301765931993116341653232047837372164705423559281182692544176204911597370454757578292386802085769931530664049097675768844533400835590638787991051583020139522904465317708701035409426895763140957649414478041455897846288859623988524211639954453474651908631751484995976707</span></span><br></pre></td></tr></table></figure><p>利用nc指令进行交互得到相关输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">P = 1182469077081307370897196218645745761830980444301765931993116341653232047837372164705423559281182692544176204911597370454757578292386802085769931530664049097675768844533400835590638787991051583020139522904465317708701035409426895763140957649414478041455897846288859623988524211639954453474651908631751484995976707</span><br><span class="line">alice_c = </span><br><span class="line">987620060329951928897563801889050674437685358955105875701300829837886144006761391945173582761063010834324604561815351590082053214740533840471543325929416813754762786730252281332020628795561105398783397489235540195258717278936159572795700142673565438486544428625198794447713128670178155045211784620148790004123429 </span><br><span class="line">bob_c = 270636258786826687848226566861410417142285939233875568227375941891983616048697934105499840710702658150387478757489868270079301029653993331675122204299929527261954042267522199469280245834147738603817442312278680530875799849310158644931690270517452335585721704968980953405316655912005447964717311154087082611013281</span><br><span class="line">enc = b&#x27;\x87\x0b*\n\xdfP\x17\xa6M\xf7\x84);\x8fC\xbd`:\xf7\x9d\x02\xbb\xac\xb6\xa34\xe3\x08MO[&amp;\xf8/\xc5/\x94\xd8\xe3#\xd2\xc5\xa3\x08\xbe\x7f\xff\x81&#x27;</span><br></pre></td></tr></table></figure><p>用sage求离散对数得到私钥alice，随后求出共享密钥key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#sage</span><br><span class="line">p = 1182469077081307370897196218645745761830980444301765931993116341653232047837372164705423559281182692544176204911597370454757578292386802085769931530664049097675768844533400835590638787991051583020139522904465317708701035409426895763140957649414478041455897846288859623988524211639954453474651908631751484995976707</span><br><span class="line">x = 987620060329951928897563801889050674437685358955105875701300829837886144006761391945173582761063010834324604561815351590082053214740533840471543325929416813754762786730252281332020628795561105398783397489235540195258717278936159572795700142673565438486544428625198794447713128670178155045211784620148790004123429 </span><br><span class="line">y = 270636258786826687848226566861410417142285939233875568227375941891983616048697934105499840710702658150387478757489868270079301029653993331675122204299929527261954042267522199469280245834147738603817442312278680530875799849310158644931690270517452335585721704968980953405316655912005447964717311154087082611013281</span><br><span class="line">g = 2</span><br><span class="line"></span><br><span class="line">G = GF(p)</span><br><span class="line">x = G(x)</span><br><span class="line">y = G(y)</span><br><span class="line">g = G(g)</span><br><span class="line">alice=discrete_log(x,g)</span><br><span class="line">key=pow(y,alice,p)</span><br><span class="line">print(key)</span><br></pre></td></tr></table></figure><p>随后解AES得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">key = <span class="number">895107744833608757358776131937585844353308433149199136571117336830664784309540492249302485574665697659975863976053767850547066551073413029380249393082118011715491767941434289079700897437813321770443071103966854625383285225704046308527264820122218493791074582588445175100704170637454279177172957800740691009465176</span></span><br><span class="line">key = sha256(long_to_bytes(key)).digest()</span><br><span class="line">iv = <span class="string">b&#x27;dasctfdasctfdasc&#x27;</span></span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">enc = <span class="string">b&#x27;\x87\x0b*\n\xdfP\x17\xa6M\xf7\x84);\x8fC\xbd`:\xf7\x9d\x02\xbb\xac\xb6\xa34\xe3\x08MO[&amp;\xf8/\xc5/\x94\xd8\xe3#\xd2\xc5\xa3\x08\xbe\x7f\xff\x81&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(aes.decrypt(enc))</span><br><span class="line"><span class="comment">#DASCTF&#123;bc3d38a8-1b18-421a-ba30-2425e43f613d&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> secret, flag</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&quot;dasctf&#123;&quot;</span> + secret + <span class="string">b&quot;&#125;&quot;</span></span><br><span class="line">e = <span class="number">11</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">P = getPrime(<span class="number">512</span>)</span><br><span class="line">Q = getPrime(<span class="number">512</span>)</span><br><span class="line">N = P * Q</span><br><span class="line">gift = P ^ (Q &gt;&gt; <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(N, gift, <span class="built_in">pow</span>(n, e, N))</span><br><span class="line"><span class="built_in">print</span>(encrypt(bytes_to_long(secret)),</span><br><span class="line">    encrypt(bytes_to_long(flag)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 75000029602085996700582008490482326525611947919932949726582734167668021800854674616074297109962078048435714672088452939300776268788888016125632084529419230038436738761550906906671010312930801751000022200360857089338231002088730471277277319253053479367509575754258003761447489654232217266317081318035524086377 8006730615575401350470175601463518481685396114003290299131469001242636369747855817476589805833427855228149768949773065563676033514362512835553274555294034 14183763184495367653522884147951054630177015952745593358354098952173965560488104213517563098676028516541915855754066719475487503348914181674929072472238449853082118064823835322313680705889432313419976738694317594843046001448855575986413338142129464525633835911168202553914150009081557835620953018542067857943</span></span><br><span class="line"><span class="comment"># 69307306970629523181683439240748426263979206546157895088924929426911355406769672385984829784804673821643976780928024209092360092670457978154309402591145689825571209515868435608753923870043647892816574684663993415796465074027369407799009929334083395577490711236614662941070610575313972839165233651342137645009 46997465834324781573963709865566777091686340553483507705539161842460528999282057880362259416654012854237739527277448599755805614622531827257136959664035098209206110290879482726083191005164961200125296999449598766201435057091624225218351537278712880859703730566080874333989361396420522357001928540408351500991</span></span><br></pre></td></tr></table></figure><p>因为 gift &#x3D; P ^ (Q &gt;&gt; 16)， 已知gift，那么P的高16位是泄露出来的，用N除可以确定Q的部分高位。这样又有Q的高位已知，再利用gift异或能够确定P的更多位数，循环下去直到确定P和Q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">n_c = <span class="number">14183763184495367653522884147951054630177015952745593358354098952173965560488104213517563098676028516541915855754066719475487503348914181674929072472238449853082118064823835322313680705889432313419976738694317594843046001448855575986413338142129464525633835911168202553914150009081557835620953018542067857943</span></span><br><span class="line">secret_c = <span class="number">69307306970629523181683439240748426263979206546157895088924929426911355406769672385984829784804673821643976780928024209092360092670457978154309402591145689825571209515868435608753923870043647892816574684663993415796465074027369407799009929334083395577490711236614662941070610575313972839165233651342137645009</span></span><br><span class="line">flag_c = <span class="number">46997465834324781573963709865566777091686340553483507705539161842460528999282057880362259416654012854237739527277448599755805614622531827257136959664035098209206110290879482726083191005164961200125296999449598766201435057091624225218351537278712880859703730566080874333989361396420522357001928540408351500991</span></span><br><span class="line">N = <span class="number">75000029602085996700582008490482326525611947919932949726582734167668021800854674616074297109962078048435714672088452939300776268788888016125632084529419230038436738761550906906671010312930801751000022200360857089338231002088730471277277319253053479367509575754258003761447489654232217266317081318035524086377</span></span><br><span class="line">gift = <span class="number">8006730615575401350470175601463518481685396114003290299131469001242636369747855817476589805833427855228149768949773065563676033514362512835553274555294034</span></span><br><span class="line">pbar = gift &gt;&gt;(<span class="number">512</span>-<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line">  qbar = (N&gt;&gt;(<span class="number">1024</span> - pbar.bit_length()*<span class="number">2</span>))//pbar</span><br><span class="line">  qbar = qbar&gt;&gt;<span class="number">6</span></span><br><span class="line">  gifts = gift^(qbar&lt;&lt;(<span class="number">512</span>-<span class="number">16</span>-qbar.bit_length()))</span><br><span class="line">  pbar = gifts &gt;&gt; (<span class="number">512</span>-<span class="number">16</span>-qbar.bit_length())</span><br><span class="line"> <span class="keyword">except</span>:</span><br><span class="line">  <span class="keyword">break</span></span><br><span class="line"><span class="comment">#循环最后会还剩大约6个比特没有恢复，再进行暴力搜索</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line"> <span class="keyword">if</span> N%((pbar&lt;&lt;<span class="number">6</span>)+i) == <span class="number">0</span>:</span><br><span class="line">  p = (pbar&lt;&lt;<span class="number">6</span>)+i</span><br><span class="line">  q = N//p</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>,p)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;q =&quot;</span>,q)</span><br><span class="line">  <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到P、Q之后利用RSA解出n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">P = <span class="number">8006847171912577069085166877758626954304824756138758266557706391662987806065132448544117840031499707938227955094109779732609035310252723066470330862622641</span></span><br><span class="line">Q = <span class="number">9366986529377069783394625848920106951220134111548343265311677163992169555436421569730703291128771472885865288798344038000984911921843088200997725324682297</span></span><br><span class="line">e = <span class="number">11</span></span><br><span class="line">n_c = <span class="number">14183763184495367653522884147951054630177015952745593358354098952173965560488104213517563098676028516541915855754066719475487503348914181674929072472238449853082118064823835322313680705889432313419976738694317594843046001448855575986413338142129464525633835911168202553914150009081557835620953018542067857943</span></span><br><span class="line">d = invert(e,(P-<span class="number">1</span>)*(Q-<span class="number">1</span>))</span><br><span class="line">N = P*Q</span><br><span class="line">n = <span class="built_in">pow</span>(n_c,d,N)</span><br><span class="line"><span class="comment">#print(n)</span></span><br><span class="line"><span class="comment">#这里发现n是一个偶数，所以n应该大于N，让n = n+N</span></span><br><span class="line"><span class="built_in">print</span>(n+N)</span><br></pre></td></tr></table></figure><p>接下来是相关明文攻击，由于 secret 长度未知，我们设有i个字符，进行爆破</p><p>我们知道 x&#x3D;&#x3D;secret 是下面两式的解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1 = (bytes_to_long(b&quot;dasctf&#123;&quot; + b&quot;\x00&quot;*i + b&quot;&#125;&quot;) + 256*x)^11 - flag_c</span><br><span class="line">f2 = x^11 - secret_c</span><br></pre></td></tr></table></figure><p>这两个式子一定有公因式 x-secret，于是攻击脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#sage</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">def GCD(a, b):</span><br><span class="line">    if(b == 0):</span><br><span class="line">        return a.monic()</span><br><span class="line">    else:</span><br><span class="line">        return GCD(b, a % b)</span><br><span class="line"></span><br><span class="line">N = 83410392685813224685786027640778560521035854332627839979281105731457044069408118952629284089869335506983096270269822559619624906180108256504440296527471536363057103101146262613593336072556587341466840510200003498265457285439149541137127199088938421905041387224795918868443175561632999479925818053898100117419</span><br><span class="line">R.&lt;x&gt; = Zmod(N)[]</span><br><span class="line">secret_c = 69307306970629523181683439240748426263979206546157895088924929426911355406769672385984829784804673821643976780928024209092360092670457978154309402591145689825571209515868435608753923870043647892816574684663993415796465074027369407799009929334083395577490711236614662941070610575313972839165233651342137645009</span><br><span class="line">flag_c = 46997465834324781573963709865566777091686340553483507705539161842460528999282057880362259416654012854237739527277448599755805614622531827257136959664035098209206110290879482726083191005164961200125296999449598766201435057091624225218351537278712880859703730566080874333989361396420522357001928540408351500991</span><br><span class="line"></span><br><span class="line">for i in range(40):</span><br><span class="line"> f1 = (bytes_to_long(b&quot;dasctf&#123;&quot; + b&quot;\x00&quot;*i + b&quot;&#125;&quot;) + 256*x)^11 - flag_c</span><br><span class="line"> f2 = x^11 - secret_c</span><br><span class="line"> if (N-GCD(f1,f2).coefficients()[0]) != N-1:</span><br><span class="line"> print(long_to_bytes(int(N-GCD(f1,f2).coefficients()[0])))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MoeCTF 2022 CRYPTO-1</title>
      <link href="/posts/33e51a15.html"/>
      <url>/posts/33e51a15.html</url>
      
        <content type="html"><![CDATA[<h1 id="MoeCTF-2022-CRYPTO-1"><a href="#MoeCTF-2022-CRYPTO-1" class="headerlink" title="MoeCTF 2022 CRYPTO-1"></a>MoeCTF 2022 CRYPTO-1</h1><h2 id="vigenere"><a href="#vigenere" class="headerlink" title="vigenere"></a>vigenere</h2><p>题目是没有密钥的维吉尼亚密码，在线工具解密，明文中可以找到flag</p><h2 id="0rsa0"><a href="#0rsa0" class="headerlink" title="0rsa0"></a>0rsa0</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[<span class="number">0</span>:<span class="number">7</span>] == <span class="string">b&#x27;moectf&#123;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag[-<span class="number">1</span>:] == <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">flag = flag[<span class="number">7</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">32</span></span><br><span class="line"></span><br><span class="line">m1 = bytes_to_long(flag[<span class="number">0</span>:<span class="number">16</span>])</span><br><span class="line">m2 = bytes_to_long(flag[<span class="number">16</span>:<span class="number">32</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc1</span>(<span class="params">m</span>):</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">3</span></span><br><span class="line">    c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">    <span class="keyword">return</span> n,e,c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc2</span>(<span class="params">m</span>):</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    n = p * q </span><br><span class="line">    dp2 = d % (p-<span class="number">1</span>)</span><br><span class="line">    c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">    <span class="keyword">return</span> n,e,c,dp2</span><br><span class="line"></span><br><span class="line">n1,e1,c1 = enc1(m1)</span><br><span class="line">n2,e2,c2,dp2 = enc2(m2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n1=&quot;</span>+ <span class="built_in">str</span>(n1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1=&quot;</span>+ <span class="built_in">str</span>(e1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1=&quot;</span>+ <span class="built_in">str</span>(c1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2=&quot;</span>+ <span class="built_in">str</span>(n2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2=&quot;</span>+ <span class="built_in">str</span>(e2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2=&quot;</span>+ <span class="built_in">str</span>(c2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dp2=&quot;</span>+ <span class="built_in">str</span>(dp2))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n1=133024413746207623787624696996450696028790885302997888417950218110624599333002677651319135333439059708696691802077223829846594660086912881559705074934655646133379015018208216486164888406398123943796359972475427652972055533125099746441089220943904185289464863994194089394637271086436301059396682856176212902707</span></span><br><span class="line"><span class="string">e1=3</span></span><br><span class="line"><span class="string">c1=1402983421957507617092580232325850324755110618998641078304840725502785669308938910491971922889485661674385555242824</span></span><br><span class="line"><span class="string">n2=159054389158529397912052248500898471690131016887756654738868415880711791524038820158051782236121110394481656324333254185994103242391825337525378467922406901521793714621471618374673206963439266173586955520902823718942484039624752828390110673871132116507696336326760564857012559508160068814801483975094383392729</span></span><br><span class="line"><span class="string">e2=65537</span></span><br><span class="line"><span class="string">c2=37819867277367678387219893740454448327093874982803387661058084123080177731002392119369718466140559855145584144511271801362374042596420131167791821955469392938900319510220897100118141494412797730438963434604351102878410868789119825127662728307578251855605147607595591813395984880381435422467527232180612935306</span></span><br><span class="line"><span class="string">dp2=947639117873589776036311153850942192190143164329999603361788468962756751774397111913170053010412835033030478855001898886178148944512883446156861610917865</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>flag分两段加密，c1小指数攻击得到m1，c2 dp泄露得到m2，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">133024413746207623787624696996450696028790885302997888417950218110624599333002677651319135333439059708696691802077223829846594660086912881559705074934655646133379015018208216486164888406398123943796359972475427652972055533125099746441089220943904185289464863994194089394637271086436301059396682856176212902707</span></span><br><span class="line">e1 = <span class="number">3</span></span><br><span class="line">c1 = <span class="number">1402983421957507617092580232325850324755110618998641078304840725502785669308938910491971922889485661674385555242824</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    m1 = gmpy2.iroot(c1+k*n1,e1)</span><br><span class="line">    <span class="keyword">if</span>(m1[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        flag1 = long_to_bytes(m1[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(flag1)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k = k+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">159054389158529397912052248500898471690131016887756654738868415880711791524038820158051782236121110394481656324333254185994103242391825337525378467922406901521793714621471618374673206963439266173586955520902823718942484039624752828390110673871132116507696336326760564857012559508160068814801483975094383392729</span></span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">c2 = <span class="number">37819867277367678387219893740454448327093874982803387661058084123080177731002392119369718466140559855145584144511271801362374042596420131167791821955469392938900319510220897100118141494412797730438963434604351102878410868789119825127662728307578251855605147607595591813395984880381435422467527232180612935306</span></span><br><span class="line">dp2 = <span class="number">947639117873589776036311153850942192190143164329999603361788468962756751774397111913170053010412835033030478855001898886178148944512883446156861610917865</span></span><br><span class="line">p = <span class="number">1</span></span><br><span class="line">q = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e2):</span><br><span class="line">    p=(dp2*e2-<span class="number">1</span>)//i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n2%p == <span class="number">0</span>:</span><br><span class="line">        q = n2//p</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e2, phi)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2, d, n2)</span><br><span class="line">flag2 = long_to_bytes(m2)</span><br><span class="line"><span class="built_in">print</span>(flag2)</span><br></pre></td></tr></table></figure><h2 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q=&#x27;</span>,q)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"><span class="comment">#p= 12408795636519868275579286477747181009018504169827579387457997229774738126230652970860811085539129972962189443268046963335610845404214331426857155412988073</span></span><br><span class="line"><span class="comment">#q= 12190036856294802286447270376342375357864587534233715766210874702670724440751066267168907565322961270655972226761426182258587581206888580394726683112820379</span></span><br><span class="line"><span class="comment">#c= 68960610962019321576894097705679955071402844421318149418040507036722717269530195000135979777852568744281930839319120003106023209276898286482202725287026853925179071583797231099755287410760748104635674307266042492611618076506037004587354018148812584502385622631122387857218023049204722123597067641896169655595</span></span><br></pre></td></tr></table></figure><p>常规求解发生错误，发现e和phi不互素，且phi是e的整数倍</p><p>因为e和p互素，那么 c&#x3D;&#x3D;m^e(mod p)，求e模p-1下的逆元d，即可求出m</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">12408795636519868275579286477747181009018504169827579387457997229774738126230652970860811085539129972962189443268046963335610845404214331426857155412988073</span></span><br><span class="line">q = <span class="number">12190036856294802286447270376342375357864587534233715766210874702670724440751066267168907565322961270655972226761426182258587581206888580394726683112820379</span></span><br><span class="line">c = <span class="number">68960610962019321576894097705679955071402844421318149418040507036722717269530195000135979777852568744281930839319120003106023209276898286482202725287026853925179071583797231099755287410760748104635674307266042492611618076506037004587354018148812584502385622631122387857218023049204722123597067641896169655595</span></span><br><span class="line"></span><br><span class="line">phi = p-<span class="number">1</span></span><br><span class="line">d = invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="一次就好"><a href="#一次就好" class="headerlink" title="一次就好"></a>一次就好</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod,next_prime</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;Just once,I will accompany you to see the world&#x27;</span></span><br><span class="line">flag = flag.ljust(<span class="built_in">len</span>(c),<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">key = strxor(flag.encode(), c)</span><br><span class="line">m = bytes_to_long(key)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">N = p*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">gift = powmod(m, e, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gift)</span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gift = 127749242340004016446001520961422059381052911692861305057396462507126566256652316418648339729479729456613704261614569202080544183416817827900318057127539938899577580150210279291202882125162360563285794285643498788533366420857232908632854569967831654923280152015070999912426044356353393293132914925252494215314</span></span><br><span class="line"><span class="comment"># N = 164395171965189899201846744244839588935095288852148507114700855000512464673975991783671493756953831066569435489213778701866548078207835105414442567008315975881952023037557292470005621852113709605286462434049311321175270134326956812936961821511753256992797013020030263567313257339785161436188882721736453384403</span></span><br></pre></td></tr></table></figure><p>主要考查n由邻近素数组成的情况，直接对n开平方并找下一个素数就能找到p、q中的一个</p><p>之后按常规rsa求到gift，最后字符串gift和c异或，并去掉填充长度的符号，就能解出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">12821668064849826676074701213910298504451620184307130249376361333490782040849300923713647818247010549622664747770828229853003308659470956068108542842690393</span></span><br><span class="line">q = <span class="number">12821668064849826676074701213910298504451620184307130249376361333490782040849300923713647818247010549622664747770828229853003308659470956068108542842690571</span></span><br><span class="line">gift = <span class="number">127749242340004016446001520961422059381052911692861305057396462507126566256652316418648339729479729456613704261614569202080544183416817827900318057127539938899577580150210279291202882125162360563285794285643498788533366420857232908632854569967831654923280152015070999912426044356353393293132914925252494215314</span></span><br><span class="line">N = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(gift,d,N)</span><br><span class="line">key = long_to_bytes(m)</span><br><span class="line">c = <span class="string">b&#x27;Just once,I will accompany you to see the world&#x27;</span></span><br><span class="line">flagen = strxor(key, c)</span><br><span class="line"><span class="built_in">print</span>(flagen)</span><br></pre></td></tr></table></figure><h2 id="smooth"><a href="#smooth" class="headerlink" title="smooth"></a>smooth</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> sieve_base,isPrime,getPrime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_vulnerable_prime</span>():</span><br><span class="line">    p=<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">136</span>):</span><br><span class="line">            smallp=random.choice(sieve_base)</span><br><span class="line">            p*=smallp</span><br><span class="line">        <span class="keyword">if</span> isPrime(p+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> p+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">P=get_vulnerable_prime()</span><br><span class="line">Q=getPrime(<span class="number">2048</span>)</span><br><span class="line">N=P*Q</span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,P-<span class="number">1729</span>):</span><br><span class="line">    flag=flag*i%P</span><br><span class="line"></span><br><span class="line">c=<span class="built_in">pow</span>(flag,e,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,<span class="built_in">hex</span>(c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N=&quot;</span>,<span class="built_in">hex</span>(N))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c= 0x3cc51d09c48948e2485820f6758fb10c7693c236acc527ad563ba8369c50a0bc3f650f39a871ee7ef127950ed916c5f4dc69894e11caf9d178cd7e8f9bf9af77e1c69384cc5444da64022b45636eeb5b7a221792880dd242be2bb99be3ed02c430c2b77d4912bec1619d664e066680910317c2bb0c87fafdf25f0a2400103278f557b8eca51d3b67d61098f1ab68da072bb2810596180afbc81a840cd24efef4d4113235160e725a5af4824dc716d758b3bc792f2458e979398e001b27e44d21682e2ef80ae94e21cd09a12e522ca2e569df72f012fa40341645445c6e68c6233a8a39e5b91eb14b1ccfa61c9bad25e8e3285a22da27cd506ddd63f207517a4e8ede00b104d8806ff4c0e3162c3de69169d7e584952655272b96d39d242bb83019c7eab1ceb0b4b287591e1e0a5b6378e70340a82d3430c5925d215f31fda6d9d0bccea240591b22a3d0f6b5bf4ddf1243d71aca0fd53045c352c8c5497ebcdbd7ac11083d63aba7c053604fda2430c317a4e04702b5ad539e110f101165b21dcd9fdb5ba7324acdba6a506244ce7c911197dfe067441fe7488d164c050f45ef6476aaf399cedde1793cceb8c21d88ec8ecf5e17df27586713d7dd9566ec5023cfef75422b73e2d5a932c661b3cfdf9c4bda12b64380d2be1aa957c3e1416e068937bafe79b8cf303296792388e9c197702e11e7ded6088ae992d352b23a4a27</span></span><br><span class="line"><span class="string">N= 0xdc77f076092cbe81c44789ccfc1b2ca55eabae65f44cf34382799e8bbb42d4d6c032bd897c21df1da401929d82deb56264823a757f6cacf63e0037146026cbab32ab9e4abc783dcabaac2b7ccc439937be3ab0fbf149524ff29ef0fe6f27e45215d74b40597c70e8207159dc7f542c2a6828500016480053dfc2d8dbf8fcdf6700640184c8f3318f7aab2e17e116edf680592f5eae951159bb8c20cfbd0cbab8b4b95925b5068038d0377a55a4d346ebbf53a1c2943b7c17e1b9d4a1b77916da2e15140b05b96655906942a07d04b7e25fa7521b3b7ae26eda68375a8b8ef2d5b4704a28168b236de97f24a663f0d0a3aeab47767dfe75a21662f5f25ef7f7d4b25c90fd7bcdd7137c23f03b6ea4209f8fb9b4628355e6ad62e6467d26666d3d1b0e6f078c5f3866413a6fcd3c1dc2ff3a5ab286e339d5c72f4d2f0473a4faddcba6b031bb6ec226fd4b319834b5029f09ea0ffeb5b6ed182d5a13675571b6708c38299118043390343e2f79edebd2ae0e0a765a3aebf776f54ca983cdae8547547cfc8430f7222aefa77301d7cc7c03b1451b6603028b21fea869d35138a9c83919985a91b3fdfa934f25a442cc10349b0ed6f2ee3955d40249e8b3fb9f1955534ee06cee41a3ad2d6ff7dbdb0f01e47b9e4d04f65232f5579135ae035e8ba2d1fe6465a730dcc8b9ba3a558ab38f040ea510757d25e92f886c50c24ad967f1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>光滑数（smooth number）是指可以分解成若干小素数乘积的正整数</p><p>通过费马小定理和 Pollard’s p-1 算法就可以分解 n，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">smooth</span>(<span class="params">N</span>):</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    n = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = powmod(a, n, N)</span><br><span class="line">        res = gcd(a - <span class="number">1</span>, N)</span><br><span class="line">        <span class="keyword">if</span> res != <span class="number">1</span> <span class="keyword">and</span> res != N:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        n += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>之后看到flag先是进了一个阶乘的循环，之后进行了rsa加密</p><p>我们先利用前面分解出的P、Q解出m</p><p>由阶乘联想到Wilson定理  (p - 1)! &#x3D;&#x3D; 1 * (p - 1) &#x3D;&#x3D; -1 (mod p)</p><p>这里flag已经乘了 (P-1730)! ，所以再构造循环，一直乘到结果为flag * (P - 1)! &#x3D;&#x3D; -flag(mod P)</p><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">smooth</span>(<span class="params">N</span>):</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    n = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = powmod(a, n, N)</span><br><span class="line">        res = gcd(a - <span class="number">1</span>, N)</span><br><span class="line">        <span class="keyword">if</span> res != <span class="number">1</span> <span class="keyword">and</span> res != N:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">N = <span class="string">&#x27;dc77f076092cbe81c44789ccfc1b2ca55eabae65f44cf34382799e8bbb42d4d6c032bd897c21df1da401929d82deb56264823a757f6cacf63e0037146026cbab32ab9e4abc783dcabaac2b7ccc439937be3ab0fbf149524ff29ef0fe6f27e45215d74b40597c70e8207159dc7f542c2a6828500016480053dfc2d8dbf8fcdf6700640184c8f3318f7aab2e17e116edf680592f5eae951159bb8c20cfbd0cbab8b4b95925b5068038d0377a55a4d346ebbf53a1c2943b7c17e1b9d4a1b77916da2e15140b05b96655906942a07d04b7e25fa7521b3b7ae26eda68375a8b8ef2d5b4704a28168b236de97f24a663f0d0a3aeab47767dfe75a21662f5f25ef7f7d4b25c90fd7bcdd7137c23f03b6ea4209f8fb9b4628355e6ad62e6467d26666d3d1b0e6f078c5f3866413a6fcd3c1dc2ff3a5ab286e339d5c72f4d2f0473a4faddcba6b031bb6ec226fd4b319834b5029f09ea0ffeb5b6ed182d5a13675571b6708c38299118043390343e2f79edebd2ae0e0a765a3aebf776f54ca983cdae8547547cfc8430f7222aefa77301d7cc7c03b1451b6603028b21fea869d35138a9c83919985a91b3fdfa934f25a442cc10349b0ed6f2ee3955d40249e8b3fb9f1955534ee06cee41a3ad2d6ff7dbdb0f01e47b9e4d04f65232f5579135ae035e8ba2d1fe6465a730dcc8b9ba3a558ab38f040ea510757d25e92f886c50c24ad967f1&#x27;</span></span><br><span class="line">NN = <span class="built_in">int</span>(N,<span class="number">16</span>)</span><br><span class="line"><span class="comment">#P = smooth(NN)</span></span><br><span class="line"><span class="comment">#print(P)</span></span><br><span class="line">c = <span class="string">&#x27;3cc51d09c48948e2485820f6758fb10c7693c236acc527ad563ba8369c50a0bc3f650f39a871ee7ef127950ed916c5f4dc69894e11caf9d178cd7e8f9bf9af77e1c69384cc5444da64022b45636eeb5b7a221792880dd242be2bb99be3ed02c430c2b77d4912bec1619d664e066680910317c2bb0c87fafdf25f0a2400103278f557b8eca51d3b67d61098f1ab68da072bb2810596180afbc81a840cd24efef4d4113235160e725a5af4824dc716d758b3bc792f2458e979398e001b27e44d21682e2ef80ae94e21cd09a12e522ca2e569df72f012fa40341645445c6e68c6233a8a39e5b91eb14b1ccfa61c9bad25e8e3285a22da27cd506ddd63f207517a4e8ede00b104d8806ff4c0e3162c3de69169d7e584952655272b96d39d242bb83019c7eab1ceb0b4b287591e1e0a5b6378e70340a82d3430c5925d215f31fda6d9d0bccea240591b22a3d0f6b5bf4ddf1243d71aca0fd53045c352c8c5497ebcdbd7ac11083d63aba7c053604fda2430c317a4e04702b5ad539e110f101165b21dcd9fdb5ba7324acdba6a506244ce7c911197dfe067441fe7488d164c050f45ef6476aaf399cedde1793cceb8c21d88ec8ecf5e17df27586713d7dd9566ec5023cfef75422b73e2d5a932c661b3cfdf9c4bda12b64380d2be1aa957c3e1416e068937bafe79b8cf303296792388e9c197702e11e7ded6088ae992d352b23a4a27&#x27;</span></span><br><span class="line">cc = <span class="built_in">int</span>(c,<span class="number">16</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">P = <span class="number">45130782138821231634664822924606644347274161463663927387578931639175223286413378324882645031302403289842551326638702711998962760517679897418281467484531163375644705075213662848721478455926415639437965574871053673938130437463383431907231224801316309790287364751279984404056565040242248326224648040650860211493169850992812996172453840449200075853777085801648416876006333273306936825124410389797307488083056497244608773881660250930270420195391832629035158125925203262309579280388854014294622011159984832956422300816768157089660974628522818677622546453173413252374696944407138466146678080076210538578674319834619518810099</span></span><br><span class="line">Q = <span class="number">19929480903966971877741359978214832777067673186776101767607985415984872967131783702304729626331577711025830876686674170433788564223656884574965375895417512648538448454114165043668565344845361735967533803734325629433944151906019295203849389937041766109566748588937702389000280859653264841778232075227804461734481644568063879619171473653153879467534960561551793532641987408308262590477344407917566949561595540828562062207376467975716207562802834742657134267225310067273840884699549038482335638587159643505585791895934244621169372816478043004416985427985158346066496193091020702283948166437350554644511384320505926737291</span></span><br><span class="line">phi = (P-<span class="number">1</span>)*(Q-<span class="number">1</span>)</span><br><span class="line">d = invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(cc,d,NN)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(P-<span class="number">1729</span>,P):</span><br><span class="line">    m = m*i%P</span><br><span class="line">flag = (-m)%P</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><h2 id="MiniMiniBackPack"><a href="#MiniMiniBackPack" class="headerlink" title="MiniMiniBackPack"></a>MiniMiniBackPack</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">size</span>):</span><br><span class="line">    s = <span class="number">1000</span></span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">        a = random.randint(s + <span class="number">1</span>, <span class="number">2</span> * s)</span><br><span class="line">        <span class="keyword">assert</span> a &gt; <span class="built_in">sum</span>(key)</span><br><span class="line">        key.append(a)</span><br><span class="line">        s += a</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">L = <span class="built_in">len</span>(<span class="built_in">bin</span>(m)[<span class="number">2</span>:])</span><br><span class="line">key = gen_key(L)</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">    c += key[i]**(m&amp;<span class="number">1</span>)</span><br><span class="line">    m &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>背包密码原理：<a href="https://ctf-wiki.org/crypto/asymmetric/knapsack/knapsack/">背包加密 - CTF Wiki (ctf-wiki.org)</a></p><p>本题的加密步骤如下：</p><p>首先flag转二进制后通过 gen_key 函数生成 key 数组，其为超递增序列</p><p>随后的for循环中，数组元素的指数 m&amp;1与 m的最低位&amp;1相等，之后又有m的移位，也就是说，这个循环的作用就是 从前往后以 key 数组元素为底、从后向前以m的每一位为指数，与c相加求和。</p><p>我们可以倒推解密：</p><p>首先加密过程中m是从低位到高位的，那么解密就要从高到底，而m的高位对应key的末尾元素，因此将key数组倒序方便求解。之后按c-key[i]是否大于0，判断m该位是否为1。这样循环下去就可以解出m，最后转换得到flag</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">kk = <span class="built_in">open</span>(<span class="string">&#x27;附件.txt&#x27;</span>).readlines()</span><br><span class="line">key = <span class="built_in">eval</span>(kk[<span class="number">0</span>])</span><br><span class="line">key = key[::-<span class="number">1</span>]</span><br><span class="line">c = <span class="number">2396891354790728703114360139080949406724802115971958909288237002299944566663978116795388053104330363637753770349706301118152757502162</span></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">if</span> c - i &gt; <span class="number">0</span>:</span><br><span class="line">        c -= i</span><br><span class="line">        m += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c -= <span class="number">1</span></span><br><span class="line">        m += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">m = <span class="built_in">int</span>(m,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF 2022 新生赛</title>
      <link href="/posts/948ede2a.html"/>
      <url>/posts/948ede2a.html</url>
      
        <content type="html"><![CDATA[<h1 id="SWPUCTF-2022-新生赛"><a href="#SWPUCTF-2022-新生赛" class="headerlink" title="SWPUCTF 2022 新生赛"></a>SWPUCTF 2022 新生赛</h1><h2 id="善哉善哉"><a href="#善哉善哉" class="headerlink" title="善哉善哉"></a>善哉善哉</h2><p>解开压缩包发现是一张jpg，图片备注提示要用到佛说和md5</p><p>010editor打开图片发现末尾的摩斯电码，解密得到：</p><p><code>新佛曰：諸隸僧降閦吽諸閦陀摩隸僧缽薩閦嚤降斯咤須閦色嘚嘇叻閦夷喃哆嚴吶菩若嘇耨咒閦愍閦囉耨所嚤閦嘇閦降陀叻羅宣吽眾阿愍菩修心降叻陀嚤吽蜜吶斯閦嘚愍吽若宣哆色塞囉伏嘇愍降嘇吽闍兜喼如</code></p><p>用新与佛论禅解得：<code>施主，此次前来，不知有何贵干?</code></p><p>最后爆破md5得到flag内容：<code>7551772a99379ed0ae6015a470c1e335</code></p><h2 id="什锦"><a href="#什锦" class="headerlink" title="什锦"></a>什锦</h2><p>CodeA为核心价值观编码，直接在线解码</p><p>结果为 <code>富强明主文明和谐</code></p><p>CodeB是一张猪猪的图片，联想到猪圈密码，也直接在线解码</p><p>结果为 <code>pigissocutewhyyoukillpig</code></p><p>CodeC是brainfuck加密，在线解密即可</p><p>结果为 <code>但是猪猪好好吃诶</code></p><p>最后flag就是 <code>MD5(富强明主文明和谐pigissocutewhyyoukillpig但是猪猪好好吃诶)</code></p><p>得到 <code>NSSCTF&#123;c05485d678cb8a6beb401f31d762532a&#125;</code></p><h2 id="小明文"><a href="#小明文" class="headerlink" title="小明文"></a>小明文</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> getflag</span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">phiN = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = invert(e, phiN)</span><br><span class="line">m = bytes_to_long(getflag().encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="comment">#c=128198926274489803523728445192921664</span></span><br><span class="line"><span class="comment">#flag=NSSCTF&#123;c&#125;</span></span><br></pre></td></tr></table></figure><p>小指数攻击，但此处n未知，先对c直接开e次方，发现符合要求，得到m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c=<span class="number">128198926274489803523728445192921664</span></span><br><span class="line"></span><br><span class="line">m = gmpy2.iroot(c,e)</span><br><span class="line"><span class="keyword">if</span> m[<span class="number">1</span>]:</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><h2 id="爆破MD5"><a href="#爆破MD5" class="headerlink" title="爆破MD5"></a>爆破MD5</h2><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data=&#x27;Boom_MD5****&#x27;</span><br><span class="line">flag=MD5(data)</span><br><span class="line">print(flag)</span><br><span class="line">#0618ac93d4631df725bceea74d0*****</span><br></pre></td></tr></table></figure><p>已知明文和密文的一部分，爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">                    m = hashlib.md5()  <span class="comment"># 获取一个md5加密算法对象</span></span><br><span class="line">                    m.update(<span class="built_in">str</span>(<span class="string">&#x27;Boom_MD5&#x27;</span> + <span class="built_in">chr</span>(i) + <span class="built_in">chr</span>(j) + <span class="built_in">chr</span>(k) + <span class="built_in">chr</span>(l)).encode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># 指定需要加密的字符串</span></span><br><span class="line">                    des = m.hexdigest()</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;0618ac93d4631df725bceea74d0&#x27;</span> <span class="keyword">in</span> des: </span><br><span class="line">                        <span class="built_in">print</span>(des)</span><br><span class="line"><span class="comment">#flag=NSSCTF&#123;0618ac93d4631df725bceea74d0fe071&#125;</span></span><br></pre></td></tr></table></figure><h2 id="yafu分解"><a href="#yafu分解" class="headerlink" title="yafu分解"></a>yafu分解</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> getflag</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">140</span>)</span><br><span class="line">q = getPrime(<span class="number">140</span>)</span><br><span class="line">n = p * q</span><br><span class="line">phiN = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = invert(e, phiN)</span><br><span class="line">m = bytes_to_long(getflag().encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span> + <span class="built_in">str</span>(n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="comment">#n=1851012829537540993346897265450988006921329733937556249710137670254755668838970157221</span></span><br><span class="line"><span class="comment">#c=1165608868963663237838494928147497339359377331987999335624507621030816298293537918937</span></span><br></pre></td></tr></table></figure><p>显然是yafu分解n得到p和q，随后常规RSA，最后要再进行一次位移13的凯撒解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p=<span class="number">1362310363870711901033415700690289289304517</span></span><br><span class="line">q=<span class="number">1358730637766188714476624560503309609820513</span></span><br><span class="line">c=<span class="number">1165608868963663237838494928147497339359377331987999335624507621030816298293537918937</span></span><br><span class="line">n = p * q</span><br><span class="line">phiN = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = invert(e, phiN)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#AFFPGS&#123;snzv1l_ov9_gur_g0_Jr1p0zr&#125;进行凯撒解密</span></span><br></pre></td></tr></table></figure><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><p>通过给出的加密代码，可以知道这是AES加密，利用base64编码，模式为CBC，空格填充</p><p>密钥为 <code>nssctfneedcrypto</code></p><p>偏移量为 <code>1229002635654321</code></p><p>条件充足，可以利用工具解出flag <code>NSSCTF&#123;NSS_CRYPTO_NEED_YOU_0000&#125;</code></p><h2 id="Welcome-to-Modern-Cryptograph"><a href="#Welcome-to-Modern-Cryptograph" class="headerlink" title="Welcome to Modern Cryptograph"></a>Welcome to Modern Cryptograph</h2><p>压缩包内给出公钥私钥和密文，利用工具直接解出flag</p><h2 id="Caesar-Ceaasr"><a href="#Caesar-Ceaasr" class="headerlink" title="Caesar?Ceaasr!"></a>Caesar?Ceaasr!</h2><p>题目：<code>AP&#123;07-p7q6-nr93FGn2r254-7q18q&#125;FSq8no-n2qp7r5</code></p><p>先尝试栅栏密码，发现每组3字的时候就能解出类似flag的字符串</p><p>随后凯撒解密即可</p><h2 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h2><p>搜索题目开头和结尾的信息，得知是一道电子签名题目，要用keybase解密</p><p><code>C:\Users\DELL&gt;keybase verify -m &quot;BEGIN KEYBASE SALTPACK SIGNED MESSAGE. kXR7VktZdyH7rvq v5weRa0zkYz2HcG 0ib8wufDr9Ehs3g 7IrA2TeYweQBqu5 rvbta3003UAuJWC wEK8SvoQqcYEHhK 8RqPvHbeSSUYmnG Y5vhz6AGYcMwcVn nrJq4FLfAD3IGQW NndngFmAhmxV47o mI9tEawz0RxA571 gQVz0BxZXTkwlBl BIMxq2Rj4MkkEcN rmB37Nd5qKhSy45 WPQwe25QsrEHa3F ud2mbgHHsUMV6LZ Nd01d. END KEYBASE SALTPACK SIGNED MESSAGE.&quot;</code></p><p>使用命令行操作解出flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN CRYPTO-2</title>
      <link href="/posts/728800f.html"/>
      <url>/posts/728800f.html</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN-CRYPTO-2"><a href="#CISCN-CRYPTO-2" class="headerlink" title="CISCN CRYPTO-2"></a>CISCN CRYPTO-2</h1><h2 id="CISCN-2023-初赛-Sign-in-passwd"><a href="#CISCN-2023-初赛-Sign-in-passwd" class="headerlink" title="[CISCN 2023 初赛]Sign_in_passwd"></a>[CISCN 2023 初赛]Sign_in_passwd</h2><p>题目：</p><p><code>j2rXjx8yjd=YRZWyTIuwRdbyQdbqR3R9iZmsScutj2iqj3/tidj1jd=D GHI3KLMNJOPQRSTUb%3DcdefghijklmnopWXYZ%2F12%2B406789VaqrstuvwxyzABCDEF5</code></p><p>题目分两行，一般第一行是密文，第二行是密钥</p><p>第二行密钥带有百分号，猜测是URL编码</p><p>URL解密后得到 <code>GHI3KLMNJOPQRSTUb=cdefghijklmnopWXYZ/12+406789VaqrstuvwxyzABCDEF5</code></p><p>用密钥对密文进行base64解码可以得出flag</p><p><img src="/images/cis2-1.png"></p><h2 id="CISCN-2022-东北赛区-math"><a href="#CISCN-2022-东北赛区-math" class="headerlink" title="[CISCN 2022 东北赛区]math"></a>[CISCN 2022 东北赛区]math</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&quot;flag&#123;&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">b&quot;&#125;&quot;</span>)</span><br><span class="line">message=bytes_to_long(flag)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params">nbit, dbit</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">2</span>*dbit &lt; nbit:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            a1 = getRandomNBitInteger(dbit)</span><br><span class="line">            b1 = getRandomNBitInteger(nbit//<span class="number">2</span>-dbit)</span><br><span class="line"></span><br><span class="line">            n1 = a1*b1+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> isPrime(n1):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            a2 = getRandomNBitInteger(dbit)</span><br><span class="line">            b2 = getRandomNBitInteger(nbit//<span class="number">2</span>-dbit)</span><br><span class="line"></span><br><span class="line">            n2=a2*b2+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            n3=a1*b2+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> isPrime(n2) <span class="keyword">and</span> isPrime(n3):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            a3=getRandomNBitInteger(dbit)</span><br><span class="line">            <span class="keyword">if</span> gmpy2.gcd(a3,a1*b1*a2*b2)==<span class="number">1</span>:</span><br><span class="line">                v1=(n1-<span class="number">1</span>)*(n2-<span class="number">1</span>) <span class="comment"># phi1</span></span><br><span class="line">                k=(a3*inverse(a3,v1)-<span class="number">1</span>)//v1  <span class="comment"># k * phi1=k * v1 = ed-1</span></span><br><span class="line">                v2=k*b1+<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> isPrime(v2):</span><br><span class="line">                    <span class="keyword">return</span> a3,n1*n2,n3*v2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg, pubkey</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(msg, pubkey[<span class="number">0</span>], pubkey[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">nbit = <span class="number">1024</span></span><br><span class="line">dbit = <span class="number">256</span></span><br><span class="line">e, n1, n2=keygen(nbit, dbit)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e =&#x27;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n1 =&#x27;</span>, n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n2 =&#x27;</span>, n2)</span><br><span class="line">c1 = encrypt(message, [e, n1])</span><br><span class="line">c2 = encrypt(message, [e, n2])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enc1 =&#x27;</span>, c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enc2 =&#x27;</span>, c2)</span><br><span class="line"><span class="comment"># e = 86905291018330218127760596324522274547253465551209634052618098249596388694529</span></span><br><span class="line"><span class="comment"># n1 = 112187114035595515717020336420063560192608507634951355884730277020103272516595827630685773552014888608894587055283796519554267693654102295681730016199369580577243573496236556117934113361938190726830349853086562389955289707685145472794173966128519654167325961312446648312096211985486925702789773780669802574893</span></span><br><span class="line"><span class="comment"># n2 = 95727255683184071257205119413595957528984743590073248708202176413951084648626277198841459757379712896901385049813671642628441940941434989886894512089336243796745883128585743868974053010151180059532129088434348142499209024860189145032192068409977856355513219728891104598071910465809354419035148873624856313067</span></span><br><span class="line"><span class="comment"># enc1 = 71281698683006229705169274763783817580572445422844810406739630520060179171191882439102256990860101502686218994669784245358102850927955191225903171777969259480990566718683951421349181856119965365618782630111357309280954558872160237158905739584091706635219142133906953305905313538806862536551652537126291478865</span></span><br><span class="line"><span class="comment"># enc2 = 7333744583943012697651917897083326988621572932105018877567461023651527927346658805965099102481100945100738540533077677296823678241143375320240933128613487693799458418017975152399878829426141218077564669468040331339428477336144493624090728897185260894290517440392720900787100373142671471448913212103518035775</span></span><br></pre></td></tr></table></figure><p>连分数的应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inthroot</span>(<span class="params">a, n</span>):</span><br><span class="line">    <span class="keyword">if</span> a &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> a.nth_root(n, truncate_mode=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">n, phi</span>):</span><br><span class="line">    tot = n - phi + <span class="number">1</span></span><br><span class="line">    dif = inthroot(Integer(tot * tot - <span class="number">4</span> * n), <span class="number">2</span>)</span><br><span class="line">    dif = <span class="built_in">int</span>(dif)</span><br><span class="line">    p = (tot + dif) // <span class="number">2</span></span><br><span class="line">    q = (tot - dif) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> p * q == n:</span><br><span class="line">        <span class="keyword">return</span> p, q</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">86905291018330218127760596324522274547253465551209634052618098249596388694529</span></span><br><span class="line">n_1 = <span class="number">112187114035595515717020336420063560192608507634951355884730277020103272516595827630685773552014888608894587055283796519554267693654102295681730016199369580577243573496236556117934113361938190726830349853086562389955289707685145472794173966128519654167325961312446648312096211985486925702789773780669802574893</span></span><br><span class="line">n_2 = <span class="number">95727255683184071257205119413595957528984743590073248708202176413951084648626277198841459757379712896901385049813671642628441940941434989886894512089336243796745883128585743868974053010151180059532129088434348142499209024860189145032192068409977856355513219728891104598071910465809354419035148873624856313067</span></span><br><span class="line">enc_1 = <span class="number">71281698683006229705169274763783817580572445422844810406739630520060179171191882439102256990860101502686218994669784245358102850927955191225903171777969259480990566718683951421349181856119965365618782630111357309280954558872160237158905739584091706635219142133906953305905313538806862536551652537126291478865</span></span><br><span class="line">enc_2 = <span class="number">7333744583943012697651917897083326988621572932105018877567461023651527927346658805965099102481100945100738540533077677296823678241143375320240933128613487693799458418017975152399878829426141218077564669468040331339428477336144493624090728897185260894290517440392720900787100373142671471448913212103518035775</span></span><br><span class="line"></span><br><span class="line">c = continued_fraction(Integer(n_2) / Integer(n_1))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">150</span>, <span class="number">200</span>)):</span><br><span class="line">    k = c.numerator(i)</span><br><span class="line">    x = c.denominator(i)</span><br><span class="line">    <span class="keyword">if</span> GCD(e, k) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    res = inverse(e - k, e)</span><br><span class="line">    cc = crt(res, <span class="number">0</span>, e, x)</span><br><span class="line">    md = e * x // GCD(e, x)</span><br><span class="line"></span><br><span class="line">    st = cc + (n_1 // md) * md - <span class="number">100</span> * md</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        <span class="keyword">if</span> GCD(e, st) != <span class="number">1</span>:</span><br><span class="line">            st += md</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        d_1 = inverse(e, st)</span><br><span class="line">        flag = long_to_bytes(<span class="built_in">pow</span>(enc_1, d_1, n_1))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        st += md</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN CRYPTO-1</title>
      <link href="/posts/9e21d1b5.html"/>
      <url>/posts/9e21d1b5.html</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN-CRYPTO-1"><a href="#CISCN-CRYPTO-1" class="headerlink" title="CISCN CRYPTO-1"></a>CISCN CRYPTO-1</h1><h2 id="CISCN-2021初赛-rsa"><a href="#CISCN-2021初赛-rsa" class="headerlink" title="[CISCN 2021初赛]rsa"></a>[CISCN 2021初赛]rsa</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> text,flag</span><br><span class="line"><span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long,getPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> md5.new(text).hexdigest() == flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">msg1 = text[:xx]</span><br><span class="line">msg2 = text[xx:yy]</span><br><span class="line">msg3 = text[yy:]</span><br><span class="line"></span><br><span class="line">msg1 = bytes_to_long(msg1)</span><br><span class="line">msg2 = bytes_to_long(msg2)</span><br><span class="line">msg3 = bytes_to_long(msg3)</span><br><span class="line"></span><br><span class="line">p1 = getPrime(<span class="number">512</span>)</span><br><span class="line">q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">N1 = p1*q1</span><br><span class="line">e1 = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(msg1,e1,N1)</span><br><span class="line"><span class="built_in">print</span> (e1,N1)</span><br><span class="line"></span><br><span class="line">p2 = getPrime(<span class="number">512</span>)</span><br><span class="line">q2 = getPrime(<span class="number">512</span>)</span><br><span class="line">N2 = p2*q2</span><br><span class="line">e2 = <span class="number">17</span></span><br><span class="line">e3 = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(msg2,e2,N2)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(msg2,e3,N2)</span><br><span class="line"><span class="built_in">print</span> (e2,N2)</span><br><span class="line"><span class="built_in">print</span> (e3,N2)</span><br><span class="line"></span><br><span class="line">p3 = getPrime(<span class="number">512</span>)</span><br><span class="line">q3 = getPrime(<span class="number">512</span>)</span><br><span class="line">N3 = p3*q3</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(msg3,e3,N3)</span><br><span class="line"><span class="built_in">print</span> (e3,N3)</span><br><span class="line"><span class="built_in">print</span> p3&gt;&gt;<span class="number">200</span></span><br></pre></td></tr></table></figure><p>text被分为三段msg，要分别采用不同的攻击方式</p><p>首先，e1&#x3D;&#x3D;3，可知求msg1要用小指数攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c1 = <span class="number">19105765285510667553313898813498220212421177527647187802549913914263968945493144633390670605116251064550364704789358830072133349108808799075021540479815182657667763617178044110939458834654922540704196330451979349353031578518479199454480458137984734402248011464467312753683234543319955893</span></span><br><span class="line">e1 = <span class="number">3</span></span><br><span class="line">n1 = <span class="number">123814470394550598363280518848914546938137731026777975885846733672494493975703069760053867471836249473290828799962586855892685902902050630018312939010564945676699712246249820341712155938398068732866646422826619477180434858148938235662092482058999079105450136181685141895955574548671667320167741641072330259009</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    m = gmpy2.iroot(c1+k*n1,e1)</span><br><span class="line">    <span class="keyword">if</span>(m[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(m[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k=k+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>msg2用e2和e3加密生成两个密文，采用共模攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c22 = <span class="number">54995751387258798791895413216172284653407054079765769704170763023830130981480272943338445245689293729308200574217959018462512790523622252479258419498858307898118907076773470253533344877959508766285730509067829684427375759345623701605997067135659404296663877453758701010726561824951602615501078818914410959610</span></span><br><span class="line">c23 = <span class="number">91290935267458356541959327381220067466104890455391103989639822855753797805354139741959957951983943146108552762756444475545250343766798220348240377590112854890482375744876016191773471853704014735936608436210153669829454288199838827646402742554134017280213707222338496271289894681312606239512924842845268366950</span></span><br><span class="line">e2 = <span class="number">17</span></span><br><span class="line">e3 = <span class="number">65537</span></span><br><span class="line">n2 = <span class="number">111381961169589927896512557754289420474877632607334685306667977794938824018345795836303161492076539375959731633270626091498843936401996648820451019811592594528673182109109991384472979198906744569181673282663323892346854520052840694924830064546269187849702880332522636682366270177489467478933966884097824069977</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(gmpy2.gcdext(e2,e3))</span></span><br><span class="line"><span class="comment">#(mpz(1), mpz(30841), mpz(-8))</span></span><br><span class="line">s = <span class="number">30841</span></span><br><span class="line">t = -<span class="number">8</span></span><br><span class="line">m1 = <span class="built_in">pow</span>(c22,s,n2)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c23,t,n2)</span><br><span class="line">m = m1*m2%n2</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>msg3给出了移位之后的p值，因此是p高位泄露</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e3 = <span class="number">65537</span></span><br><span class="line">c3 = <span class="number">59213696442373765895948702611659756779813897653022080905635545636905434038306468935283962686059037461940227618715695875589055593696352594630107082714757036815875497138523738695066811985036315624927897081153190329636864005133757096991035607918106529151451834369442313673849563635248465014289409374291381429646</span></span><br><span class="line">n3 = <span class="number">113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147</span></span><br><span class="line">p3_high = <span class="number">7117286695925472918001071846973900342640107770214858928188419765628151478620236042882657992902</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用sage求p</span></span><br><span class="line"><span class="comment">#P = 7117286695925472918001071846973900342640107770214858928188419765628151478620236042882657992902</span></span><br><span class="line"><span class="comment">#n = 113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147</span></span><br><span class="line"><span class="comment">#kbits = 200 #丢失的位数</span></span><br><span class="line"><span class="comment">#p_fake = P &lt;&lt; kbits #高位准确低位不准确的p值</span></span><br><span class="line"><span class="comment">#pbits = p_fake.nbits() #p原本的二进制位数</span></span><br><span class="line"><span class="comment">#PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="comment">#f = x + p_fake</span></span><br><span class="line"><span class="comment">#p0 = f.small_roots(X = 2^kbits, beta = 0.4)[0] </span></span><br><span class="line"><span class="comment">#p = p0 + p_fake</span></span><br><span class="line"><span class="comment">#print(p)</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">11437038763581010263116493983733546014403343859218003707512796706928880848035239990740428334091106443982769386517753703890002478698418549777553268906496423</span></span><br><span class="line">q = n3//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e3,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c3,d,n3)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>最后组合三条msg，进行转换，得到flag内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m1 = <span class="number">267334379257781603687613466720913534310764480084016847281446486946801530200295563483353634338157</span></span><br><span class="line">m2 = <span class="number">4193305853284549103821195807609492624095031428085219879448342104337322945001387680236011960472296815293233144303730273979905837762067652913308898433728800864776794638198055607422503065410595894676740531680367227696622352026247676452540064020322619036125381146346603655445487695574824919137</span></span><br><span class="line">m3 = <span class="number">978430871477569051989776547659020359721056838635797362474311886436116962354292851181720060000979143571198378856012391742078510586927376783797757539078239088349758644144812898155106623543650953940606543822567423130350207207895380499638001151443841997176299548692737056724423631882</span></span><br><span class="line">m = long_to_bytes(m1)+long_to_bytes(m2)+long_to_bytes(m3)</span><br><span class="line"><span class="built_in">print</span>(md5(m).hexdigest())</span><br><span class="line"><span class="comment">#3943e8843a19149497956901e5d98639</span></span><br></pre></td></tr></table></figure><h2 id="CISCN-2022-西南-rsa"><a href="#CISCN-2022-西南-rsa" class="headerlink" title="[CISCN 2022 西南]rsa"></a>[CISCN 2022 西南]rsa</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;XXXXXXXX&#x27;</span></span><br><span class="line">p1 = getPrime(<span class="number">700</span>)</span><br><span class="line">r1 = getPrime(<span class="number">700</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    q1 = <span class="number">5</span>*p1+i</span><br><span class="line">n = p1*q1*r1</span><br><span class="line">p3 = <span class="built_in">pow</span>(p1,<span class="number">3</span>,n)</span><br><span class="line">q3 = <span class="built_in">pow</span>(q1,<span class="number">3</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p3)</span><br><span class="line"><span class="built_in">print</span>(q3)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p3 = 29914513810588158800677413177910972738704129106546850855032986405861482276089830788972187432277517348644647399654780884571794069905291936470934226328931651386658328163535027343107140438177837479649822914209171476632450951930287641742344330471734177295804718555774395704231261550376220154493373703096062950390869299905383682611063374747752091585836452902373843865043412096365874638466683035848817858586173172058756256354758712684819253211761289032789542371351760915771791997388241121078055468403109260493642435791152671979552597191217179672328555740595434990908530985477314228867209314472001848844089467987561661918366232980944933533</span></span><br><span class="line"><span class="string">q3 = 66208618374366130551979192465001581263127328176551695213970812805980115496523825511250542987452691413485117902772315362811067501379171731387904074565035353566976164797769439898266222919741874340315356585585077141595328441423323822407738375537476582506440045835592730211502035261968878999959340204806442390319739977816872969200022096331677277225467021553564212725120939434924481787524609852608476848761521446441776154400518315701988027274150425936061679275540502720782853648148897480117033152064922234451671636288396704170234613549011854618414776342798740690128675106027908639984431432591397555541420243824539205614036979987830125678</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">P = getPrime(<span class="number">1024</span>)</span><br><span class="line">Q = getPrime(<span class="number">1024</span>)</span><br><span class="line">N = P * Q</span><br><span class="line">E = <span class="number">65537</span></span><br><span class="line">lcm = gmpy2.lcm(P-<span class="number">1</span>, Q-<span class="number">1</span>)</span><br><span class="line">e1 = gmpy2.invert(p1, lcm)</span><br><span class="line">e2 = gmpy2.invert(r1, lcm)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, E, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lcm)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">lcm = 4292158730589770192682795435047249488185453170529228019750042608688907718268448193363838203887391025871515871000364259326343790645215256385842265899206372365402431198699714374850409466996627163968391249416054093529090485677808301343590811445080871279796162536469847469761747058736980603093722710824453312207182881241846080117790728778291633761198069016865260030288832065807438020772711645648333908622890343009942617559434851450007195025869850769670769715654662127278293639938359741401336592219730356884542179574372134014927006215640945952229142436595334916765255426954857520777553915330597952622785359222832224632624</span></span><br><span class="line"><span class="string">c = 4288727484183191191687364666620023549392656794153112764357730676861570386983002380982803054964588111708662498647767438881892355599604826306427809017097724346976778230464708540600157055782723189971534549543664668430013171469625043063261219462210251726207552819381767396148632877168530609902046293626355744288863460554297860696918890189350721960355460410677203131993419723440382095665713164422367291153108363066159712951217816814873413423853338021627653555202253351957999686659021298525147460016557904084617528199284448056532965033560516083489693334373695545423561715471204868795248569806148395196572046378679014697206</span></span><br><span class="line"><span class="string">N  = 17168634922359080770731181740188997952741812682116912079000170434755630873073792773455352815549564103486063484001457037305375162580861025543369063596825489461609724794798857499401637867986508655873564997664216374116361942711233205374363245780323485119184650145879389879046988234947922412374890843297813248828996855478005656041814919367820336728271583686844991928889831691815821365423570311291064846736832327637944358854661523107817781673029406341843040857813841671405147146887291204140157388049394514390098066284975682117038362207142272098796924412602725857521665773622056312191400612944442008222587867782281556388669</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>首先p3是小指数加密得出的，iroot开三次方可以得到整数p1，for循环推出q1</p><p>因为p3&#x3D;&#x3D;pow(p1,3,n)，q3&#x3D;&#x3D;pow(q1,3,n)，所以pow(q1,3)-p3|n</p><p>又因为n&#x3D;&#x3D;p1·q1·r1，那么(pow(q1,3)-p3)&#x2F;&#x2F;p1&#x2F;&#x2F;q1&#x3D;&#x3D;k·r1</p><p>分解该数可以得到素数r1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p3 = <span class="number">29914513810588158800677413177910972738704129106546850855032986405861482276089830788972187432277517348644647399654780884571794069905291936470934226328931651386658328163535027343107140438177837479649822914209171476632450951930287641742344330471734177295804718555774395704231261550376220154493373703096062950390869299905383682611063374747752091585836452902373843865043412096365874638466683035848817858586173172058756256354758712684819253211761289032789542371351760915771791997388241121078055468403109260493642435791152671979552597191217179672328555740595434990908530985477314228867209314472001848844089467987561661918366232980944933533</span></span><br><span class="line">q3 = <span class="number">66208618374366130551979192465001581263127328176551695213970812805980115496523825511250542987452691413485117902772315362811067501379171731387904074565035353566976164797769439898266222919741874340315356585585077141595328441423323822407738375537476582506440045835592730211502035261968878999959340204806442390319739977816872969200022096331677277225467021553564212725120939434924481787524609852608476848761521446441776154400518315701988027274150425936061679275540502720782853648148897480117033152064922234451671636288396704170234613549011854618414776342798740690128675106027908639984431432591397555541420243824539205614036979987830125678</span></span><br><span class="line">p1 = <span class="number">3104278304063196628127274167035709732497973183149478174565689311226901027646392317544980271959467036404899516250338673400239351865520610439536310124218012685947217160554009152330023213681886617971326981463871077</span></span><br><span class="line">q1 = <span class="number">15521391520315983140636370835178548662489865915747390872828446556134505138231961587724901359797335182024497581251693367001196759327603052197681550621090063429736085802770045761650116068409433089856634907319355394</span></span><br><span class="line">kr1 = (<span class="built_in">pow</span>(q1,<span class="number">3</span>)-q3)//p1//q1</span><br><span class="line"><span class="comment">#print(kr1) 分解出k和r1</span></span><br><span class="line">r1 = <span class="number">4012254850248640149728766179729622181568889047306796355737648189126852678381304580418646601354334052377010272505434824159877622618692115359742428958423328302444038826295560279988456347430842777189171077679430323</span></span><br></pre></td></tr></table></figure><p>求解出E模lcm的逆元d，E模phi的逆元D，一定是E模lcm的逆元d的整数倍</p><p>最终检验得出D&#x3D;&#x3D;d</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lcm = <span class="number">4292158730589770192682795435047249488185453170529228019750042608688907718268448193363838203887391025871515871000364259326343790645215256385842265899206372365402431198699714374850409466996627163968391249416054093529090485677808301343590811445080871279796162536469847469761747058736980603093722710824453312207182881241846080117790728778291633761198069016865260030288832065807438020772711645648333908622890343009942617559434851450007195025869850769670769715654662127278293639938359741401336592219730356884542179574372134014927006215640945952229142436595334916765255426954857520777553915330597952622785359222832224632624</span></span><br><span class="line">c = <span class="number">4288727484183191191687364666620023549392656794153112764357730676861570386983002380982803054964588111708662498647767438881892355599604826306427809017097724346976778230464708540600157055782723189971534549543664668430013171469625043063261219462210251726207552819381767396148632877168530609902046293626355744288863460554297860696918890189350721960355460410677203131993419723440382095665713164422367291153108363066159712951217816814873413423853338021627653555202253351957999686659021298525147460016557904084617528199284448056532965033560516083489693334373695545423561715471204868795248569806148395196572046378679014697206</span></span><br><span class="line">N = <span class="number">17168634922359080770731181740188997952741812682116912079000170434755630873073792773455352815549564103486063484001457037305375162580861025543369063596825489461609724794798857499401637867986508655873564997664216374116361942711233205374363245780323485119184650145879389879046988234947922412374890843297813248828996855478005656041814919367820336728271583686844991928889831691815821365423570311291064846736832327637944358854661523107817781673029406341843040857813841671405147146887291204140157388049394514390098066284975682117038362207142272098796924412602725857521665773622056312191400612944442008222587867782281556388669</span></span><br><span class="line">e1 = gmpy2.invert(p1, lcm)</span><br><span class="line">e2 = gmpy2.invert(r1, lcm)</span><br><span class="line">E = <span class="number">65537</span></span><br><span class="line">d = gmpy2.invert(E,lcm)</span><br><span class="line"><span class="comment">#E模phi的逆元D，一定是E模lcm的逆元d的整数倍</span></span><br><span class="line"><span class="comment">#最终检验得出D==d</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,N)))</span><br></pre></td></tr></table></figure><p>也可以用维纳攻击求m的解法：_[ciscn 2022 西南]rsa_Bnessy的博客-CSDN博客](<a href="https://blog.csdn.net/weixin_44895005/article/details/125692522?ops_request_misc=&request_id=&biz_id=102&utm_term=%5BCISCN">https://blog.csdn.net/weixin_44895005/article/details/125692522?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=[CISCN</a> 2022 西南]&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-0-125692522.142^v88^control_2,239^v2^insert_chatgpt&amp;spm&#x3D;1018.2226.3001.4187)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF 2023-CRYPTO-2</title>
      <link href="/posts/8d2b1d6a.html"/>
      <url>/posts/8d2b1d6a.html</url>
      
        <content type="html"><![CDATA[<h1 id="LitCTF-2023-CRYPTO-2"><a href="#LitCTF-2023-CRYPTO-2" class="headerlink" title="LitCTF 2023-CRYPTO-2"></a>LitCTF 2023-CRYPTO-2</h1><h2 id="P-Leak"><a href="#P-Leak" class="headerlink" title="P_Leak"></a>P_Leak</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">m=bytes_to_long(<span class="string">b&#x27;xxxx&#x27;</span>)</span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=inverse(e,phi)</span><br><span class="line">dp=d%(p-<span class="number">1</span>)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dp=&quot;</span>,dp)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="comment">#dp= 5892502924236878675675338970704766304539618343869489297045857272605067962848952532606770917225218534430490745895652561015493032055636004130931491316020329</span></span><br><span class="line"><span class="comment">#n= 50612159190225619689404794427464916374543237300894011803225784470008992781409447214236779975896311093686413491163221778479739252804271270231391599602217675895446538524670610623369953168412236472302812808639218392319634397138871387898452935081756580084070333246950840091192420542761507705395568904875746222477</span></span><br><span class="line"><span class="comment">#c= 39257649468514605476432946851710016346016992413796229928386230062780829495844059368939749930876895443279723032641876662714088329296631207594999580050131450251288839714711436117326769029649419789323982613380617840218087161435260837263996287628129307328857086987521821533565738409794866606381789730458247531619</span></span><br></pre></td></tr></table></figure><p>基本的dp泄露问题，题目已知dp、n、c、e，要求p，</p><p>dp·e&#x3D;&#x3D;X·(p-1)+1 只要遍历X，找出满足是整数且能够整除n的条件的p，然后按老路子做即可</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">dp = <span class="number">5892502924236878675675338970704766304539618343869489297045857272605067962848952532606770917225218534430490745895652561015493032055636004130931491316020329</span></span><br><span class="line">n = <span class="number">50612159190225619689404794427464916374543237300894011803225784470008992781409447214236779975896311093686413491163221778479739252804271270231391599602217675895446538524670610623369953168412236472302812808639218392319634397138871387898452935081756580084070333246950840091192420542761507705395568904875746222477</span></span><br><span class="line">c = <span class="number">39257649468514605476432946851710016346016992413796229928386230062780829495844059368939749930876895443279723032641876662714088329296631207594999580050131450251288839714711436117326769029649419789323982613380617840218087161435260837263996287628129307328857086987521821533565738409794866606381789730458247531619</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">    p=(dp*e-<span class="number">1</span>)//i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n%p == <span class="number">0</span>:</span><br><span class="line">        q = n//p</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="e的学问"><a href="#e的学问" class="headerlink" title="e的学问"></a>e的学问</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">m=bytes_to_long(<span class="string">b&#x27;xxxxxx&#x27;</span>)</span><br><span class="line">p=getPrime(<span class="number">256</span>)</span><br><span class="line">q=getPrime(<span class="number">256</span>)</span><br><span class="line">e=<span class="number">74</span></span><br><span class="line">n=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>,q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="comment">#p= 86053582917386343422567174764040471033234388106968488834872953625339458483149</span></span><br><span class="line"><span class="comment">#q= 72031998384560188060716696553519973198388628004850270102102972862328770104493</span></span><br><span class="line"><span class="comment">#c= 3939634105073614197573473825268995321781553470182462454724181094897309933627076266632153551522332244941496491385911139566998817961371516587764621395810123</span></span><br></pre></td></tr></table></figure><p>该题考查的是e和phi不互素的情况，步骤是：先求gcd(e,phi)，e&#x2F;&#x2F;gcd一定与phi互素，这样可以求出来m^gcd，再对其开gcd次根就能得到真正的m</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e=<span class="number">74</span></span><br><span class="line">p= <span class="number">86053582917386343422567174764040471033234388106968488834872953625339458483149</span></span><br><span class="line">q= <span class="number">72031998384560188060716696553519973198388628004850270102102972862328770104493</span></span><br><span class="line">c= <span class="number">3939634105073614197573473825268995321781553470182462454724181094897309933627076266632153551522332244941496491385911139566998817961371516587764621395810123</span></span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">gcd1=gmpy2.gcd(e,phi)</span><br><span class="line">e1=e//gcd1</span><br><span class="line">d1=gmpy2.invert(e1,phi)</span><br><span class="line">m1=<span class="built_in">pow</span>(c,d1,n)</span><br><span class="line">m=gmpy2.iroot(m1,gcd1)[<span class="number">0</span>]</span><br><span class="line">flag=long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="easy-math"><a href="#easy-math" class="headerlink" title="easy_math"></a>easy_math</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p*q</span><br><span class="line">hint = p**<span class="number">3</span>-q**<span class="number">5</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint = <span class="subst">&#123;hint&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 2230791374046346835775433548641067593691369485828070649075162141394476183565187654365131822111419512477883295758461313983481545182887415447403634720326639070667688614534290859200753589300443797</span></span><br><span class="line"><span class="string">c = 2168563038335029902089976057856861885635845445863841607485310134441400500612435296818745930370268060353437465666224400129105788787423156958336380480503762222278722770240792709450637433509537280</span></span><br><span class="line"><span class="string">hint = 392490868359411675557103683163021977774935163924606169241731307258226973701652855448542714274348304997416149742779376023311152228735117186027560227613656229190807480010615064372521942836446425717660375242197759811804760170129768647414717571386950790115746414735411766002368288743086845078803312201707960465419405926186622999423245762570917629351110970429987377475979058821154568001902541710817731089463915930932142007312230897818177067675996751110894377356758932</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>n&#x3D;p·q   hint&#x3D;p^3-q^5   n和hint已知，两个未知数两个方程，可以解出p和q的数值，之后便是常规步骤</p><p>解方程组要引入sympy这一符号数学库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">2230791374046346835775433548641067593691369485828070649075162141394476183565187654365131822111419512477883295758461313983481545182887415447403634720326639070667688614534290859200753589300443797</span></span><br><span class="line">c = <span class="number">2168563038335029902089976057856861885635845445863841607485310134441400500612435296818745930370268060353437465666224400129105788787423156958336380480503762222278722770240792709450637433509537280</span></span><br><span class="line">hint = <span class="number">392490868359411675557103683163021977774935163924606169241731307258226973701652855448542714274348304997416149742779376023311152228735117186027560227613656229190807480010615064372521942836446425717660375242197759811804760170129768647414717571386950790115746414735411766002368288743086845078803312201707960465419405926186622999423245762570917629351110970429987377475979058821154568001902541710817731089463915930932142007312230897818177067675996751110894377356758932</span></span><br><span class="line">p,q = symbols(<span class="string">&#x27;p,q&#x27;</span>)  <span class="comment">#设变量为p、q</span></span><br><span class="line">eq1 = p ** <span class="number">3</span> - q ** <span class="number">5</span> - hint  <span class="comment">#等式1</span></span><br><span class="line">eq2 = p * q - n  <span class="comment">#等式2</span></span><br><span class="line">sol = solve([eq1,eq2],[p,q])<span class="comment">#解出p和q的值 可以用print(sol)来查看</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">7321664971326604351487965655099805117568571010588695608389113791312918573783115429227542573780838065461696504325762281209452761930184231131129306271846427</span></span><br><span class="line">q = <span class="number">304683618109085947723284393392507415311</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="The-same-common-divisor"><a href="#The-same-common-divisor" class="headerlink" title="The same common divisor"></a>The same common divisor</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">m=bytes_to_long(<span class="string">b&#x27;xxxxxx&#x27;</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q1=getPrime(<span class="number">1024</span>)</span><br><span class="line">q2=getPrime(<span class="number">1024</span>)</span><br><span class="line">n1=p*q1</span><br><span class="line">n2=p*q2</span><br><span class="line">c1=<span class="built_in">pow</span>(m,e,n1)</span><br><span class="line">c2=<span class="built_in">pow</span>(m,e,n2)</span><br><span class="line">n3=n1^n2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n1=&#x27;</span>,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n3=&#x27;</span>,n3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c1=&#x27;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c2=&#x27;</span>,c2)</span><br><span class="line"><span class="comment">#n1= 9852079772293301283705208653824307027320071498525390578148444258198605733768947108049676831872672654449631852459503049139275329796717506126689710613873813880735666507857022786447784753088176997374711523987152412069255685005264853118880922539048290400078105858759506186417678959028622484823376958194324034590514104266608644398160457382895380141070373685334979803658172378382884352616985632157233900719194944197689860219335238499593658894630966428723660931647038577670614850305719449893199713589368780231046895222526070730152875112477675102652862254926169713030701937231206405968412044029177246460558028793385980934233</span></span><br><span class="line"><span class="comment">#n3= 4940268030889181135441311597961813780480775970170156650560367030148383674257975796516865571557828263935532335958510269356443566533284856608454193676600884849913964971291145182724888816164723930966472329604608512023988191536173112847915884014445539739070437180314205284883149421228744714989392788108329929896637182055266508625177260492776962915873036873839946591259443753924970795669864031580632650140641456386202636466624658715315856453572441182758855085077441336516178544978457053552156714181607801760605521338788424464551796638531143900048375037218585999440622490119344971822707261432953755569507740550277088437182</span></span><br><span class="line"><span class="comment">#c1= 7066425618980522033304943700150361912772559890076173881522840300333719222157667104461410726444725540513601550570478331917063911791020088865705346188662290524599499769112250751103647749860198318955619903728724860941709527724500004142950768744200491448875522031555564384426372047270359602780292587644737898593450148108629904854675417943165292922990980758572264063039172969633878015560735737699147707712154627358077477591293746136250207139049702201052305840453700782016480965369600667516646007546442708862429431724013679189842300429421340122052682391471347471758814138218632022564279296594279507382548264409296929401260</span></span><br><span class="line"><span class="comment">#c2= 854668035897095127498890630660344701894030345838998465420605524714323454298819946231147930930739944351187708040037822108105697983018529921300277486094149269105712677374751164879455815185393395371001495146490416978221501351569800028842842393448555836910486037183218754013655794027528039329299851644787006463456162952383099752894635657833907958930587328480492546831654755627949756658554724024525108575961076341962292900510328611128404001877137799465932130220386963518903892403159969133882215092783063943679288192557384595152566356483424061922742307738886179947575613661171671781544283180451958232826666741028590085269</span></span><br></pre></td></tr></table></figure><p>n1^n3&#x3D;&#x3D;n2那么n2&#x3D;&#x3D;n1^n3，于是p&#x3D;&#x3D;gcd(n1,n2)，随后可知q1,q2，按常规做即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n1= <span class="number">9852079772293301283705208653824307027320071498525390578148444258198605733768947108049676831872672654449631852459503049139275329796717506126689710613873813880735666507857022786447784753088176997374711523987152412069255685005264853118880922539048290400078105858759506186417678959028622484823376958194324034590514104266608644398160457382895380141070373685334979803658172378382884352616985632157233900719194944197689860219335238499593658894630966428723660931647038577670614850305719449893199713589368780231046895222526070730152875112477675102652862254926169713030701937231206405968412044029177246460558028793385980934233</span></span><br><span class="line">n3= <span class="number">4940268030889181135441311597961813780480775970170156650560367030148383674257975796516865571557828263935532335958510269356443566533284856608454193676600884849913964971291145182724888816164723930966472329604608512023988191536173112847915884014445539739070437180314205284883149421228744714989392788108329929896637182055266508625177260492776962915873036873839946591259443753924970795669864031580632650140641456386202636466624658715315856453572441182758855085077441336516178544978457053552156714181607801760605521338788424464551796638531143900048375037218585999440622490119344971822707261432953755569507740550277088437182</span></span><br><span class="line">c1= <span class="number">7066425618980522033304943700150361912772559890076173881522840300333719222157667104461410726444725540513601550570478331917063911791020088865705346188662290524599499769112250751103647749860198318955619903728724860941709527724500004142950768744200491448875522031555564384426372047270359602780292587644737898593450148108629904854675417943165292922990980758572264063039172969633878015560735737699147707712154627358077477591293746136250207139049702201052305840453700782016480965369600667516646007546442708862429431724013679189842300429421340122052682391471347471758814138218632022564279296594279507382548264409296929401260</span></span><br><span class="line">c2= <span class="number">854668035897095127498890630660344701894030345838998465420605524714323454298819946231147930930739944351187708040037822108105697983018529921300277486094149269105712677374751164879455815185393395371001495146490416978221501351569800028842842393448555836910486037183218754013655794027528039329299851644787006463456162952383099752894635657833907958930587328480492546831654755627949756658554724024525108575961076341962292900510328611128404001877137799465932130220386963518903892403159969133882215092783063943679288192557384595152566356483424061922742307738886179947575613661171671781544283180451958232826666741028590085269</span></span><br><span class="line">n2=n1^n3</span><br><span class="line">p=gmpy2.gcd(n1,n2)</span><br><span class="line">q1=n1//p</span><br><span class="line">q2=n2//p</span><br><span class="line">phi1=(p-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">phi2=(p-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">d1=gmpy2.invert(e,phi1)</span><br><span class="line">d2=gmpy2.invert(e,phi2)</span><br><span class="line">m1=<span class="built_in">pow</span>(c1,d1,n1)</span><br><span class="line">m2=<span class="built_in">pow</span>(c2,d2,n2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line"><span class="comment">#print(long_to_bytes(m2))也可</span></span><br></pre></td></tr></table></figure><h2 id="Euler"><a href="#Euler" class="headerlink" title="Euler"></a>Euler</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="built_in">pow</span>(m,n-p-q+<span class="number">3</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 115140122725890943990475192890188343698762004010330526468754961357872096040956340092062274481843042907652320664917728267982409212988849109825729150839069369465433531269728824368749655421846730162477193420534803525810831025762500375845466064264837531992986534097821734242082950392892529951104643690838773406549</span></span><br><span class="line"><span class="string">c = 406480424882876909664869928877322864482740577681292497936198951316587691545267772748204383995815523935005725558478033908575228532559165174398668885819826720515607326399097899572022020453298441</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>根据欧拉定理，m^φ(n)&#x3D;&#x3D;1(mod n)，即m^(pq-p-q+1)&#x3D;&#x3D;1(mod n)</p><p>那么c&#x3D;&#x3D;pow(m,pq-p-q+3,n)&#x3D;&#x3D;pow(m,2,n)</p><p>对c开平方根就能得到m</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">115140122725890943990475192890188343698762004010330526468754961357872096040956340092062274481843042907652320664917728267982409212988849109825729150839069369465433531269728824368749655421846730162477193420534803525810831025762500375845466064264837531992986534097821734242082950392892529951104643690838773406549</span></span><br><span class="line">c = <span class="number">406480424882876909664869928877322864482740577681292497936198951316587691545267772748204383995815523935005725558478033908575228532559165174398668885819826720515607326399097899572022020453298441</span></span><br><span class="line">m=gmpy2.iroot(c,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="隐晦的聊天记录"><a href="#隐晦的聊天记录" class="headerlink" title="隐晦的聊天记录"></a>隐晦的聊天记录</h2><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">出题人:6c73d5240a948c86981bc294814d</span><br><span class="line">某不知名收件人：收到消息attack at dawn</span><br><span class="line">出题人:xxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">某不知名收件人：收到消息Monday or Thur</span><br><span class="line">已知出题人和收件人手中的密钥相同，请解出出题人第二次发送的密文呢（16进制，字母小写，解得的结果记得要加上LitCTF&#123;&#125;哦。）</span><br></pre></td></tr></table></figure><p>提示是OPT加密，两人密钥相同，第一次的密文和明文异或得到密钥，再和另一明文异或即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0x6c73d5240a948c86981bc294814d</span></span><br><span class="line">b = <span class="string">&#x27;attack at dawn&#x27;</span></span><br><span class="line">c=<span class="string">&#x27;Monday or Thur&#x27;</span></span><br><span class="line"><span class="comment">#下面将b转换成十六进制</span></span><br><span class="line"><span class="comment">#hex_b = &#x27;&#x27;</span></span><br><span class="line"><span class="comment">#for i in b:</span></span><br><span class="line"><span class="comment">#    hex_chr = hex(ord(i))[2:]#去掉前面的0x标识</span></span><br><span class="line"><span class="comment">#    hex_b += hex_chr</span></span><br><span class="line"><span class="comment">#print(hex_b)</span></span><br><span class="line">hex_b = <span class="number">0x61747461636b206174206461776e</span></span><br><span class="line"><span class="comment">#下面将c转换成十六进制</span></span><br><span class="line"><span class="comment">#hex_c = &#x27;&#x27;</span></span><br><span class="line"><span class="comment">#for i in c:</span></span><br><span class="line"><span class="comment">#    hex_chr = hex(ord(i))[2:]</span></span><br><span class="line"><span class="comment">#    hex_c += hex_chr</span></span><br><span class="line"><span class="comment">#print(hex_c)</span></span><br><span class="line">hex_c = <span class="number">0x4d6f6e646179206f722054687572</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(a^hex_b^hex_c)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h2 id="Where-is-P"><a href="#Where-is-P" class="headerlink" title="Where is P?"></a>Where is P?</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">m=bytes_to_long(<span class="string">b&#x27;XXXX&#x27;</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">P=p&gt;&gt;<span class="number">340</span></span><br><span class="line"><span class="built_in">print</span>(P)</span><br><span class="line">a=<span class="built_in">pow</span>(P,<span class="number">3</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a=&quot;</span>,a)</span><br><span class="line"><span class="comment">#n= 24479907029118467064460793139240403258697681144532146836881997837526487637306591893357774423547391867013441147680031968367449693796015901951120514250935018725570026327610524687128709707340727799633444550317834481416507364804274266363478822257132586592232042108076935945436358397787891169163821061005102693505011197453089873909085170776511350713452580692963748763166981047023704528272230392479728897831538235554137129584665886878574314566549330671483636900134584707867654841021494106881794644469229030140144595938886437242375435914268001721437309283611088568191856208951867342004280893021653793820874747638264412653721</span></span><br><span class="line"><span class="comment">#c= 6566517934961780069851397787369134601399136324586682773286046135297104713708615112015588908759927424841719937322574766875308296258325687730658550956691921018605724308665345526807393669538103819281108643141723589363068859617542807984954436567078438099854340705208503317269397632214274507740533638883597409138972287275965697689862321166613821995226000320597560745749780942467497435742492468670016480112957715214640939272457886646483560443432985954141177463448896521810457886108311082101521263110578485768091003174683555938678346359150123350656418123918738868598042533211541966786594006129134087145798672161268647536724</span></span><br><span class="line"><span class="comment">#a= 22184346235325197613876257964606959796734210361241668065837491428527234174610482874427139453643569493268653377061231169173874401139203757698022691973395609028489121048788465356158531144787135876251872262389742175830840373281181905217510352227396545981674450409488394636498629147806808635157820030290630290808150235068140864601098322473572121965126109735529553247807211711005936042322910065304489093415276688746634951081501428768318098925390576594162098506572668709475140964400043947851427774550253257759990959997691631511262768785787474750441024242552456956598974533625095249106992723798354594261566983135394923063605</span></span><br></pre></td></tr></table></figure><p>开始可以爆破求得P，但是P&#x3D;&#x3D;p&gt;&gt;340，如果直接让p&#x3D;P&lt;&lt;340，并不正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n= <span class="number">24479907029118467064460793139240403258697681144532146836881997837526487637306591893357774423547391867013441147680031968367449693796015901951120514250935018725570026327610524687128709707340727799633444550317834481416507364804274266363478822257132586592232042108076935945436358397787891169163821061005102693505011197453089873909085170776511350713452580692963748763166981047023704528272230392479728897831538235554137129584665886878574314566549330671483636900134584707867654841021494106881794644469229030140144595938886437242375435914268001721437309283611088568191856208951867342004280893021653793820874747638264412653721</span></span><br><span class="line">a= <span class="number">22184346235325197613876257964606959796734210361241668065837491428527234174610482874427139453643569493268653377061231169173874401139203757698022691973395609028489121048788465356158531144787135876251872262389742175830840373281181905217510352227396545981674450409488394636498629147806808635157820030290630290808150235068140864601098322473572121965126109735529553247807211711005936042322910065304489093415276688746634951081501428768318098925390576594162098506572668709475140964400043947851427774550253257759990959997691631511262768785787474750441024242552456956598974533625095249106992723798354594261566983135394923063605</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">    a1=a+i*n</span><br><span class="line">    P,t=gmpy2.iroot(a1,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span>(t):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(P)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#i=11</span></span><br><span class="line"><span class="comment">#P=66302204855869216148926460265779698576660998574555407124043768605865908069722142097621926304390549253688814246272903647124801382742681337653915017783954290069842646020090511605930590064443141710086879668946</span></span><br></pre></td></tr></table></figure><p>这是高位泄露攻击，使用CopperSmith脚本可以解出p</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">P = 66302204855869216148926460265779698576660998574555407124043768605865908069722142097621926304390549253688814246272903647124801382742681337653915017783954290069842646020090511605930590064443141710086879668946</span><br><span class="line">n = 24479907029118467064460793139240403258697681144532146836881997837526487637306591893357774423547391867013441147680031968367449693796015901951120514250935018725570026327610524687128709707340727799633444550317834481416507364804274266363478822257132586592232042108076935945436358397787891169163821061005102693505011197453089873909085170776511350713452580692963748763166981047023704528272230392479728897831538235554137129584665886878574314566549330671483636900134584707867654841021494106881794644469229030140144595938886437242375435914268001721437309283611088568191856208951867342004280893021653793820874747638264412653721</span><br><span class="line"></span><br><span class="line">kbits = 340 #丢失的位数</span><br><span class="line">p_fake = P &lt;&lt; kbits #高位准确低位不准确的p值</span><br><span class="line">pbits = p_fake.nbits() #p原本的二进制位数</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p_fake</span><br><span class="line">p0 = f.small_roots(X = 2^kbits, beta = 0.4)[0] </span><br><span class="line">p = p0 + p_fake</span><br><span class="line">print(p)</span><br><span class="line"></span><br><span class="line">#p = 148500014720728755901835170447203030242113125689825190413979909224639701026120883281188694701625473553602289432755479244507504340127322979884849883842306663453018960250560834067472479033116264539127330613635903666209920113813160301513820286874124210921593865507657148933555053341577090100101684021531775022459</span><br></pre></td></tr></table></figure><p>得到p之后求出q，按常规做即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n= <span class="number">24479907029118467064460793139240403258697681144532146836881997837526487637306591893357774423547391867013441147680031968367449693796015901951120514250935018725570026327610524687128709707340727799633444550317834481416507364804274266363478822257132586592232042108076935945436358397787891169163821061005102693505011197453089873909085170776511350713452580692963748763166981047023704528272230392479728897831538235554137129584665886878574314566549330671483636900134584707867654841021494106881794644469229030140144595938886437242375435914268001721437309283611088568191856208951867342004280893021653793820874747638264412653721</span></span><br><span class="line">c= <span class="number">6566517934961780069851397787369134601399136324586682773286046135297104713708615112015588908759927424841719937322574766875308296258325687730658550956691921018605724308665345526807393669538103819281108643141723589363068859617542807984954436567078438099854340705208503317269397632214274507740533638883597409138972287275965697689862321166613821995226000320597560745749780942467497435742492468670016480112957715214640939272457886646483560443432985954141177463448896521810457886108311082101521263110578485768091003174683555938678346359150123350656418123918738868598042533211541966786594006129134087145798672161268647536724</span></span><br><span class="line">p=<span class="number">148500014720728755901835170447203030242113125689825190413979909224639701026120883281188694701625473553602289432755479244507504340127322979884849883842306663453018960250560834067472479033116264539127330613635903666209920113813160301513820286874124210921593865507657148933555053341577090100101684021531775022459</span></span><br><span class="line"></span><br><span class="line">q= n//p</span><br><span class="line">phi= (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d= gmpy2.invert(e,phi)</span><br><span class="line">m= <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="我测你vva"><a href="#我测你vva" class="headerlink" title="我测你vva"></a>我测你vva</h2><p>题目：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Encrypto</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String flag=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> cipher;</span><br><span class="line">        <span class="type">char</span>[] arr;</span><br><span class="line">        arr=flag.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;flag.length(); i++) &#123;</span><br><span class="line">           <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            cipher=Integer.valueOf(arr[i]);</span><br><span class="line">            cipher=cipher+i;</span><br><span class="line">            System.out.print((<span class="type">char</span>)cipher);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">            cipher=Integer.valueOf(arr[i]);</span><br><span class="line">            cipher=cipher-i;</span><br><span class="line">            System.out.print((<span class="type">char</span>)cipher);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cipher=HYEQJvPZ~X@+Bp</span></span><br></pre></td></tr></table></figure><p>写python脚本逆推即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cipher=<span class="string">&#x27;HYEQJvPZ~X@+Bp&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">    <span class="keyword">if</span> j%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)-j)</span><br><span class="line">    <span class="keyword">if</span> j%<span class="number">2</span>!=<span class="number">0</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)+j)</span><br><span class="line">    <span class="keyword">if</span> j==<span class="built_in">len</span>(cipher):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    j+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="babyLCG"><a href="#babyLCG" class="headerlink" title="babyLCG"></a>babyLCG</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">bit_len = m.bit_length()</span><br><span class="line">a = getPrime(bit_len)</span><br><span class="line">b = getPrime(bit_len)</span><br><span class="line">p = getPrime(bit_len+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">seed = m</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    seed = (a*seed+b)%p</span><br><span class="line">    result.append(seed)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">result = [699175025435513913222265085178805479192132631113784770123757454808149151697608216361550466652878, 193316257467202036043918706856603526262215679149886976392930192639917920593706895122296071643390, 1624937780477561769577140419364339298985292198464188802403816662221142156714021229977403603922943, 659236391930254891621938248429619132720452597526316230221895367798170380093631947248925278766506, 111407194162820942281872438978366964960570302720229611594374532025973998885554449685055172110829, 1415787594624585063605356859393351333923892058922987749824214311091742328340293435914830175796909, 655057648553921580727111809001898496375489870757705297406250204329094679858718932270475755075698, 1683427135823894785654993254138434580152093609545092045940376086714124324274044014654085676620851, 492953986125248558013838257810313149490245209968714980288031443714890115686764222999717055064509, 70048773361068060773257074705619791938224397526269544533030294499007242937089146507674570192265]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>该题为线性同余方法（LCG），具体原理见 <a href="https://blog.csdn.net/XiongSiqi_blog/article/details/130790621?spm=1001.2014.3001.5502">记 LCG 例题_Emmaaaaaaaaaa的博客-CSDN博客</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line">s = [<span class="number">699175025435513913222265085178805479192132631113784770123757454808149151697608216361550466652878</span>, <span class="number">193316257467202036043918706856603526262215679149886976392930192639917920593706895122296071643390</span>, <span class="number">1624937780477561769577140419364339298985292198464188802403816662221142156714021229977403603922943</span>, <span class="number">659236391930254891621938248429619132720452597526316230221895367798170380093631947248925278766506</span>, <span class="number">111407194162820942281872438978366964960570302720229611594374532025973998885554449685055172110829</span>, <span class="number">1415787594624585063605356859393351333923892058922987749824214311091742328340293435914830175796909</span>, <span class="number">655057648553921580727111809001898496375489870757705297406250204329094679858718932270475755075698</span>, <span class="number">1683427135823894785654993254138434580152093609545092045940376086714124324274044014654085676620851</span>, <span class="number">492953986125248558013838257810313149490245209968714980288031443714890115686764222999717055064509</span>, <span class="number">70048773361068060773257074705619791938224397526269544533030294499007242937089146507674570192265</span>]</span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    t.append(s[i]-s[i-<span class="number">1</span>])</span><br><span class="line">all_n = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    all_n.append(gcd((t[i+<span class="number">1</span>]*t[i-<span class="number">1</span>]-t[i]*t[i]), (t[i+<span class="number">2</span>]*t[i]-t[i+<span class="number">1</span>]*t[i+<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line">MMI = <span class="keyword">lambda</span> A, n,s=<span class="number">1</span>,t=<span class="number">0</span>,N=<span class="number">0</span>: (n &lt; <span class="number">2</span> <span class="keyword">and</span> t%N <span class="keyword">or</span> MMI(n, A%n, t, s-A//n*t, N <span class="keyword">or</span> n),-<span class="number">1</span>)[n&lt;<span class="number">1</span>] <span class="comment">#逆元计算</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> all_n:</span><br><span class="line">    n=<span class="built_in">abs</span>(n)</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    a=(s[<span class="number">2</span>]-s[<span class="number">1</span>])*MMI((s[<span class="number">1</span>]-s[<span class="number">0</span>]),n)%n</span><br><span class="line">    ani=MMI(a,n)</span><br><span class="line">    b=(s[<span class="number">1</span>]-a*s[<span class="number">0</span>])%n</span><br><span class="line">    seed = (ani*(s[<span class="number">0</span>]-b))%n</span><br><span class="line">    plaintext=seed</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(plaintext))</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="baby-xor"><a href="#baby-xor" class="headerlink" title="baby_xor"></a>baby_xor</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)==<span class="number">32</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c1 = p^m</span><br><span class="line">c2 = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 139167681803392690594490403105432649693546256181767408269202101512534988406137879788255103631885736461742577594980136624933914700779445704490217419248411578290305101891222576080645870988658334799437317221565839991979543660824098367011942169305111105129234902517835649895908656770416774539906212596072334423407</span></span><br><span class="line"><span class="string">c1 = 11201139662236758800406931253538295757259990870588609533820056210585752522925690049252488581929717556881067021381940083808024384402885422258545946243513996</span></span><br><span class="line"><span class="string">c2 = 112016152270171196606652761990170033221036025260883289104273504703557624964071464062375228351458191745141525003775876044271210498526920529385038130932141551598616579917681815276713386113932345056134302042399379895915706991873687943357627747262597883603999621939794450743982662393955266685255577026078256473601</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>要求m就要先求得p</p><p>m、p、q分别是256、512、512位二进制</p><p>又c1&#x3D;&#x3D;p^m，p&#x3D;&#x3D;c1^m，那么c1的高256位和p是相同的，c1已知，则p的高256位已知</p><p>flag前面的格式为LitCTF{，那么m的前7*8&#x3D;&#x3D;56位也已知，p&#x3D;&#x3D;c1^m，这样p又多了56位已知，只有200位未知，这样就大大缩小了求解的范围，sage可以解出p的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p_high = 6970486324755573853659417450568643096739467034952296809356930151463374718468682227634361676471</span><br><span class="line">n = 139167681803392690594490403105432649693546256181767408269202101512534988406137879788255103631885736461742577594980136624933914700779445704490217419248411578290305101891222576080645870988658334799437317221565839991979543660824098367011942169305111105129234902517835649895908656770416774539906212596072334423407</span><br><span class="line">c = 112016152270171196606652761990170033221036025260883289104273504703557624964071464062375228351458191745141525003775876044271210498526920529385038130932141551598616579917681815276713386113932345056134302042399379895915706991873687943357627747262597883603999621939794450743982662393955266685255577026078256473601</span><br><span class="line"></span><br><span class="line">kbits = 512-p_high.nbits() #丢失的位数</span><br><span class="line">p_fake = p_high &lt;&lt; kbits #高位准确低位不准确的p值</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p_fake</span><br><span class="line">p0 = f.small_roots(X = 2^kbits, beta = 0.4)[0] </span><br><span class="line">p = p0 + p_fake</span><br><span class="line">print(p)</span><br><span class="line"></span><br><span class="line">#p = 11201139662236758800406931253538295757259990870588609533820056210585752522925662842097418194280333596411677923137891577493678147771013147838272857867768049</span><br></pre></td></tr></table></figure><p>求出p后按常规RSA求解出m和flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">139167681803392690594490403105432649693546256181767408269202101512534988406137879788255103631885736461742577594980136624933914700779445704490217419248411578290305101891222576080645870988658334799437317221565839991979543660824098367011942169305111105129234902517835649895908656770416774539906212596072334423407</span></span><br><span class="line">c1 = <span class="number">11201139662236758800406931253538295757259990870588609533820056210585752522925690049252488581929717556881067021381940083808024384402885422258545946243513996</span></span><br><span class="line">c2 = <span class="number">112016152270171196606652761990170033221036025260883289104273504703557624964071464062375228351458191745141525003775876044271210498526920529385038130932141551598616579917681815276713386113932345056134302042399379895915706991873687943357627747262597883603999621939794450743982662393955266685255577026078256473601</span></span><br><span class="line">p = <span class="number">11201139662236758800406931253538295757259990870588609533820056210585752522925662842097418194280333596411677923137891577493678147771013147838272857867768049</span></span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c2,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF 2023-CRYPTO-1</title>
      <link href="/posts/af9a3e3d.html"/>
      <url>/posts/af9a3e3d.html</url>
      
        <content type="html"><![CDATA[<h1 id="LitCTF-2023-CRYPTO-1"><a href="#LitCTF-2023-CRYPTO-1" class="headerlink" title="LitCTF 2023-CRYPTO-1"></a>LitCTF 2023-CRYPTO-1</h1><h2 id="梦想是红色的"><a href="#梦想是红色的" class="headerlink" title="梦想是红色的"></a>梦想是红色的</h2><p>核心价值观编码，在线工具解决</p><p><img src="/images/image-1.png"></p><h2 id="Hex？Hex！"><a href="#Hex？Hex！" class="headerlink" title="Hex？Hex！"></a>Hex？Hex！</h2><p>题目：<code>4c69744354467b746169313131636f6f6c6c616161217d</code></p><p>提示是十六进制，Hex解码</p><p><img src="/images/image-2.png"></p><h2 id="你是我的关键词-Keyworld"><a href="#你是我的关键词-Keyworld" class="headerlink" title="你是我的关键词(Keyworld)"></a>你是我的关键词(Keyworld)</h2><p>关键词密码，YOU是关键词，在线解码即可</p><p><img src="/images/image-3.png"></p><h2 id="Is-this-only-base"><a href="#Is-this-only-base" class="headerlink" title="Is this only base?"></a>Is this only base?</h2><p>题目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SWZxWl=F=DQef0hlEiSUIVh9ESCcMFS9NF2NXFzM</span><br><span class="line">今年是本世纪的第23年呢</span><br></pre></td></tr></table></figure><p>有等号，猜测是base，但等号不在末尾，猜测需要解密移位</p><p>想到使用栅栏密码，提示分23栏，该题为w型的栅栏，得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SWZxWlFDe0liUV9ScF9FNFMzX2NSMCEhISEhfQ==</span><br></pre></td></tr></table></figure><p>之后base64，得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IfqZQC&#123;IbQ_Rp_E4S3_cR0!!!!!&#125;</span><br></pre></td></tr></table></figure><p>显然已经是flag的形式，最后凯撒解密得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LitCTF&#123;LeT_Us_H4V3_fU0!!!!!&#125;</span><br></pre></td></tr></table></figure><h2 id="家人们！谁懂啊，RSA签到都不会"><a href="#家人们！谁懂啊，RSA签到都不会" class="headerlink" title="家人们！谁懂啊，RSA签到都不会"></a>家人们！谁懂啊，RSA签到都不会</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 12567387145159119014524309071236701639759988903138784984758783651292440613056150667165602473478042486784826835732833001151645545259394365039352263846276073</span></span><br><span class="line"><span class="string">q = 12716692565364681652614824033831497167911028027478195947187437474380470205859949692107216740030921664273595734808349540612759651241456765149114895216695451</span></span><br><span class="line"><span class="string">c = 108691165922055382844520116328228845767222921196922506468663428855093343772017986225285637996980678749662049989519029385165514816621011058462841314243727826941569954125384522233795629521155389745713798246071907492365062512521474965012924607857440577856404307124237116387085337087671914959900909379028727767057</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最基本的RSA，求出d后解得m，long_to_bytes(m)即可，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">12567387145159119014524309071236701639759988903138784984758783651292440613056150667165602473478042486784826835732833001151645545259394365039352263846276073</span></span><br><span class="line">q = <span class="number">12716692565364681652614824033831497167911028027478195947187437474380470205859949692107216740030921664273595734808349540612759651241456765149114895216695451</span></span><br><span class="line">c = <span class="number">108691165922055382844520116328228845767222921196922506468663428855093343772017986225285637996980678749662049989519029385165514816621011058462841314243727826941569954125384522233795629521155389745713798246071907492365062512521474965012924607857440577856404307124237116387085337087671914959900909379028727767057</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="原来你也玩原神"><a href="#原来你也玩原神" class="headerlink" title="原来你也玩原神"></a>原来你也玩原神</h2><p>搜索原神字母对照表一一比对替换可以得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LITCTF&#123;YUANLAINIYEWANYUANSHENWWW&#125;</span><br></pre></td></tr></table></figure><h2 id="md5的破解"><a href="#md5的破解" class="headerlink" title="md5的破解"></a>md5的破解</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag全是由小写字母及数字组成</span></span><br><span class="line">m=md5(flag).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(flag[:<span class="number">13</span>]+flag[<span class="number">15</span>:<span class="number">18</span>]+flag[<span class="number">19</span>:<span class="number">34</span>]+flag[<span class="number">35</span>:<span class="number">38</span>])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># b&#x27;LitCTF&#123;md5can3derypt213thoughcrsh&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 496603d6953a15846cd7cc476f146771</span></span><br></pre></td></tr></table></figure><p>缺少的4个字符分别是第13、14、18和34位，位数较少且都为小写字母和数字，可以直接爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">ss = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line">m = <span class="string">&#x27;496603d6953a15846cd7cc476f146771&#x27;</span></span><br><span class="line">s1 = <span class="string">&#x27;LitCTF&#123;md5can&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;3de&#x27;</span></span><br><span class="line">s3 = <span class="string">&#x27;rypt213thoughcr&#x27;</span></span><br><span class="line">s4 = <span class="string">&#x27;sh&#125;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ss:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> ss:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> ss:</span><br><span class="line">            <span class="keyword">for</span> o <span class="keyword">in</span> ss:</span><br><span class="line">                flag = s1 + i + o + s2 + j + s3 + k + s4</span><br><span class="line">                <span class="keyword">if</span> md5(flag.encode()).hexdigest() == m:</span><br><span class="line">                    <span class="built_in">print</span>(flag)</span><br><span class="line">                    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="yafu"><a href="#yafu" class="headerlink" title="yafu"></a>yafu</h2><p>利用yafu工具分解大模n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">15241208217768849887180010139590210767831431018204645415681695749294131435566140166245881287131522331092026252879324931622292179726764214435307</span></span><br><span class="line">c = <span class="number">12608550100856399369399391849907846147170257754920996952259023159548789970041433744454761458030776176806265496305629236559551086998780836655717</span></span><br><span class="line"><span class="comment">#yafu将n分解成15个素数p1~p15，求欧拉函数phi=（p1-1)*……(p15-1)</span></span><br><span class="line">n1=<span class="number">2201440207</span>-<span class="number">1</span></span><br><span class="line">n2=<span class="number">4171911923</span>-<span class="number">1</span></span><br><span class="line">n3=<span class="number">3354884521</span>-<span class="number">1</span></span><br><span class="line">n4=<span class="number">2719600579</span>-<span class="number">1</span></span><br><span class="line">n5=<span class="number">2315495107</span>-<span class="number">1</span></span><br><span class="line">n6=<span class="number">4021078331</span>-<span class="number">1</span></span><br><span class="line">n7=<span class="number">2906576131</span>-<span class="number">1</span></span><br><span class="line">n8=<span class="number">2151018733</span>-<span class="number">1</span></span><br><span class="line">n9=<span class="number">2585574697</span>-<span class="number">1</span></span><br><span class="line">n10=<span class="number">3355651511</span>-<span class="number">1</span></span><br><span class="line">n11=<span class="number">2758708999</span>-<span class="number">1</span></span><br><span class="line">n12=<span class="number">2767137487</span>-<span class="number">1</span></span><br><span class="line">n13=<span class="number">3989697563</span>-<span class="number">1</span></span><br><span class="line">n14=<span class="number">4044505687</span>-<span class="number">1</span></span><br><span class="line">n15=<span class="number">2923522073</span>-<span class="number">1</span></span><br><span class="line">phi=n1*n2*n3*n4*n5*n6*n7*n8*n9*n10*n11*n12*n13*n14*n15</span><br><span class="line"></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="factordb"><a href="#factordb" class="headerlink" title="factordb"></a>factordb</h2><p>利用factordb在线网站分解大模n</p><p><img src="/images/image-4.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">87924348264132406875276140514499937145050893665602592992418171647042491658461</span></span><br><span class="line">c = <span class="number">87677652386897749300638591365341016390128692783949277305987828177045932576708</span></span><br><span class="line">p = <span class="number">275127860351348928173285174381581152299</span></span><br><span class="line">q = <span class="number">319576316814478949870590164193048041239</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="Virginia"><a href="#Virginia" class="headerlink" title="Virginia"></a>Virginia</h2><p>没有密钥的维吉尼亚密码，用 <a href="https://www.guballa.de/vigenere-solver">Vigenere Solver | guballa.de</a> 处理，可以得知这是一个特殊的凯撒加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My password is not a regular Caesar password,and the enc flag=[86, 116, 128, 80, 98, 85, 139, 122, 134, 114, 125, 136, 117, 123, 129, 127, 128, 128, 142, 130, 140, 147, 127, 132, 131, 136, 151, 134, 152, 164] -Caesar</span><br></pre></td></tr></table></figure><p>我们知道flag的格式一定是LitCTF{}，又因为是特殊凯撒加密，那么前7位与密文一定存在对应关系</p><table><thead><tr><th align="center"></th><th align="center">L</th><th align="center">i</th><th align="center">t</th><th align="center">C</th><th align="center">T</th><th align="center">F</th><th align="center">{</th></tr></thead><tbody><tr><td align="center">ASCII码十进制</td><td align="center">76</td><td align="center">105</td><td align="center">116</td><td align="center">67</td><td align="center">84</td><td align="center">70</td><td align="center">123</td></tr><tr><td align="center">encrypted</td><td align="center">86</td><td align="center">116</td><td align="center">128</td><td align="center">80</td><td align="center">98</td><td align="center">85</td><td align="center">139</td></tr><tr><td align="center">对比</td><td align="center">+10</td><td align="center">+11</td><td align="center">+12</td><td align="center">+13</td><td align="center">+14</td><td align="center">+15</td><td align="center">+16</td></tr></tbody></table><p>那么可以编写脚本解出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f=[<span class="number">86</span>, <span class="number">116</span>, <span class="number">128</span>, <span class="number">80</span>, <span class="number">98</span>, <span class="number">85</span>, <span class="number">139</span>, <span class="number">122</span>, <span class="number">134</span>, <span class="number">114</span>, <span class="number">125</span>, <span class="number">136</span>, <span class="number">117</span>, <span class="number">123</span>, <span class="number">129</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">142</span>, <span class="number">130</span>, <span class="number">140</span>, <span class="number">147</span>, <span class="number">127</span>, <span class="number">132</span>, <span class="number">131</span>, <span class="number">136</span>, <span class="number">151</span>, <span class="number">134</span>, <span class="number">152</span>, <span class="number">164</span>]</span><br><span class="line">i=<span class="number">10</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> f:</span><br><span class="line">    flag+=<span class="built_in">chr</span>(j-i)</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
